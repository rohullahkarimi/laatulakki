{"version":3,"file":"functions.modern.js","sources":["../src/utils.ts","../src/center.ts","../src/list-node-scenes.ts","../src/clear-node-parent.ts","../../../node_modules/gl-matrix/esm/common.js","../../../node_modules/gl-matrix/esm/mat4.js","../../../node_modules/gl-matrix/esm/vec3.js","../../../node_modules/gl-matrix/esm/vec4.js","../src/transform-primitive.ts","../../../node_modules/gl-matrix/esm/mat3.js","../src/transform-mesh.ts","../src/clear-node-transform.ts","../src/dedup.ts","../src/dequantize.ts","../src/list-texture-info.ts","../src/prune.ts","../src/weld.ts","../src/clean-primitive.ts","../src/draco.ts","../src/flatten.ts","../src/get-node-scene.ts","../src/get-texture-color-space.ts","../src/inspect.ts","../src/instance.ts","../src/join-primitives.ts","../src/join.ts","../src/list-texture-channels.ts","../src/list-texture-slots.ts","../src/reorder.ts","../src/sort-primitive-weights.ts","../src/quantize.ts","../src/meshopt.ts","../src/metal-rough.ts","../src/unweld.ts","../src/normals.ts","../src/palette.ts","../src/partition.ts","../../../node_modules/keyframe-resample/dist/keyframe-resample-browser.modern.js","../src/resample.ts","../src/sequence.ts","../src/simplify.ts","../src/sparse.ts","../src/texture-resize.ts","../src/texture-compress.ts","../src/tangents.ts","../src/unlit.ts","../src/unpartition.ts","../src/vertex-color-space.ts"],"sourcesContent":["import type { NdArray } from 'ndarray';\nimport { getPixels, savePixels } from 'ndarray-pixels';\nimport {\n\tAccessor,\n\tDocument,\n\tPrimitive,\n\tProperty,\n\tPropertyType,\n\tTexture,\n\tTransform,\n\tTransformContext,\n} from '@gltf-transform/core';\n\n/**\n * Prepares a function used in an {@link Document.transform} pipeline. Use of this wrapper is\n * optional, and plain functions may be used in transform pipelines just as well. The wrapper is\n * used internally so earlier pipeline stages can detect and optimize based on later stages.\n * @hidden\n */\nexport function createTransform(name: string, fn: Transform): Transform {\n\tObject.defineProperty(fn, 'name', { value: name });\n\treturn fn;\n}\n\n/** @hidden */\nexport function isTransformPending(context: TransformContext | undefined, initial: string, pending: string): boolean {\n\tif (!context) return false;\n\tconst initialIndex = context.stack.lastIndexOf(initial);\n\tconst pendingIndex = context.stack.lastIndexOf(pending);\n\treturn initialIndex < pendingIndex;\n}\n\n/**\n * Maps pixels from source to target textures, with a per-pixel callback.\n * @hidden\n */\nexport async function rewriteTexture(\n\tsource: Texture,\n\ttarget: Texture,\n\tfn: (pixels: NdArray, i: number, j: number) => void\n): Promise<Texture | null> {\n\tif (!source) return null;\n\n\tconst srcImage = source.getImage();\n\tif (!srcImage) return null;\n\n\tconst pixels = await getPixels(srcImage, source.getMimeType());\n\n\tfor (let i = 0; i < pixels.shape[0]; ++i) {\n\t\tfor (let j = 0; j < pixels.shape[1]; ++j) {\n\t\t\tfn(pixels, i, j);\n\t\t}\n\t}\n\n\tconst dstImage = await savePixels(pixels, 'image/png');\n\treturn target.setImage(dstImage).setMimeType('image/png');\n}\n\n/** @hidden */\nexport function getGLPrimitiveCount(prim: Primitive): number {\n\tconst indices = prim.getIndices();\n\tconst position = prim.getAttribute('POSITION')!;\n\n\t// Reference: https://www.khronos.org/opengl/wiki/Primitive\n\tswitch (prim.getMode()) {\n\t\tcase Primitive.Mode.POINTS:\n\t\t\treturn position.getCount();\n\t\tcase Primitive.Mode.LINES:\n\t\t\treturn indices ? indices.getCount() / 2 : position.getCount() / 2;\n\t\tcase Primitive.Mode.LINE_LOOP:\n\t\t\treturn position.getCount();\n\t\tcase Primitive.Mode.LINE_STRIP:\n\t\t\treturn position.getCount() - 1;\n\t\tcase Primitive.Mode.TRIANGLES:\n\t\t\treturn indices ? indices.getCount() / 3 : position.getCount() / 3;\n\t\tcase Primitive.Mode.TRIANGLE_STRIP:\n\t\tcase Primitive.Mode.TRIANGLE_FAN:\n\t\t\treturn position.getCount() - 2;\n\t\tdefault:\n\t\t\tthrow new Error('Unexpected mode: ' + prim.getMode());\n\t}\n}\n\n/** @hidden */\nexport class SetMap<K, V> {\n\tprivate _map = new Map<K, Set<V>>();\n\tpublic get size(): number {\n\t\treturn this._map.size;\n\t}\n\tpublic has(k: K): boolean {\n\t\treturn this._map.has(k);\n\t}\n\tpublic add(k: K, v: V): this {\n\t\tlet entry = this._map.get(k);\n\t\tif (!entry) {\n\t\t\tentry = new Set();\n\t\t\tthis._map.set(k, entry);\n\t\t}\n\t\tentry.add(v);\n\t\treturn this;\n\t}\n\tpublic get(k: K): Set<V> {\n\t\treturn this._map.get(k) || new Set();\n\t}\n\tpublic keys(): Iterable<K> {\n\t\treturn this._map.keys();\n\t}\n}\n\n/** @hidden */\nexport function formatBytes(bytes: number, decimals = 2): string {\n\tif (bytes === 0) return '0 Bytes';\n\n\tconst k = 1000;\n\tconst dm = decimals < 0 ? 0 : decimals;\n\tconst sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n\tconst i = Math.floor(Math.log(bytes) / Math.log(k));\n\n\treturn parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\n/** @hidden */\nexport function formatLong(x: number): string {\n\treturn x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\n/** @hidden */\nexport function formatDelta(a: number, b: number, decimals = 2): string {\n\tconst prefix = a > b ? '–' : '+';\n\tconst suffix = '%';\n\treturn prefix + ((Math.abs(a - b) / a) * 100).toFixed(decimals) + suffix;\n}\n\n/** @hidden */\nexport function formatDeltaOp(a: number, b: number) {\n\treturn `${formatLong(a)} → ${formatLong(b)} (${formatDelta(a, b)})`;\n}\n\n/**\n * Returns a list of all unique vertex attributes on the given primitive and\n * its morph targets.\n * @hidden\n */\nexport function deepListAttributes(prim: Primitive): Accessor[] {\n\tconst accessors: Accessor[] = [];\n\n\tfor (const attribute of prim.listAttributes()) {\n\t\taccessors.push(attribute);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const attribute of target.listAttributes()) {\n\t\t\taccessors.push(attribute);\n\t\t}\n\t}\n\n\treturn Array.from(new Set(accessors));\n}\n\n/** @hidden */\nexport function deepSwapAttribute(prim: Primitive, src: Accessor, dst: Accessor): void {\n\tprim.swap(src, dst);\n\tfor (const target of prim.listTargets()) {\n\t\ttarget.swap(src, dst);\n\t}\n}\n\n/** @hidden */\nexport function remapAttribute(attribute: Accessor, remap: Uint32Array, dstCount: number) {\n\tconst elementSize = attribute.getElementSize();\n\tconst srcCount = attribute.getCount();\n\tconst srcArray = attribute.getArray()!;\n\tconst dstArray = srcArray.slice(0, dstCount * elementSize);\n\n\tfor (let i = 0; i < srcCount; i++) {\n\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\tdstArray[remap[i] * elementSize + j] = srcArray[i * elementSize + j];\n\t\t}\n\t}\n\n\tattribute.setArray(dstArray);\n}\n\n/** @hidden */\nexport function createIndices(count: number, maxIndex = count): Uint16Array | Uint32Array {\n\tconst array = maxIndex <= 65534 ? new Uint16Array(count) : new Uint32Array(count);\n\tfor (let i = 0; i < array.length; i++) array[i] = i;\n\treturn array;\n}\n\n/** @hidden */\nexport function isUsed(prop: Property): boolean {\n\treturn prop.listParents().some((parent) => parent.propertyType !== PropertyType.ROOT);\n}\n\n/**\n * Creates a unique key associated with the structure and draw call characteristics of\n * a {@link Primitive}, independent of its vertex content. Helper method, used to\n * identify candidate Primitives for joining.\n * @hidden\n */\nexport function createPrimGroupKey(prim: Primitive): string {\n\tconst document = Document.fromGraph(prim.getGraph())!;\n\tconst material = prim.getMaterial();\n\tconst materialIndex = document.getRoot().listMaterials().indexOf(material!);\n\tconst mode = prim.getMode();\n\tconst indices = !!prim.getIndices();\n\n\tconst attributes = prim\n\t\t.listSemantics()\n\t\t.sort()\n\t\t.map((semantic) => {\n\t\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\t\tconst elementSize = attribute.getElementSize();\n\t\t\tconst componentType = attribute.getComponentType();\n\t\t\treturn `${semantic}:${elementSize}:${componentType}`;\n\t\t})\n\t\t.join('+');\n\n\tconst targets = prim\n\t\t.listTargets()\n\t\t.map((target) => {\n\t\t\treturn target\n\t\t\t\t.listSemantics()\n\t\t\t\t.sort()\n\t\t\t\t.map((semantic) => {\n\t\t\t\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\t\t\t\tconst elementSize = attribute.getElementSize();\n\t\t\t\t\tconst componentType = attribute.getComponentType();\n\t\t\t\t\treturn `${semantic}:${elementSize}:${componentType}`;\n\t\t\t\t})\n\t\t\t\t.join('+');\n\t\t})\n\t\t.join('~');\n\n\treturn `${materialIndex}|${mode}|${indices}|${attributes}|${targets}`;\n}\n","import type { Document, Transform, vec3 } from '@gltf-transform/core';\nimport { getBounds } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'center';\n\n/** Options for the {@link center} function. */\nexport interface CenterOptions {\n\t/** Location on the model to be considered the pivot, and recentered at the origin. */\n\tpivot?: 'center' | 'above' | 'below' | vec3;\n}\n\nconst CENTER_DEFAULTS: Required<CenterOptions> = { pivot: 'center' };\n\n/**\n * Centers the {@link Scene} at the origin, or above/below it. Transformations from animation,\n * skinning, and morph targets are not taken into account.\n *\n * Example:\n *\n * ```ts\n * await document.transform(center({pivot: 'below'}));\n * ```\n *\n * @category Transforms\n */\nexport function center(_options: CenterOptions = CENTER_DEFAULTS): Transform {\n\tconst options = { ...CENTER_DEFAULTS, ..._options } as Required<CenterOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst isAnimated = root.listAnimations().length > 0 || root.listSkins().length > 0;\n\n\t\tdoc.getRoot()\n\t\t\t.listScenes()\n\t\t\t.forEach((scene, index) => {\n\t\t\t\tlogger.debug(`${NAME}: Scene ${index + 1} / ${root.listScenes().length}.`);\n\n\t\t\t\tlet pivot: vec3;\n\t\t\t\tif (typeof options.pivot === 'string') {\n\t\t\t\t\tconst bbox = getBounds(scene);\n\t\t\t\t\tpivot = [\n\t\t\t\t\t\t(bbox.max[0] - bbox.min[0]) / 2 + bbox.min[0],\n\t\t\t\t\t\t(bbox.max[1] - bbox.min[1]) / 2 + bbox.min[1],\n\t\t\t\t\t\t(bbox.max[2] - bbox.min[2]) / 2 + bbox.min[2],\n\t\t\t\t\t];\n\t\t\t\t\tif (options.pivot === 'above') pivot[1] = bbox.max[1];\n\t\t\t\t\tif (options.pivot === 'below') pivot[1] = bbox.min[1];\n\t\t\t\t} else {\n\t\t\t\t\tpivot = options.pivot as vec3;\n\t\t\t\t}\n\n\t\t\t\tlogger.debug(`${NAME}: Pivot \"${pivot.join(', ')}\".`);\n\n\t\t\t\tconst offset: vec3 = [-1 * pivot[0], -1 * pivot[1], -1 * pivot[2]];\n\n\t\t\t\tif (isAnimated) {\n\t\t\t\t\tlogger.debug(`${NAME}: Model contains animation or skin. Adding a wrapper node.`);\n\t\t\t\t\tconst offsetNode = doc.createNode('Pivot').setTranslation(offset);\n\t\t\t\t\tscene.listChildren().forEach((child) => offsetNode.addChild(child));\n\t\t\t\t\tscene.addChild(offsetNode);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.debug(`${NAME}: Skipping wrapper, offsetting all root nodes.`);\n\t\t\t\t\tscene.listChildren().forEach((child) => {\n\t\t\t\t\t\tconst t = child.getTranslation();\n\t\t\t\t\t\tchild.setTranslation([t[0] + offset[0], t[1] + offset[1], t[2] + offset[2]]);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import { Node, Scene } from '@gltf-transform/core';\n\n/**\n * Finds the parent {@link Scene Scenes} associated with the given {@link Node}.\n * In most cases a Node is associated with only one Scene, but it is possible\n * for a Node to be located in two or more Scenes, or none at all.\n *\n * Example:\n *\n * ```typescript\n * import { listNodeScenes } from '@gltf-transform/functions';\n *\n * const node = document.getRoot().listNodes()\n *  .find((node) => node.getName() === 'MyNode');\n *\n * const scenes = listNodeScenes(node);\n * ```\n */\nexport function listNodeScenes(node: Node): Scene[] {\n\tconst visited = new Set<Node>();\n\n\tlet child = node;\n\tlet parent: Node | null;\n\n\twhile ((parent = child.getParentNode() as Node | null)) {\n\t\tif (visited.has(parent)) {\n\t\t\tthrow new Error('Circular dependency in scene graph.');\n\t\t}\n\t\tvisited.add(parent);\n\t\tchild = parent;\n\t}\n\n\treturn child.listParents().filter((parent) => parent instanceof Scene) as Scene[];\n}\n","import type { Node } from '@gltf-transform/core';\nimport { listNodeScenes } from './list-node-scenes.js';\n\n/**\n * Clears the parent of the given {@link Node}, leaving it attached\n * directly to its {@link Scene}. Inherited transforms will be applied\n * to the Node. This operation changes the Node's local transform,\n * but leaves its world transform unchanged.\n *\n * Example:\n *\n * ```typescript\n * import { clearNodeParent } from '@gltf-transform/functions';\n *\n * scene.traverse((node) => { ... }); // Scene → … → Node\n *\n * clearNodeParent(node);\n *\n * scene.traverse((node) => { ... }); // Scene → Node\n * ```\n *\n * To clear _all_ transforms of a Node, first clear its inherited transforms with\n * {@link clearNodeParent}, then clear the local transform with {@link clearNodeTransform}.\n */\nexport function clearNodeParent(node: Node): Node {\n\tconst scenes = listNodeScenes(node);\n\tconst parent = node.getParentNode();\n\n\tif (!parent) return node;\n\n\t// Apply inherited transforms to local matrix. Skinned meshes are not affected\n\t// by the node parent's trasnform, and can be ignored. Updates to IBMs and TRS\n\t// animations are out of scope in this context.\n\tnode.setMatrix(node.getWorldMatrix());\n\n\t// Add to Scene roots.\n\tparent.removeChild(node);\n\tfor (const scene of scenes) scene.addChild(node);\n\n\treturn node;\n}\n","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import type { vec3, vec4, mat4, Accessor, Primitive } from '@gltf-transform/core';\nimport { create as createMat3, fromMat4, invert, transpose } from 'gl-matrix/mat3';\nimport { create as createVec3, normalize as normalizeVec3, transformMat3, transformMat4 } from 'gl-matrix/vec3';\nimport { create as createVec4 } from 'gl-matrix/vec4';\nimport { createIndices } from './utils.js';\n\n/**\n * Applies a transform matrix to a {@link Primitive}.\n *\n * When calling {@link transformPrimitive}, any un-masked vertices are overwritten\n * directly in the underlying vertex streams. If streams should be detached instead,\n * see {@link transformMesh}.\n *\n * Example:\n *\n * ```javascript\n * import { fromTranslation } from 'gl-matrix/mat4';\n * import { transformPrimitive } from '@gltf-transform/functions';\n *\n * // offset vertices, y += 10.\n * transformPrimitive(prim, fromTranslation([], [0, 10, 0]));\n * ```\n *\n * @param prim\n * @param matrix\n * @param skipIndices Vertices, specified by index, to be _excluded_ from the transformation.\n */\nexport function transformPrimitive(prim: Primitive, matrix: mat4, skipIndices = new Set<number>()): void {\n\tconst position = prim.getAttribute('POSITION')!;\n\tconst indices = (prim.getIndices()?.getArray() || createIndices(position!.getCount())) as Uint32Array;\n\n\t// Apply transform to base attributes.\n\tif (position) {\n\t\tapplyMatrix(matrix, position, indices, new Set(skipIndices));\n\t}\n\n\tconst normal = prim.getAttribute('NORMAL');\n\tif (normal) {\n\t\tapplyNormalMatrix(matrix, normal, indices, new Set(skipIndices));\n\t}\n\n\tconst tangent = prim.getAttribute('TANGENT');\n\tif (tangent) {\n\t\tapplyTangentMatrix(matrix, tangent, indices, new Set(skipIndices));\n\t}\n\n\t// Apply transform to morph attributes.\n\tfor (const target of prim.listTargets()) {\n\t\tconst position = target.getAttribute('POSITION');\n\t\tif (position) {\n\t\t\tapplyMatrix(matrix, position, indices, new Set(skipIndices));\n\t\t}\n\n\t\tconst normal = target.getAttribute('NORMAL');\n\t\tif (normal) {\n\t\t\tapplyNormalMatrix(matrix, normal, indices, new Set(skipIndices));\n\t\t}\n\n\t\tconst tangent = target.getAttribute('TANGENT');\n\t\tif (tangent) {\n\t\t\tapplyTangentMatrix(matrix, tangent, indices, new Set(skipIndices));\n\t\t}\n\t}\n\n\t// Update mask.\n\tfor (let i = 0; i < indices.length; i++) skipIndices.add(indices[i]);\n}\n\nfunction applyMatrix(matrix: mat4, attribute: Accessor, indices: Uint32Array, skipIndices: Set<number>) {\n\t// An arbitrary transform may not keep vertex positions in the required\n\t// range of a normalized attribute. Replace the array, instead.\n\tconst dstArray = new Float32Array(attribute.getCount() * 3);\n\tconst elementSize = attribute.getElementSize();\n\n\tfor (let i = 0, el: number[] = [], il = attribute.getCount(); i < il; i++) {\n\t\tdstArray.set(attribute.getElement(i, el), i * elementSize);\n\t}\n\n\tconst vector = createVec3() as vec3;\n\tfor (let i = 0; i < indices.length; i++) {\n\t\tconst index = indices[i];\n\t\tif (skipIndices.has(index)) continue;\n\n\t\tattribute.getElement(index, vector);\n\t\ttransformMat4(vector, vector, matrix);\n\t\tdstArray.set(vector, index * 3);\n\n\t\tskipIndices.add(index);\n\t}\n\n\tattribute.setArray(dstArray).setNormalized(false);\n}\n\nfunction applyNormalMatrix(matrix: mat4, attribute: Accessor, indices: Uint32Array, skipIndices: Set<number>) {\n\tconst normalMatrix = createMat3();\n\tfromMat4(normalMatrix, matrix);\n\tinvert(normalMatrix, normalMatrix);\n\ttranspose(normalMatrix, normalMatrix);\n\n\tconst vector = createVec3() as vec3;\n\tfor (let i = 0; i < indices.length; i++) {\n\t\tconst index = indices[i];\n\t\tif (skipIndices.has(index)) continue;\n\n\t\tattribute.getElement(index, vector);\n\t\ttransformMat3(vector, vector, normalMatrix);\n\t\tnormalizeVec3(vector, vector);\n\t\tattribute.setElement(index, vector);\n\n\t\tskipIndices.add(index);\n\t}\n}\n\nfunction applyTangentMatrix(matrix: mat4, attribute: Accessor, indices: Uint32Array, skipIndices: Set<number>) {\n\tconst v3 = createVec3() as vec3;\n\tconst v4 = createVec4() as vec4;\n\tfor (let i = 0; i < indices.length; i++) {\n\t\tconst index = indices[i];\n\t\tif (skipIndices.has(index)) continue;\n\n\t\tattribute.getElement(index, v4);\n\n\t\t// mat4 affine matrix applied to vector, vector interpreted as a direction.\n\t\t// Reference: https://github.com/mrdoob/three.js/blob/9f4de99828c05e71c47e6de0beb4c6e7652e486a/src/math/Vector3.js#L286-L300\n\t\tconst [x, y, z] = v4;\n\t\tv3[0] = matrix[0] * x + matrix[4] * y + matrix[8] * z;\n\t\tv3[1] = matrix[1] * x + matrix[5] * y + matrix[9] * z;\n\t\tv3[2] = matrix[2] * x + matrix[6] * y + matrix[10] * z;\n\t\tnormalizeVec3(v3, v3);\n\n\t\t(v4[0] = v3[0]), (v4[1] = v3[1]), (v4[2] = v3[2]);\n\n\t\tattribute.setElement(index, v4);\n\n\t\tskipIndices.add(index);\n\t}\n}\n","import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;","import { mat4, Accessor, Primitive, Mesh, PropertyType, PrimitiveTarget } from '@gltf-transform/core';\nimport { transformPrimitive } from './transform-primitive.js';\nimport { deepListAttributes } from './utils.js';\n\n/**\n * Applies a transform matrix to every {@link Primitive} in the given {@link Mesh}.\n *\n * Method:\n * - If any primitives are shared by other meshes, they will be detached.\n * - If any vertex streams are shared by primitives of other meshes, vertex data\n *  will be overwritten unless _overwrite=false_ or the indices are masked. If\n * \t_overwrite=false_, a detached copy of the vertex stream is made before applying\n * \tthe transform.\n * - Primitives within the mesh sharing vertex streams will continue to share those streams.\n * - For indexed primitives, only indexed vertices are modified.\n *\n * Example:\n *\n * ```javascript\n * import { fromTranslation } from 'gl-matrix/mat4';\n * import { transformMesh } from '@gltf-transform/functions';\n *\n * // offset vertices, y += 10.\n * transformMesh(mesh, fromTranslation([], [0, 10, 0]));\n * ```\n *\n * @param mesh\n * @param matrix\n * @param overwrite Whether to overwrite vertex streams in place. If false,\n * \t\tstreams shared with other meshes will be detached.\n * @param skipIndices Vertices, specified by index, to be _excluded_ from the transformation.\n */\nexport function transformMesh(mesh: Mesh, matrix: mat4, overwrite = false, skipIndices?: Set<number>): void {\n\t// (1) Detach shared prims.\n\tfor (const srcPrim of mesh.listPrimitives()) {\n\t\tconst isShared = srcPrim.listParents().some((p) => p.propertyType === PropertyType.MESH && p !== mesh);\n\t\tif (isShared) {\n\t\t\tconst dstPrim = srcPrim.clone();\n\t\t\tmesh.swap(srcPrim, dstPrim);\n\n\t\t\tfor (const srcTarget of dstPrim.listTargets()) {\n\t\t\t\tconst dstTarget = srcTarget.clone();\n\t\t\t\tdstPrim.swap(srcTarget, dstTarget);\n\t\t\t}\n\t\t}\n\t}\n\n\t// (2) Detach shared vertex streams.\n\tif (!overwrite) {\n\t\tconst parents = new Set<Primitive | PrimitiveTarget>([\n\t\t\t...mesh.listPrimitives(),\n\t\t\t...mesh.listPrimitives().flatMap((prim) => prim.listTargets()),\n\t\t]);\n\t\tconst attributes = new Map<Accessor, Accessor>();\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\tfor (const srcAttribute of deepListAttributes(prim)) {\n\t\t\t\tconst isShared = srcAttribute\n\t\t\t\t\t.listParents()\n\t\t\t\t\t.some((a) => (a instanceof Primitive || a instanceof PrimitiveTarget) && !parents.has(a));\n\t\t\t\tif (isShared && !attributes.has(srcAttribute)) {\n\t\t\t\t\tattributes.set(srcAttribute, srcAttribute.clone());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const parent of parents) {\n\t\t\tfor (const [srcAttribute, dstAttribute] of attributes) {\n\t\t\t\tparent.swap(srcAttribute, dstAttribute);\n\t\t\t}\n\t\t}\n\t}\n\n\t// (3) Apply transform.\n\tconst attributeSkipIndices = new Map<Accessor, Set<number>>();\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tconst position = prim.getAttribute('POSITION')!;\n\n\t\tlet primSkipIndices;\n\t\tif (skipIndices) {\n\t\t\tprimSkipIndices = skipIndices;\n\t\t} else if (attributeSkipIndices.has(position)) {\n\t\t\tprimSkipIndices = attributeSkipIndices.get(position)!;\n\t\t} else {\n\t\t\tattributeSkipIndices.set(position, (primSkipIndices = new Set<number>()));\n\t\t}\n\n\t\ttransformPrimitive(prim, matrix, primSkipIndices);\n\t}\n}\n","import { mat4, MathUtils, Node } from '@gltf-transform/core';\nimport { multiply as multiplyMat4 } from 'gl-matrix/mat4';\nimport { transformMesh } from './transform-mesh.js';\n\n// prettier-ignore\nconst IDENTITY: mat4 = [\n  1, 0, 0, 0,\n  0, 1, 0, 0,\n  0, 0, 1, 0,\n  0, 0, 0, 1\n];\n\n/**\n * Clears local transform of the {@link Node}, applying the transform to children and meshes.\n *\n * - Applies transform to children\n * - Applies transform to {@link Mesh mesh}\n * - Resets {@link Light lights}, {@link Camera cameras}, and other attachments to the origin\n *\n * Example:\n *\n * ```typescript\n * import { clearNodeTransform } from '@gltf-transform/functions';\n *\n * node.getTranslation(); // → [ 5, 0, 0 ]\n * node.getMesh(); // → vertex data centered at origin\n *\n * clearNodeTransform(node);\n *\n * node.getTranslation(); // → [ 0, 0, 0 ]\n * node.getMesh(); // → vertex data centered at [ 5, 0, 0 ]\n * ```\n *\n * To clear _all_ transforms of a Node, first clear its inherited transforms with\n * {@link clearNodeParent}, then clear the local transform with {@link clearNodeTransform}.\n */\nexport function clearNodeTransform(node: Node): Node {\n\tconst mesh = node.getMesh();\n\tconst localMatrix = node.getMatrix();\n\n\tif (mesh && !MathUtils.eq(localMatrix, IDENTITY)) {\n\t\ttransformMesh(mesh, localMatrix);\n\t}\n\n\tfor (const child of node.listChildren()) {\n\t\tconst matrix = child.getMatrix();\n\t\tmultiplyMat4(matrix, matrix, localMatrix);\n\t\tchild.setMatrix(matrix);\n\t}\n\n\treturn node.setMatrix(IDENTITY);\n}\n","import {\n\tAccessor,\n\tBufferUtils,\n\tDocument,\n\tMaterial,\n\tMesh,\n\tPrimitive,\n\tPrimitiveTarget,\n\tProperty,\n\tPropertyType,\n\tRoot,\n\tSkin,\n\tTexture,\n\tTransform,\n} from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'dedup';\n\nexport interface DedupOptions {\n\t/** List of {@link PropertyType} identifiers to be de-duplicated.*/\n\tpropertyTypes: string[];\n}\n\nconst DEDUP_DEFAULTS: Required<DedupOptions> = {\n\tpropertyTypes: [\n\t\tPropertyType.ACCESSOR,\n\t\tPropertyType.MESH,\n\t\tPropertyType.TEXTURE,\n\t\tPropertyType.MATERIAL,\n\t\tPropertyType.SKIN,\n\t],\n};\n\n/**\n * Removes duplicate {@link Accessor}, {@link Mesh}, {@link Texture}, and {@link Material}\n * properties. Partially based on a\n * [gist by mattdesl](https://gist.github.com/mattdesl/aea40285e2d73916b6b9101b36d84da8). Only\n * accessors in mesh primitives, morph targets, and animation samplers are processed.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listMeshes(); // → [Mesh, Mesh, Mesh]\n *\n * await document.transform(dedup({propertyTypes: [PropertyType.MESH]}));\n *\n * document.getRoot().listMeshes(); // → [Mesh]\n * ```\n *\n * @category Transforms\n */\nexport function dedup(_options: DedupOptions = DEDUP_DEFAULTS): Transform {\n\tconst options = { ...DEDUP_DEFAULTS, ..._options } as Required<DedupOptions>;\n\n\tconst propertyTypes = new Set(options.propertyTypes);\n\tfor (const propertyType of options.propertyTypes) {\n\t\tif (!DEDUP_DEFAULTS.propertyTypes.includes(propertyType)) {\n\t\t\tthrow new Error(`${NAME}: Unsupported deduplication on type \"${propertyType}\".`);\n\t\t}\n\t}\n\n\treturn createTransform(NAME, (document: Document): void => {\n\t\tconst logger = document.getLogger();\n\n\t\tif (propertyTypes.has(PropertyType.ACCESSOR)) dedupAccessors(document);\n\t\tif (propertyTypes.has(PropertyType.TEXTURE)) dedupImages(document);\n\t\tif (propertyTypes.has(PropertyType.MATERIAL)) dedupMaterials(document);\n\t\tif (propertyTypes.has(PropertyType.MESH)) dedupMeshes(document);\n\t\tif (propertyTypes.has(PropertyType.SKIN)) dedupSkins(document);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction dedupAccessors(document: Document): void {\n\tconst logger = document.getLogger();\n\n\t// Find all accessors used for mesh and animation data.\n\tconst indicesMap = new Map<string, Set<Accessor>>();\n\tconst attributeMap = new Map<string, Set<Accessor>>();\n\tconst inputMap = new Map<string, Set<Accessor>>();\n\tconst outputMap = new Map<string, Set<Accessor>>();\n\n\tconst meshes = document.getRoot().listMeshes();\n\tmeshes.forEach((mesh) => {\n\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\tprimitive.listAttributes().forEach((accessor) => hashAccessor(accessor, attributeMap));\n\t\t\thashAccessor(primitive.getIndices(), indicesMap);\n\t\t});\n\t});\n\n\tfor (const animation of document.getRoot().listAnimations()) {\n\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\thashAccessor(sampler.getInput(), inputMap);\n\t\t\thashAccessor(sampler.getOutput(), outputMap);\n\t\t}\n\t}\n\n\t// Add accessor to the appropriate hash group. Hashes are _non-unique_,\n\t// intended to quickly compare everything accept the underlying array.\n\tfunction hashAccessor(accessor: Accessor | null, group: Map<string, Set<Accessor>>): void {\n\t\tif (!accessor) return;\n\n\t\tconst hash = [\n\t\t\taccessor.getCount(),\n\t\t\taccessor.getType(),\n\t\t\taccessor.getComponentType(),\n\t\t\taccessor.getNormalized(),\n\t\t\taccessor.getSparse(),\n\t\t].join(':');\n\n\t\tlet hashSet = group.get(hash);\n\t\tif (!hashSet) group.set(hash, (hashSet = new Set<Accessor>()));\n\t\thashSet.add(accessor);\n\t}\n\n\t// Find duplicate accessors of a given type.\n\tfunction detectDuplicates(accessors: Accessor[], duplicates: Map<Accessor, Accessor>): void {\n\t\tfor (let i = 0; i < accessors.length; i++) {\n\t\t\tconst a = accessors[i];\n\t\t\tconst aData = BufferUtils.toView(a.getArray()!);\n\n\t\t\tif (duplicates.has(a)) continue;\n\n\t\t\tfor (let j = i + 1; j < accessors.length; j++) {\n\t\t\t\tconst b = accessors[j];\n\n\t\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\t\t// Just compare the arrays — everything else was covered by the\n\t\t\t\t// hash. Comparing uint8 views is faster than comparing the\n\t\t\t\t// original typed arrays.\n\t\t\t\tif (BufferUtils.equals(aData, BufferUtils.toView(b.getArray()!))) {\n\t\t\t\t\tduplicates.set(b, a);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tlet total = 0;\n\tconst duplicates = new Map<Accessor, Accessor>();\n\tfor (const group of [attributeMap, indicesMap, inputMap, outputMap]) {\n\t\tfor (const hashGroup of group.values()) {\n\t\t\ttotal += hashGroup.size;\n\t\t\tdetectDuplicates(Array.from(hashGroup), duplicates);\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Merged ${duplicates.size} of ${total} accessors.`);\n\n\t// Dissolve duplicate vertex attributes and indices.\n\tmeshes.forEach((mesh) => {\n\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\tprimitive.listAttributes().forEach((accessor) => {\n\t\t\t\tif (duplicates.has(accessor)) {\n\t\t\t\t\tprimitive.swap(accessor, duplicates.get(accessor) as Accessor);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst indices = primitive.getIndices();\n\t\t\tif (indices && duplicates.has(indices)) {\n\t\t\t\tprimitive.swap(indices, duplicates.get(indices) as Accessor);\n\t\t\t}\n\t\t});\n\t});\n\n\t// Dissolve duplicate animation sampler inputs and outputs.\n\tfor (const animation of document.getRoot().listAnimations()) {\n\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\tconst input = sampler.getInput();\n\t\t\tconst output = sampler.getOutput();\n\t\t\tif (input && duplicates.has(input)) {\n\t\t\t\tsampler.swap(input, duplicates.get(input) as Accessor);\n\t\t\t}\n\t\t\tif (output && duplicates.has(output)) {\n\t\t\t\tsampler.swap(output, duplicates.get(output) as Accessor);\n\t\t\t}\n\t\t}\n\t}\n\n\tArray.from(duplicates.keys()).forEach((accessor) => accessor.dispose());\n}\n\nfunction dedupMeshes(document: Document): void {\n\tconst logger = document.getLogger();\n\tconst root = document.getRoot();\n\n\t// Create Reference -> ID lookup table.\n\tconst refs = new Map<Accessor | Material, number>();\n\troot.listAccessors().forEach((accessor, index) => refs.set(accessor, index));\n\troot.listMaterials().forEach((material, index) => refs.set(material, index));\n\n\t// For each mesh, create a hashkey.\n\tconst numMeshes = root.listMeshes().length;\n\tconst uniqueMeshes = new Map<string, Mesh>();\n\tfor (const src of root.listMeshes()) {\n\t\t// For each mesh, create a hashkey.\n\t\tconst srcKeyItems = [];\n\t\tfor (const prim of src.listPrimitives()) {\n\t\t\tsrcKeyItems.push(createPrimitiveKey(prim, refs));\n\t\t}\n\n\t\t// If another mesh exists with the same key, replace all instances with that, and dispose\n\t\t// of the duplicate. If not, just cache it.\n\t\tconst meshKey = srcKeyItems.join(';');\n\t\tif (uniqueMeshes.has(meshKey)) {\n\t\t\tconst targetMesh = uniqueMeshes.get(meshKey)!;\n\t\t\tsrc.listParents().forEach((parent) => {\n\t\t\t\tif (parent.propertyType !== PropertyType.ROOT) {\n\t\t\t\t\tparent.swap(src, targetMesh);\n\t\t\t\t}\n\t\t\t});\n\t\t\tsrc.dispose();\n\t\t} else {\n\t\t\tuniqueMeshes.set(meshKey, src);\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Merged ${numMeshes - uniqueMeshes.size} of ${numMeshes} meshes.`);\n}\n\nfunction dedupImages(document: Document): void {\n\tconst logger = document.getLogger();\n\tconst root = document.getRoot();\n\tconst textures = root.listTextures();\n\tconst duplicates: Map<Texture, Texture> = new Map();\n\n\t// Compare each texture to every other texture — O(n²) — and mark duplicates for replacement.\n\tfor (let i = 0; i < textures.length; i++) {\n\t\tconst a = textures[i];\n\t\tconst aData = a.getImage();\n\n\t\tif (duplicates.has(a)) continue;\n\n\t\tfor (let j = i + 1; j < textures.length; j++) {\n\t\t\tconst b = textures[j];\n\t\t\tconst bData = b.getImage();\n\n\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\t// URIs are intentionally not compared.\n\t\t\tif (a.getMimeType() !== b.getMimeType()) continue;\n\n\t\t\tconst aSize = a.getSize();\n\t\t\tconst bSize = b.getSize();\n\t\t\tif (!aSize || !bSize) continue;\n\t\t\tif (aSize[0] !== bSize[0]) continue;\n\t\t\tif (aSize[1] !== bSize[1]) continue;\n\t\t\tif (!aData || !bData) continue;\n\t\t\tif (BufferUtils.equals(aData, bData)) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Merged ${duplicates.size} of ${root.listTextures().length} textures.`);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\nfunction dedupMaterials(document: Document): void {\n\tconst logger = document.getLogger();\n\tconst root = document.getRoot();\n\tconst materials = root.listMaterials();\n\tconst duplicates = new Map<Material, Material>();\n\tconst skip = new Set(['name']);\n\tconst modifierCache = new Map<Material, boolean>();\n\n\t// Compare each material to every other material — O(n²) — and mark duplicates for replacement.\n\tfor (let i = 0; i < materials.length; i++) {\n\t\tconst a = materials[i];\n\n\t\tif (duplicates.has(a)) continue;\n\t\tif (hasModifier(a, modifierCache)) continue;\n\n\t\tfor (let j = i + 1; j < materials.length; j++) {\n\t\t\tconst b = materials[j];\n\n\t\t\tif (duplicates.has(b)) continue;\n\t\t\tif (hasModifier(b, modifierCache)) continue;\n\n\t\t\tif (a.equals(b, skip)) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Merged ${duplicates.size} of ${materials.length} materials.`);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\nfunction dedupSkins(document: Document): void {\n\tconst logger = document.getLogger();\n\tconst root = document.getRoot();\n\tconst skins = root.listSkins();\n\tconst duplicates = new Map<Skin, Skin>();\n\tconst skip = new Set(['name']);\n\n\tfor (let i = 0; i < skins.length; i++) {\n\t\tconst a = skins[i];\n\n\t\tif (duplicates.has(a)) continue;\n\n\t\tfor (let j = i + 1; j < skins.length; j++) {\n\t\t\tconst b = skins[j];\n\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\tif (a.equals(b, skip)) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Merged ${duplicates.size} of ${skins.length} skins.`);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\n/** Generates a key unique to the content of a primitive or target. */\nfunction createPrimitiveKey(prim: Primitive | PrimitiveTarget, refs: Map<Accessor | Material, number>): string {\n\tconst primKeyItems = [];\n\tfor (const semantic of prim.listSemantics()) {\n\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\tprimKeyItems.push(semantic + ':' + refs.get(attribute));\n\t}\n\tif (prim instanceof Primitive) {\n\t\tconst indices = prim.getIndices();\n\t\tif (indices) {\n\t\t\tprimKeyItems.push('indices:' + refs.get(indices));\n\t\t}\n\t\tconst material = prim.getMaterial();\n\t\tif (material) {\n\t\t\tprimKeyItems.push('material:' + refs.get(material));\n\t\t}\n\t\tprimKeyItems.push('mode:' + prim.getMode());\n\t\tfor (const target of prim.listTargets()) {\n\t\t\tprimKeyItems.push('target:' + createPrimitiveKey(target, refs));\n\t\t}\n\t}\n\treturn primKeyItems.join(',');\n}\n\n/**\n * Detects dependencies modified by a parent reference, to conservatively prevent merging. When\n * implementing extensions like KHR_animation_pointer, the 'modifyChild' attribute should be added\n * to graph edges connecting the animation channel to the animated target property.\n *\n * NOTICE: Implementation is conservative, and could prevent merging two materials sharing the\n * same animated \"Clearcoat\" ExtensionProperty. While that scenario is possible for an in-memory\n * glTF Transform graph, valid glTF input files do not have that risk.\n */\nfunction hasModifier(prop: Property, cache: Map<Property, boolean>): boolean {\n\tif (cache.has(prop)) return cache.get(prop)!;\n\n\tconst graph = prop.getGraph();\n\tconst visitedNodes = new Set<Property>();\n\tconst edgeQueue = graph.listParentEdges(prop);\n\n\t// Search dependency subtree for 'modifyChild' attribute.\n\twhile (edgeQueue.length > 0) {\n\t\tconst edge = edgeQueue.pop()!;\n\t\tif (edge.getAttributes().modifyChild === true) {\n\t\t\tcache.set(prop, true);\n\t\t\treturn true;\n\t\t}\n\n\t\tconst child = edge.getChild();\n\t\tif (visitedNodes.has(child)) continue;\n\n\t\tfor (const childEdge of graph.listChildEdges(child)) {\n\t\t\tedgeQueue.push(childEdge);\n\t\t}\n\t}\n\n\tcache.set(prop, false);\n\treturn false;\n}\n","import type { Accessor, Document, Primitive, Transform } from '@gltf-transform/core';\nimport { KHRMeshQuantization } from '@gltf-transform/extensions';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'dequantize';\n\n/** Options for the {@link dequantize} function. */\nexport interface DequantizeOptions {\n\t/**\n\t * Pattern (regex) used to filter vertex attribute semantics for quantization.\n\t * Default: `/^((?!JOINTS_).)*$/`.\n\t */\n\tpattern?: RegExp;\n}\n\nconst DEQUANTIZE_DEFAULTS: DequantizeOptions = {\n\tpattern: /^((?!JOINTS_).)*$/,\n};\n\n/**\n * Dequantize {@link Primitive Primitives}, removing {@link KHRMeshQuantization `KHR_mesh_quantization`}\n * if present. Dequantization will increase the size of the mesh on disk and in memory, but may be\n * necessary for compatibility with applications that don't support quantization.\n *\n * @category Transforms\n */\nexport function dequantize(_options: DequantizeOptions = DEQUANTIZE_DEFAULTS): Transform {\n\tconst options = { ...DEQUANTIZE_DEFAULTS, ..._options } as Required<DequantizeOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tdequantizePrimitive(prim, options);\n\t\t\t}\n\t\t}\n\t\tdoc.createExtension(KHRMeshQuantization).dispose();\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction dequantizePrimitive(prim: Primitive, options: Required<DequantizeOptions>): void {\n\tfor (const semantic of prim.listSemantics()) {\n\t\tdequantizeAttribute(semantic, prim.getAttribute(semantic)!, options);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const semantic of target.listSemantics()) {\n\t\t\tdequantizeAttribute(semantic, target.getAttribute(semantic)!, options);\n\t\t}\n\t}\n}\n\nfunction dequantizeAttribute(semantic: string, attribute: Accessor, options: Required<DequantizeOptions>): void {\n\tif (!attribute.getArray()) return;\n\tif (!options.pattern.test(semantic)) return;\n\tif (attribute.getComponentSize() >= 4) return;\n\n\tconst srcArray = attribute.getArray()!;\n\tconst dstArray = new Float32Array(srcArray.length);\n\n\tfor (let i = 0, il = attribute.getCount(), el = [] as number[]; i < il; i++) {\n\t\tel = attribute.getElement(i, el);\n\t\tattribute.setArray(dstArray).setElement(i, el).setArray(srcArray);\n\t}\n\n\tattribute.setArray(dstArray).setNormalized(false);\n}\n","import { ExtensionProperty, Material, Property, Texture, TextureInfo } from '@gltf-transform/core';\n\n/**\n * Lists all {@link TextureInfo} definitions associated with a given\n * {@link Texture}. May be used to determine which UV transforms\n * and texCoord indices are applied to the material, without explicitly\n * checking the material properties and extensions.\n *\n * Example:\n *\n * ```typescript\n * // Find TextureInfo instances associated with the texture.\n * const results = listTextureInfo(texture);\n *\n * // Find which UV sets (TEXCOORD_0, TEXCOORD_1, ...) are required.\n * const texCoords = results.map((info) => info.getTexCoord());\n * // → [0, 1]\n * ```\n */\nexport function listTextureInfo(texture: Texture): TextureInfo[] {\n\tconst graph = texture.getGraph();\n\tconst results = new Set<TextureInfo>();\n\n\tfor (const textureEdge of graph.listParentEdges(texture)) {\n\t\tconst parent = textureEdge.getParent();\n\t\tconst name = textureEdge.getName() + 'Info';\n\n\t\tfor (const edge of graph.listChildEdges(parent)) {\n\t\t\tconst child = edge.getChild();\n\t\t\tif (child instanceof TextureInfo && edge.getName() === name) {\n\t\t\t\tresults.add(child);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn Array.from(results);\n}\n\n/**\n * Lists all {@link TextureInfo} definitions associated with any {@link Texture}\n * on the given {@link Material}. May be used to determine which UV transforms\n * and texCoord indices are applied to the material, without explicitly\n * checking the material properties and extensions.\n *\n * Example:\n *\n * ```typescript\n * const results = listTextureInfoByMaterial(material);\n *\n * const texCoords = results.map((info) => info.getTexCoord());\n * // → [0, 1]\n * ```\n */\nexport function listTextureInfoByMaterial(material: Material): TextureInfo[] {\n\tconst graph = material.getGraph();\n\tconst visited = new Set<Property>();\n\tconst results = new Set<TextureInfo>();\n\n\tfunction traverse(prop: Material | ExtensionProperty) {\n\t\tconst textureInfoNames = new Set<string>();\n\n\t\tfor (const edge of graph.listChildEdges(prop)) {\n\t\t\tif (edge.getChild() instanceof Texture) {\n\t\t\t\ttextureInfoNames.add(edge.getName() + 'Info');\n\t\t\t}\n\t\t}\n\n\t\tfor (const edge of graph.listChildEdges(prop)) {\n\t\t\tconst child = edge.getChild();\n\t\t\tif (visited.has(child)) continue;\n\t\t\tvisited.add(child);\n\n\t\t\tif (child instanceof TextureInfo && textureInfoNames.has(edge.getName())) {\n\t\t\t\tresults.add(child);\n\t\t\t} else if (child instanceof ExtensionProperty) {\n\t\t\t\ttraverse(child);\n\t\t\t}\n\t\t}\n\t}\n\n\ttraverse(material);\n\treturn Array.from(results);\n}\n","import {\n\tAnimationChannel,\n\tDocument,\n\tGraph,\n\tProperty,\n\tPropertyType,\n\tRoot,\n\tTransform,\n\tNode,\n\tScene,\n\tExtensionProperty,\n\tMaterial,\n\tPrimitive,\n\tPrimitiveTarget,\n\tTexture,\n\tTextureInfo,\n} from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\nimport { listTextureInfoByMaterial } from './list-texture-info.js';\n\nconst NAME = 'prune';\n\nexport interface PruneOptions {\n\t/** List of {@link PropertyType} identifiers to be de-duplicated.*/\n\tpropertyTypes?: string[];\n\t/** Whether to keep empty leaf nodes. */\n\tkeepLeaves?: boolean;\n\t/** Whether to keep unused vertex attributes, such as UVs without an assigned texture. */\n\tkeepAttributes?: boolean;\n}\nconst PRUNE_DEFAULTS: Required<PruneOptions> = {\n\tpropertyTypes: [\n\t\tPropertyType.NODE,\n\t\tPropertyType.SKIN,\n\t\tPropertyType.MESH,\n\t\tPropertyType.CAMERA,\n\t\tPropertyType.PRIMITIVE,\n\t\tPropertyType.PRIMITIVE_TARGET,\n\t\tPropertyType.ANIMATION,\n\t\tPropertyType.MATERIAL,\n\t\tPropertyType.TEXTURE,\n\t\tPropertyType.ACCESSOR,\n\t\tPropertyType.BUFFER,\n\t],\n\tkeepLeaves: false,\n\tkeepAttributes: true,\n};\n\n/**\n * Removes properties from the file if they are not referenced by a {@link Scene}. Commonly helpful\n * for cleaning up after other operations, e.g. allowing a node to be detached and any unused\n * meshes, materials, or other resources to be removed automatically.\n *\n * Example:\n *\n * ```\n * document.getRoot().listMaterials(); // → [Material, Material]\n *\n * await document.transform(prune());\n *\n * document.getRoot().listMaterials(); // → [Material]\n * ```\n *\n * No options are currently implemented for this function.\n *\n * @category Transforms\n */\nexport function prune(_options: PruneOptions = PRUNE_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...PRUNE_DEFAULTS, ..._options } as Required<PruneOptions>;\n\tconst propertyTypes = new Set(options.propertyTypes);\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst graph = doc.getGraph();\n\n\t\tconst disposed: Record<string, number> = {};\n\n\t\t// Prune top-down, so that low-level properties like accessors can be removed if the\n\t\t// properties referencing them are removed.\n\n\t\t// Prune empty Meshes.\n\t\tif (propertyTypes.has(PropertyType.MESH)) {\n\t\t\tfor (const mesh of root.listMeshes()) {\n\t\t\t\tif (mesh.listPrimitives().length > 0) continue;\n\t\t\t\tmesh.dispose();\n\t\t\t\tmarkDisposed(mesh);\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.NODE) && !options.keepLeaves) root.listScenes().forEach(nodeTreeShake);\n\t\tif (propertyTypes.has(PropertyType.NODE)) root.listNodes().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.SKIN)) root.listSkins().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.MESH)) root.listMeshes().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.CAMERA)) root.listCameras().forEach(treeShake);\n\n\t\tif (propertyTypes.has(PropertyType.PRIMITIVE)) {\n\t\t\tindirectTreeShake(graph, PropertyType.PRIMITIVE);\n\t\t}\n\t\tif (propertyTypes.has(PropertyType.PRIMITIVE_TARGET)) {\n\t\t\tindirectTreeShake(graph, PropertyType.PRIMITIVE_TARGET);\n\t\t}\n\n\t\t// Prune unused vertex attributes.\n\t\tif (!options.keepAttributes && propertyTypes.has(PropertyType.ACCESSOR)) {\n\t\t\tconst materialPrims = new Map<Material, Set<Primitive>>();\n\t\t\tfor (const mesh of root.listMeshes()) {\n\t\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\t\tconst material = prim.getMaterial();\n\t\t\t\t\tconst required = listRequiredSemantics(doc, material);\n\t\t\t\t\tconst unused = listUnusedSemantics(prim, required);\n\t\t\t\t\tpruneAttributes(prim, unused);\n\t\t\t\t\tprim.listTargets().forEach((target) => pruneAttributes(target, unused));\n\t\t\t\t\tif (material) {\n\t\t\t\t\t\tmaterialPrims.has(material)\n\t\t\t\t\t\t\t? materialPrims.get(material)!.add(prim)\n\t\t\t\t\t\t\t: materialPrims.set(material, new Set([prim]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const [material, prims] of materialPrims) {\n\t\t\t\tshiftTexCoords(material, Array.from(prims));\n\t\t\t}\n\t\t}\n\n\t\t// Pruning animations is a bit more complicated:\n\t\t// (1) Remove channels without target nodes.\n\t\t// (2) Remove animations without channels.\n\t\t// (3) Remove samplers orphaned in the process.\n\t\tif (propertyTypes.has(PropertyType.ANIMATION)) {\n\t\t\tfor (const anim of root.listAnimations()) {\n\t\t\t\tfor (const channel of anim.listChannels()) {\n\t\t\t\t\tif (!channel.getTargetNode()) {\n\t\t\t\t\t\tchannel.dispose();\n\t\t\t\t\t\tmarkDisposed(channel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!anim.listChannels().length) {\n\t\t\t\t\tconst samplers = anim.listSamplers();\n\t\t\t\t\ttreeShake(anim);\n\t\t\t\t\tsamplers.forEach(treeShake);\n\t\t\t\t} else {\n\t\t\t\t\tanim.listSamplers().forEach(treeShake);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.MATERIAL)) root.listMaterials().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.TEXTURE)) root.listTextures().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.ACCESSOR)) root.listAccessors().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.BUFFER)) root.listBuffers().forEach(treeShake);\n\n\t\t// TODO(bug): This process does not identify unused ExtensionProperty instances. That could\n\t\t// be a future enhancement, either tracking unlinked properties as if they were connected\n\t\t// to the Graph, or iterating over a property list provided by the Extension. Properties in\n\t\t// use by an Extension are correctly preserved, in the meantime.\n\n\t\tif (Object.keys(disposed).length) {\n\t\t\tconst str = Object.keys(disposed)\n\t\t\t\t.map((t) => `${t} (${disposed[t]})`)\n\t\t\t\t.join(', ');\n\t\t\tlogger.info(`${NAME}: Removed types... ${str}`);\n\t\t} else {\n\t\t\tlogger.info(`${NAME}: No unused properties found.`);\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t\t//\n\n\t\t/** Disposes of the given property if it is unused. */\n\t\tfunction treeShake(prop: Property): void {\n\t\t\t// Consider a property unused if it has no references from another property, excluding\n\t\t\t// types Root and AnimationChannel.\n\t\t\tconst parents = prop.listParents().filter((p) => !(p instanceof Root || p instanceof AnimationChannel));\n\t\t\tif (!parents.length) {\n\t\t\t\tprop.dispose();\n\t\t\t\tmarkDisposed(prop);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * For property types the Root does not maintain references to, we'll need to search the\n\t\t * graph. It's possible that objects may have been constructed without any outbound links,\n\t\t * but since they're not on the graph they don't need to be tree-shaken.\n\t\t */\n\t\tfunction indirectTreeShake(graph: Graph<Property>, propertyType: string): void {\n\t\t\tgraph\n\t\t\t\t.listEdges()\n\t\t\t\t.map((edge) => edge.getParent())\n\t\t\t\t.filter((parent) => parent.propertyType === propertyType)\n\t\t\t\t.forEach(treeShake);\n\t\t}\n\n\t\t/** Iteratively prunes leaf Nodes without contents. */\n\t\tfunction nodeTreeShake(prop: Node | Scene): void {\n\t\t\tprop.listChildren().forEach(nodeTreeShake);\n\n\t\t\tif (prop instanceof Scene) return;\n\n\t\t\tconst isUsed = graph.listParentEdges(prop).some((e) => {\n\t\t\t\tconst ptype = e.getParent().propertyType;\n\t\t\t\treturn ptype !== PropertyType.ROOT && ptype !== PropertyType.SCENE && ptype !== PropertyType.NODE;\n\t\t\t});\n\t\t\tconst isEmpty = graph.listChildren(prop).length === 0;\n\t\t\tif (isEmpty && !isUsed) {\n\t\t\t\tprop.dispose();\n\t\t\t\tmarkDisposed(prop);\n\t\t\t}\n\t\t}\n\n\t\tfunction pruneAttributes(prim: Primitive | PrimitiveTarget, unused: string[]) {\n\t\t\tfor (const semantic of unused) {\n\t\t\t\tprim.setAttribute(semantic, null);\n\t\t\t}\n\t\t}\n\n\t\t/** Records properties disposed by type. */\n\t\tfunction markDisposed(prop: Property): void {\n\t\t\tdisposed[prop.propertyType] = disposed[prop.propertyType] || 0;\n\t\t\tdisposed[prop.propertyType]++;\n\t\t}\n\t});\n}\n\n/**\n * Lists vertex attribute semantics that are unused when rendering a given primitive.\n */\nfunction listUnusedSemantics(prim: Primitive | PrimitiveTarget, required: Set<string>): string[] {\n\tconst unused = [];\n\tfor (const semantic of prim.listSemantics()) {\n\t\tif (semantic === 'TANGENT' && !required.has(semantic)) {\n\t\t\tunused.push(semantic);\n\t\t} else if (semantic.startsWith('TEXCOORD_') && !required.has(semantic)) {\n\t\t\tunused.push(semantic);\n\t\t} else if (semantic.startsWith('COLOR_') && semantic !== 'COLOR_0') {\n\t\t\tunused.push(semantic);\n\t\t}\n\t}\n\treturn unused;\n}\n\n/**\n * Lists vertex attribute semantics required by a material. Does not include\n * attributes that would be used unconditionally, like POSITION or NORMAL.\n */\nfunction listRequiredSemantics(\n\tdocument: Document,\n\tmaterial: Material | ExtensionProperty | null,\n\tsemantics = new Set<string>()\n): Set<string> {\n\tif (!material) return semantics;\n\n\tconst graph = document.getGraph();\n\n\tconst edges = graph.listChildEdges(material);\n\tconst textureNames = new Set<string>();\n\n\tfor (const edge of edges) {\n\t\tif (edge.getChild() instanceof Texture) {\n\t\t\ttextureNames.add(edge.getName());\n\t\t}\n\t}\n\n\tfor (const edge of edges) {\n\t\tconst name = edge.getName();\n\t\tconst child = edge.getChild();\n\n\t\tif (child instanceof TextureInfo) {\n\t\t\tif (textureNames.has(name.replace(/Info$/, ''))) {\n\t\t\t\tsemantics.add(`TEXCOORD_${child.getTexCoord()}`);\n\t\t\t}\n\t\t}\n\n\t\tif (child instanceof Texture && name.match(/normalTexture/i)) {\n\t\t\tsemantics.add('TANGENT');\n\t\t}\n\n\t\tif (child instanceof ExtensionProperty) {\n\t\t\tlistRequiredSemantics(document, child, semantics);\n\t\t}\n\n\t\t// TODO(#748): Does KHR_materials_anisotropy imply required vertex attributes?\n\t}\n\n\treturn semantics;\n}\n\n/**\n * Shifts texCoord indices on the given material and primitives assigned to\n * that material, such that indices start at zero and ascend without gaps.\n * Prior to calling this function, the implementation must ensure that:\n * - All TEXCOORD_n attributes on these prims are used by the material.\n * - Material does not require any unavailable TEXCOORD_n attributes.\n *\n * TEXCOORD_n attributes on morph targets are shifted alongside the parent\n * prim, but gaps may remain in their semantic lists.\n */\nfunction shiftTexCoords(material: Material, prims: Primitive[]) {\n\t// Create map from srcTexCoord → dstTexCoord.\n\tconst textureInfoList = listTextureInfoByMaterial(material);\n\tconst texCoordSet = new Set(textureInfoList.map((info: TextureInfo) => info.getTexCoord()));\n\tconst texCoordList = Array.from(texCoordSet).sort();\n\tconst texCoordMap = new Map(texCoordList.map((texCoord, index) => [texCoord, index]));\n\tconst semanticMap = new Map(texCoordList.map((texCoord, index) => [`TEXCOORD_${texCoord}`, `TEXCOORD_${index}`]));\n\n\t// Update material.\n\tfor (const textureInfo of textureInfoList) {\n\t\tconst texCoord = textureInfo.getTexCoord();\n\t\ttextureInfo.setTexCoord(texCoordMap.get(texCoord)!);\n\t}\n\n\t// Update prims.\n\tfor (const prim of prims) {\n\t\tconst semantics = prim\n\t\t\t.listSemantics()\n\t\t\t.filter((semantic) => semantic.startsWith('TEXCOORD_'))\n\t\t\t.sort();\n\t\tupdatePrim(prim, semantics);\n\t\tprim.listTargets().forEach((target) => updatePrim(target, semantics));\n\t}\n\n\tfunction updatePrim(prim: Primitive | PrimitiveTarget, srcSemantics: string[]) {\n\t\tfor (const srcSemantic of srcSemantics) {\n\t\t\tconst uv = prim.getAttribute(srcSemantic);\n\t\t\tif (!uv) continue;\n\n\t\t\tconst dstSemantic = semanticMap.get(srcSemantic)!;\n\t\t\tif (dstSemantic === srcSemantic) continue;\n\n\t\t\tprim.setAttribute(dstSemantic, uv);\n\t\t\tprim.setAttribute(srcSemantic, null);\n\t\t}\n\t}\n}\n","import {\n\tAccessor,\n\tDocument,\n\tPrimitive,\n\tPrimitiveTarget,\n\tPropertyType,\n\tTransform,\n\tTypedArray,\n\tvec3,\n} from '@gltf-transform/core';\nimport { cleanPrimitive } from './clean-primitive.js';\nimport { dedup } from './dedup.js';\nimport { prune } from './prune.js';\nimport { createIndices, createTransform, formatDeltaOp } from './utils.js';\n\n// DEVELOPER NOTES: Ideally a weld() implementation should be fast, robust,\n// and tunable. The writeup below tracks my attempts to solve for these\n// constraints.\n//\n// (Approach #1) Follow the mergeVertices() implementation of three.js,\n// hashing vertices with a string concatenation of all vertex attributes.\n// The approach does not allow per-attribute tolerance in local units.\n//\n// (Approach #2) Sort points along the X axis, then make cheaper\n// searches up/down the sorted list for merge candidates. While this allows\n// simpler comparison based on specified tolerance, it's much slower, even\n// for cases where choice of the X vs. Y or Z axes is reasonable.\n//\n// (Approach #3) Attempted a Delaunay triangulation in three dimensions,\n// expecting it would be an n * log(n) algorithm, but the only implementation\n// I found (with delaunay-triangulate) appeared to be much slower than that,\n// and was notably slower than the sort-based approach, just building the\n// Delaunay triangulation alone.\n//\n// (Approach #4) Hybrid of (1) and (2), assigning vertices to a spatial\n// grid, then searching the local neighborhood (27 cells) for weld candidates.\n//\n// RESULTS: For the \"Lovecraftian\" sample model, after joining, a primitive\n// with 873,000 vertices can be welded down to 230,000 vertices. Results:\n// - (1) Not tested, but prior results suggest not robust enough.\n// - (2) 30 seconds\n// - (3) 660 seconds\n// - (4) 5 seconds exhaustive, 1.5s non-exhaustive\n\nconst NAME = 'weld';\n\nconst Tolerance = {\n\tDEFAULT: 0.0001,\n\tTEXCOORD: 0.0001, // [0, 1]\n\tCOLOR: 0.01, // [0, 1]\n\tNORMAL: 0.5, // [-1, 1]\n\tJOINTS: 0.0, // [0, ∞]\n\tWEIGHTS: 0.01, // [0, ∞]\n};\n\n/** Options for the {@link weld} function. */\nexport interface WeldOptions {\n\t/** Tolerance, as a fraction of primitive AABB, used when merging similar vertices. */\n\ttolerance?: number;\n\t/** Whether to overwrite existing indices. */\n\toverwrite?: boolean;\n\t/** Enables a more thorough, but slower, search for vertices to weld. */\n\texhaustive?: boolean;\n}\n\nexport const WELD_DEFAULTS: Required<WeldOptions> = {\n\ttolerance: Tolerance.DEFAULT,\n\toverwrite: true,\n\texhaustive: false, // donmccurdy/glTF-Transform#886\n};\n\n/**\n * Index {@link Primitive Primitives} and (optionally) merge similar vertices. When merged\n * and indexed, data is shared more efficiently between vertices. File size can\n * be reduced, and the GPU can sometimes use the vertex cache more efficiently.\n *\n * When welding, the 'tolerance' threshold determines which vertices qualify for\n * welding based on distance between the vertices as a fraction of the primitive's\n * bounding box (AABB). For example, tolerance=0.01 welds vertices within +/-1%\n * of the AABB's longest dimension. Other vertex attributes are also compared\n * during welding, with attribute-specific thresholds. For --tolerance=0, geometry\n * is indexed in place, without merging.\n *\n * Example:\n *\n * ```javascript\n * import { weld } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tweld({ tolerance: 0.001 })\n * );\n * ```\n *\n * @category Transforms\n */\nexport function weld(_options: WeldOptions = WELD_DEFAULTS): Transform {\n\tconst options = { ...WELD_DEFAULTS, ..._options } as Required<WeldOptions>;\n\n\tif (options.tolerance > 0.1 || options.tolerance < 0) {\n\t\tthrow new Error(`${NAME}: Requires 0 ≤ tolerance ≤ 0.1`);\n\t}\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tweldPrimitive(doc, prim, options);\n\n\t\t\t\tif (prim.getIndices()!.getCount() === 0) prim.dispose();\n\t\t\t}\n\n\t\t\tif (mesh.listPrimitives().length === 0) mesh.dispose();\n\t\t}\n\n\t\tawait doc.transform(prune({ propertyTypes: [PropertyType.ACCESSOR, PropertyType.NODE] }));\n\t\tawait doc.transform(dedup({ propertyTypes: [PropertyType.ACCESSOR] }));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/**\n * Index a {@link Primitive} and (optionally) weld similar vertices. When merged\n * and indexed, data is shared more efficiently between vertices. File size can\n * be reduced, and the GPU can sometimes use the vertex cache more efficiently.\n *\n * When welding, the 'tolerance' threshold determines which vertices qualify for\n * welding based on distance between the vertices as a fraction of the primitive's\n * bounding box (AABB). For example, tolerance=0.01 welds vertices within +/-1%\n * of the AABB's longest dimension. Other vertex attributes are also compared\n * during welding, with attribute-specific thresholds. For --tolerance=0, geometry\n * is indexed in place, without merging.\n *\n * Example:\n *\n * ```javascript\n * import { weldPrimitive } from '@gltf-transform/functions';\n *\n * const mesh = document.getRoot().listMeshes()\n * \t.find((mesh) => mesh.getName() === 'Gizmo');\n *\n * for (const prim of mesh.listPrimitives()) {\n *   weldPrimitive(document, prim, {tolerance: 0.0001});\n * }\n * ```\n */\nexport function weldPrimitive(doc: Document, prim: Primitive, options: Required<WeldOptions>): void {\n\tif (prim.getIndices() && !options.overwrite) return;\n\tif (prim.getMode() === Primitive.Mode.POINTS) return;\n\tif (options.tolerance === 0) {\n\t\t_indexPrimitive(doc, prim);\n\t} else {\n\t\t_weldPrimitive(doc, prim, options);\n\t}\n}\n\n/** @internal Adds indices, if missing. Does not merge vertices. */\nfunction _indexPrimitive(doc: Document, prim: Primitive): void {\n\t// No need to overwrite here, even if options.overwrite=true.\n\tif (prim.getIndices()) return;\n\n\tconst attr = prim.listAttributes()[0];\n\tconst numVertices = attr.getCount();\n\tconst buffer = attr.getBuffer();\n\tconst indices = doc\n\t\t.createAccessor()\n\t\t.setBuffer(buffer)\n\t\t.setType(Accessor.Type.SCALAR)\n\t\t.setArray(createIndices(numVertices));\n\tprim.setIndices(indices);\n}\n\n/** @internal Weld and merge, combining vertices that are similar on all vertex attributes. */\nfunction _weldPrimitive(doc: Document, prim: Primitive, options: Required<WeldOptions>): void {\n\tconst logger = doc.getLogger();\n\n\tconst srcPosition = prim.getAttribute('POSITION')!;\n\tconst srcIndices = prim.getIndices() || doc.createAccessor().setArray(createIndices(srcPosition.getCount()));\n\tconst uniqueIndices = new Uint32Array(new Set(srcIndices.getArray()!)).sort();\n\n\t// (1) Compute per-attribute tolerance and spatial grid for vertices.\n\n\tconst baseTolerance = Math.max(options.tolerance, Number.EPSILON);\n\tconst attributeTolerance: Record<string, number> = {};\n\tfor (const semantic of prim.listSemantics()) {\n\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\tattributeTolerance[semantic] = getAttributeTolerance(semantic, attribute, baseTolerance);\n\t}\n\n\tlogger.debug(`${NAME}: Tolerance thresholds: ${formatKV(attributeTolerance)}`);\n\n\t// (2) Compare and identify vertices to weld.\n\n\tconst posA: vec3 = [0, 0, 0];\n\tconst posB: vec3 = [0, 0, 0];\n\n\tconst grid = {} as Record<string, number[]>;\n\tconst cellSize = attributeTolerance.POSITION;\n\n\tfor (let i = 0; i < uniqueIndices.length; i++) {\n\t\tsrcPosition.getElement(uniqueIndices[i], posA);\n\t\tconst key = getGridKey(posA, cellSize);\n\t\tgrid[key] = grid[key] || [];\n\t\tgrid[key].push(uniqueIndices[i]);\n\t}\n\n\t// (2) Compare and identify vertices to weld.\n\n\tconst srcMaxIndex = uniqueIndices[uniqueIndices.length - 1];\n\tconst weldMap = createIndices(srcMaxIndex + 1); // oldIndex → oldCommonIndex\n\tconst writeMap = new Array(uniqueIndices.length).fill(-1); // oldIndex → newIndex\n\n\tconst srcVertexCount = srcPosition.getCount();\n\tlet dstVertexCount = 0;\n\n\tfor (let i = 0; i < uniqueIndices.length; i++) {\n\t\tconst a = uniqueIndices[i];\n\t\tsrcPosition.getElement(a, posA);\n\n\t\tconst cellKeys = options.exhaustive ? getGridNeighborhoodKeys(posA, cellSize) : [getGridKey(posA, cellSize)];\n\n\t\tcells: for (const cellKey of cellKeys) {\n\t\t\tif (!grid[cellKey]) continue cells; // May occur in exhaustive search.\n\n\t\t\tneighbors: for (const j of grid[cellKey]) {\n\t\t\t\tconst b = weldMap[j];\n\n\t\t\t\t// Only weld to lower indices, preventing two-way match.\n\t\t\t\tif (a <= b) continue neighbors;\n\n\t\t\t\tsrcPosition.getElement(b, posB);\n\n\t\t\t\t// Weld if base attributes and morph target attributes match.\n\t\t\t\tconst isBaseMatch = prim.listSemantics().every((semantic) => {\n\t\t\t\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\t\t\t\tconst tolerance = attributeTolerance[semantic];\n\t\t\t\t\treturn compareAttributes(attribute, a, b, tolerance, semantic);\n\t\t\t\t});\n\t\t\t\tconst isTargetMatch = prim.listTargets().every((target) => {\n\t\t\t\t\treturn target.listSemantics().every((semantic) => {\n\t\t\t\t\t\tconst attribute = target.getAttribute(semantic)!;\n\t\t\t\t\t\tconst tolerance = attributeTolerance[semantic];\n\t\t\t\t\t\treturn compareAttributes(attribute, a, b, tolerance, semantic);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tif (isBaseMatch && isTargetMatch) {\n\t\t\t\t\tweldMap[a] = b;\n\t\t\t\t\tbreak cells;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Output the vertex if we didn't find a match, else record the index of the match. Because\n\t\t// we iterate vertices in ascending order, and only match to lower indices, we're\n\t\t// guaranteed the source vertex for a weld has already been marked for output.\n\t\tif (weldMap[a] === a) {\n\t\t\twriteMap[a] = dstVertexCount++;\n\t\t} else {\n\t\t\twriteMap[a] = writeMap[weldMap[a]];\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: ${formatDeltaOp(srcVertexCount, dstVertexCount)} vertices.`);\n\n\t// (3) Update indices.\n\n\tconst dstIndicesCount = srcIndices.getCount(); // # primitives does not change.\n\tconst dstIndicesArray = createIndices(dstIndicesCount, uniqueIndices.length);\n\tfor (let i = 0; i < dstIndicesCount; i++) {\n\t\tdstIndicesArray[i] = writeMap[srcIndices.getScalar(i)];\n\t}\n\tprim.setIndices(srcIndices.clone().setArray(dstIndicesArray));\n\tif (srcIndices.listParents().length === 1) srcIndices.dispose();\n\n\t// (4) Update vertex attributes.\n\n\tfor (const srcAttr of prim.listAttributes()) {\n\t\tswapAttributes(prim, srcAttr, writeMap, dstVertexCount);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const srcAttr of target.listAttributes()) {\n\t\t\tswapAttributes(target, srcAttr, writeMap, dstVertexCount);\n\t\t}\n\t}\n\n\t// (5) Clean up degenerate triangles.\n\n\tcleanPrimitive(prim);\n}\n\n/** Creates a new TypedArray of the same type as an original, with a new length. */\nfunction createArrayOfType<T extends TypedArray>(array: T, length: number): T {\n\tconst ArrayCtor = array.constructor as new (length: number) => T;\n\treturn new ArrayCtor(length);\n}\n\n/** Replaces an {@link Attribute}, creating a new one with the given elements. */\nfunction swapAttributes(\n\tparent: Primitive | PrimitiveTarget,\n\tsrcAttr: Accessor,\n\treorder: number[],\n\tdstCount: number\n): void {\n\tconst dstAttrArray = createArrayOfType(srcAttr.getArray()!, dstCount * srcAttr.getElementSize());\n\tconst dstAttr = srcAttr.clone().setArray(dstAttrArray);\n\tconst done = new Uint8Array(dstCount);\n\n\tfor (let i = 0, el = [] as number[]; i < reorder.length; i++) {\n\t\tif (!done[reorder[i]]) {\n\t\t\tdstAttr.setElement(reorder[i], srcAttr.getElement(i, el));\n\t\t\tdone[reorder[i]] = 1;\n\t\t}\n\t}\n\n\tparent.swap(srcAttr, dstAttr);\n\n\t// Clean up.\n\tif (srcAttr.listParents().length === 1) srcAttr.dispose();\n}\n\nconst _a = [] as number[];\nconst _b = [] as number[];\n\n/** Computes a per-attribute tolerance, based on domain and usage of the attribute. */\nfunction getAttributeTolerance(semantic: string, attribute: Accessor, tolerance: number): number {\n\t// Attributes like NORMAL and COLOR_# do not vary in range like POSITION,\n\t// so do not apply the given tolerance factor to these attributes.\n\tif (semantic === 'NORMAL' || semantic === 'TANGENT') return Tolerance.NORMAL;\n\tif (semantic.startsWith('COLOR_')) return Tolerance.COLOR;\n\tif (semantic.startsWith('TEXCOORD_')) return Tolerance.TEXCOORD;\n\tif (semantic.startsWith('JOINTS_')) return Tolerance.JOINTS;\n\tif (semantic.startsWith('WEIGHTS_')) return Tolerance.WEIGHTS;\n\n\t_a.length = _b.length = 0;\n\tattribute.getMinNormalized(_a);\n\tattribute.getMaxNormalized(_b);\n\tconst range = Math.max(..._b) - Math.min(..._a) || 1;\n\treturn tolerance * range;\n}\n\n/** Compares two vertex attributes against a tolerance threshold. */\nfunction compareAttributes(attribute: Accessor, a: number, b: number, tolerance: number, _semantic: string): boolean {\n\tattribute.getElement(a, _a);\n\tattribute.getElement(b, _b);\n\tfor (let i = 0, il = attribute.getElementSize(); i < il; i++) {\n\t\tif (Math.abs(_a[i] - _b[i]) > tolerance) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction formatKV(kv: Record<string, unknown>): string {\n\treturn Object.entries(kv)\n\t\t.map(([k, v]) => `${k}=${v}`)\n\t\t.join(', ');\n}\n\n// Order to search nearer cells first.\nconst CELL_OFFSETS = [0, -1, 1];\n\nfunction getGridNeighborhoodKeys(p: vec3, cellSize: number): string[] {\n\tconst keys = [] as string[];\n\tconst _p = [0, 0, 0] as vec3;\n\tfor (const i of CELL_OFFSETS) {\n\t\tfor (const j of CELL_OFFSETS) {\n\t\t\tfor (const k of CELL_OFFSETS) {\n\t\t\t\t_p[0] = p[0] + i * cellSize;\n\t\t\t\t_p[1] = p[1] + j * cellSize;\n\t\t\t\t_p[2] = p[2] + k * cellSize;\n\t\t\t\tkeys.push(getGridKey(_p, cellSize));\n\t\t\t}\n\t\t}\n\t}\n\treturn keys;\n}\n\nfunction getGridKey(p: vec3, cellSize: number): string {\n\tconst cellX = Math.round(p[0] / cellSize);\n\tconst cellY = Math.round(p[1] / cellSize);\n\tconst cellZ = Math.round(p[2] / cellSize);\n\treturn cellX + ':' + cellY + ':' + cellZ;\n}\n","import type { Primitive } from '@gltf-transform/core';\nimport { createIndices } from './utils.js';\n\n/**\n * Removes degenerate triangles from the {@link Primitive}. Any triangle containing fewer than\n * three different vertex indices is considered degenerate. This method does not merge/weld\n * different vertices containing identical data — use {@link weld} first for that purpose.\n *\n * @internal\n */\nexport function cleanPrimitive(prim: Primitive): void {\n\tconst indices = prim.getIndices();\n\tif (!indices) return;\n\n\tconst tmpIndicesArray = [];\n\tlet maxIndex = -Infinity;\n\n\tfor (let i = 0, il = indices.getCount(); i < il; i += 3) {\n\t\tconst a = indices.getScalar(i);\n\t\tconst b = indices.getScalar(i + 1);\n\t\tconst c = indices.getScalar(i + 2);\n\n\t\tif (a === b || a === c || b === c) continue;\n\n\t\ttmpIndicesArray.push(a, b, c);\n\t\tmaxIndex = Math.max(maxIndex, a, b, c);\n\t}\n\n\tconst dstIndicesArray = createIndices(tmpIndicesArray.length, maxIndex);\n\tdstIndicesArray.set(tmpIndicesArray);\n\tindices.setArray(dstIndicesArray);\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { KHRDracoMeshCompression } from '@gltf-transform/extensions';\nimport { createTransform } from './utils.js';\nimport { weld } from './weld.js';\n\nconst NAME = 'draco';\n\nexport interface DracoOptions {\n\tmethod?: 'edgebreaker' | 'sequential';\n\tencodeSpeed?: number;\n\tdecodeSpeed?: number;\n\tquantizePosition?: number;\n\tquantizeNormal?: number;\n\tquantizeColor?: number;\n\tquantizeTexcoord?: number;\n\tquantizeGeneric?: number;\n\tquantizationVolume?: 'mesh' | 'scene';\n}\n\nexport const DRACO_DEFAULTS: DracoOptions = {\n\tmethod: 'edgebreaker',\n\tencodeSpeed: 5,\n\tdecodeSpeed: 5,\n\tquantizePosition: 14,\n\tquantizeNormal: 10,\n\tquantizeColor: 8,\n\tquantizeTexcoord: 12,\n\tquantizeGeneric: 12,\n\tquantizationVolume: 'mesh',\n};\n\n/**\n * Applies Draco compression using {@link KHRDracoMeshCompression KHR_draco_mesh_compression}.\n * This type of compression can reduce the size of triangle geometry.\n *\n * This function is a thin wrapper around the {@link KHRDracoMeshCompression} extension itself.\n *\n * @category Transforms\n */\nexport function draco(_options: DracoOptions = DRACO_DEFAULTS): Transform {\n\tconst options = { ...DRACO_DEFAULTS, ..._options } as Required<DracoOptions>;\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tawait document.transform(weld({ tolerance: 0 }));\n\t\tdocument\n\t\t\t.createExtension(KHRDracoMeshCompression)\n\t\t\t.setRequired(true)\n\t\t\t.setEncoderOptions({\n\t\t\t\tmethod:\n\t\t\t\t\toptions.method === 'edgebreaker'\n\t\t\t\t\t\t? KHRDracoMeshCompression.EncoderMethod.EDGEBREAKER\n\t\t\t\t\t\t: KHRDracoMeshCompression.EncoderMethod.SEQUENTIAL,\n\t\t\t\tencodeSpeed: options.encodeSpeed,\n\t\t\t\tdecodeSpeed: options.decodeSpeed,\n\t\t\t\tquantizationBits: {\n\t\t\t\t\tPOSITION: options.quantizePosition,\n\t\t\t\t\tNORMAL: options.quantizeNormal,\n\t\t\t\t\tCOLOR: options.quantizeColor,\n\t\t\t\t\tTEX_COORD: options.quantizeTexcoord,\n\t\t\t\t\tGENERIC: options.quantizeGeneric,\n\t\t\t\t},\n\t\t\t\tquantizationVolume: options.quantizationVolume,\n\t\t\t});\n\t});\n}\n","import { Document, Node, PropertyType, Transform } from '@gltf-transform/core';\nimport { clearNodeParent } from './clear-node-parent.js';\nimport { prune } from './prune.js';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'flatten';\n\n/** Options for the {@link flatten} function. */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface FlattenOptions {}\n\nexport const FLATTEN_DEFAULTS: Required<FlattenOptions> = {};\n\n/**\n * Flattens the scene graph, leaving {@link Node Nodes} with\n * {@link Mesh Meshes}, {@link Camera Cameras}, and other attachments\n * as direct children of the {@link Scene}. Skeletons and their\n * descendants are left in their original Node structure.\n *\n * {@link Animation} targeting a Node or its parents will\n * prevent that Node from being moved.\n *\n * Example:\n *\n * ```ts\n * import { flatten } from '@gltf-transform/functions';\n *\n * await document.transform(flatten());\n * ```\n *\n * @category Transforms\n */\nexport function flatten(_options: FlattenOptions = FLATTEN_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...FLATTEN_DEFAULTS, ..._options } as Required<FlattenOptions>;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst root = document.getRoot();\n\t\tconst logger = document.getLogger();\n\n\t\t// (1) Mark joints.\n\t\tconst joints = new Set<Node>();\n\t\tfor (const skin of root.listSkins()) {\n\t\t\tfor (const joint of skin.listJoints()) {\n\t\t\t\tjoints.add(joint);\n\t\t\t}\n\t\t}\n\n\t\t// (2) Mark animated nodes.\n\t\tconst animated = new Set<Node>();\n\t\tfor (const animation of root.listAnimations()) {\n\t\t\tfor (const channel of animation.listChannels()) {\n\t\t\t\tconst node = channel.getTargetNode();\n\t\t\t\tif (node) {\n\t\t\t\t\tanimated.add(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (3) Mark descendants of joints and animated nodes.\n\t\tconst hasJointParent = new Set<Node>();\n\t\tconst hasAnimatedParent = new Set<Node>();\n\t\tfor (const scene of root.listScenes()) {\n\t\t\tscene.traverse((node) => {\n\t\t\t\tconst parent = node.getParentNode();\n\t\t\t\tif (!parent) return;\n\t\t\t\tif (joints.has(parent) || hasJointParent.has(parent)) {\n\t\t\t\t\thasJointParent.add(node);\n\t\t\t\t}\n\t\t\t\tif (animated.has(parent) || hasAnimatedParent.has(parent)) {\n\t\t\t\t\thasAnimatedParent.add(node);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// (4) For each affected node, in top-down order, clear parents.\n\t\tfor (const scene of root.listScenes()) {\n\t\t\tscene.traverse((node) => {\n\t\t\t\tif (animated.has(node)) return;\n\t\t\t\tif (hasJointParent.has(node)) return;\n\t\t\t\tif (hasAnimatedParent.has(node)) return;\n\n\t\t\t\tclearNodeParent(node);\n\t\t\t});\n\t\t}\n\n\t\t// TODO(feat): Transform animation channels, accounting for previously inherited transforms.\n\t\tif (animated.size) {\n\t\t\tlogger.debug(`${NAME}: Flattening node hierarchies with TRS animation not yet supported.`);\n\t\t}\n\n\t\t// (5) Clean up leaf nodes.\n\t\tawait document.transform(prune({ propertyTypes: [PropertyType.NODE], keepLeaves: false }));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import type { Node, Scene } from '@gltf-transform/core';\nimport { listNodeScenes } from './list-node-scenes.js';\n\n/** @deprecated Use {@link listNodeScenes} instead. */\nexport function getNodeScene(node: Node): Scene | null {\n\treturn listNodeScenes(node)[0] || null;\n}\n","import { Texture } from '@gltf-transform/core';\n\nconst SRGB_PATTERN = /color|emissive|diffuse/i;\n\n/**\n * Returns the color space (if any) implied by the {@link Material} slots to\n * which a texture is assigned, or null for non-color textures. If the texture\n * is not connected to any {@link Material}, this function will also return\n * null — any metadata in the image file will be ignored.\n *\n * Under current glTF specifications, only 'srgb' and non-color (null) textures\n * are used.\n *\n * Example:\n *\n * ```typescript\n * import { getTextureColorSpace } from '@gltf-transform/functions';\n *\n * const baseColorTexture = material.getBaseColorTexture();\n * const normalTexture = material.getNormalTexture();\n *\n * getTextureColorSpace(baseColorTexture); // → 'srgb'\n * getTextureColorSpace(normalTexture); // → null\n * ```\n */\nexport function getTextureColorSpace(texture: Texture): string | null {\n\tconst graph = texture.getGraph();\n\tconst edges = graph.listParentEdges(texture);\n\tconst isSRGB = edges.some((edge) => {\n\t\treturn edge.getAttributes().isColor || SRGB_PATTERN.test(edge.getName());\n\t});\n\treturn isSRGB ? 'srgb' : null;\n}\n","import {\n\tAccessor,\n\tDocument,\n\tExtensionProperty,\n\tGLTF,\n\tImageUtils,\n\tTexture,\n\tgetBounds,\n\tPropertyType,\n} from '@gltf-transform/core';\nimport { getGLPrimitiveCount } from './utils.js';\nimport { KHR_DF_MODEL_ETC1S, KHR_DF_MODEL_UASTC, read as readKTX } from 'ktx-parse';\n\n/** Inspects the contents of a glTF file and returns a JSON report. */\nexport function inspect(doc: Document): InspectReport {\n\treturn {\n\t\tscenes: listScenes(doc),\n\t\tmeshes: listMeshes(doc),\n\t\tmaterials: listMaterials(doc),\n\t\ttextures: listTextures(doc),\n\t\tanimations: listAnimations(doc),\n\t};\n}\n\n/** List scenes. */\nfunction listScenes(doc: Document): InspectPropertyReport<InspectSceneReport> {\n\tconst scenes = doc\n\t\t.getRoot()\n\t\t.listScenes()\n\t\t.map((scene) => {\n\t\t\tconst root = scene.listChildren()[0];\n\t\t\tconst sceneBounds = getBounds(scene);\n\t\t\treturn {\n\t\t\t\tname: scene.getName(),\n\t\t\t\trootName: root ? root.getName() : '',\n\t\t\t\tbboxMin: toPrecision(sceneBounds.min),\n\t\t\t\tbboxMax: toPrecision(sceneBounds.max),\n\t\t\t};\n\t\t});\n\treturn { properties: scenes };\n}\n\n/** List meshes. */\nfunction listMeshes(doc: Document): InspectPropertyReport<InspectMeshReport> {\n\tconst meshes: InspectMeshReport[] = doc\n\t\t.getRoot()\n\t\t.listMeshes()\n\t\t.map((mesh) => {\n\t\t\tconst instances = mesh.listParents().filter((parent) => parent.propertyType !== PropertyType.ROOT).length;\n\t\t\tlet glPrimitives = 0;\n\t\t\tlet verts = 0;\n\t\t\tconst semantics = new Set<string>();\n\t\t\tconst meshIndices = new Set<string>();\n\t\t\tconst meshAccessors: Set<Accessor> = new Set();\n\n\t\t\tmesh.listPrimitives().forEach((prim) => {\n\t\t\t\tfor (const semantic of prim.listSemantics()) {\n\t\t\t\t\tconst attr = prim.getAttribute(semantic)!;\n\t\t\t\t\tsemantics.add(semantic + ':' + accessorToTypeLabel(attr));\n\t\t\t\t\tmeshAccessors.add(attr);\n\t\t\t\t}\n\t\t\t\tfor (const targ of prim.listTargets()) {\n\t\t\t\t\ttarg.listAttributes().forEach((attr) => meshAccessors.add(attr));\n\t\t\t\t}\n\t\t\t\tconst indices = prim.getIndices();\n\t\t\t\tif (indices) {\n\t\t\t\t\tmeshIndices.add(accessorToTypeLabel(indices));\n\t\t\t\t\tmeshAccessors.add(indices);\n\t\t\t\t}\n\t\t\t\tverts += prim.listAttributes()[0].getCount();\n\t\t\t\tglPrimitives += getGLPrimitiveCount(prim);\n\t\t\t});\n\n\t\t\tlet size = 0;\n\t\t\tArray.from(meshAccessors).forEach((a) => (size += a.getArray()!.byteLength));\n\n\t\t\tconst modes = mesh.listPrimitives().map((prim) => MeshPrimitiveModeLabels[prim.getMode()]);\n\n\t\t\treturn {\n\t\t\t\tname: mesh.getName(),\n\t\t\t\tmode: Array.from(new Set(modes)),\n\t\t\t\tprimitives: mesh.listPrimitives().length,\n\t\t\t\tglPrimitives: glPrimitives,\n\t\t\t\tvertices: verts,\n\t\t\t\tindices: Array.from(meshIndices).sort(),\n\t\t\t\tattributes: Array.from(semantics).sort(),\n\t\t\t\tinstances: instances,\n\t\t\t\tsize: size,\n\t\t\t};\n\t\t});\n\n\treturn { properties: meshes };\n}\n\n/** List materials. */\nfunction listMaterials(doc: Document): InspectPropertyReport<InspectMaterialReport> {\n\tconst materials: InspectMaterialReport[] = doc\n\t\t.getRoot()\n\t\t.listMaterials()\n\t\t.map((material) => {\n\t\t\tconst instances = material\n\t\t\t\t.listParents()\n\t\t\t\t.filter((parent) => parent.propertyType !== PropertyType.ROOT).length;\n\n\t\t\t// Find all texture slots attached to this material or its extensions.\n\t\t\tconst extensions = new Set<ExtensionProperty>(material.listExtensions());\n\t\t\tconst slots = doc\n\t\t\t\t.getGraph()\n\t\t\t\t.listEdges()\n\t\t\t\t.filter((ref) => {\n\t\t\t\t\tconst child = ref.getChild();\n\t\t\t\t\tconst parent = ref.getParent();\n\t\t\t\t\tif (child instanceof Texture && parent === material) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (child instanceof Texture && parent instanceof ExtensionProperty && extensions.has(parent)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t})\n\t\t\t\t.map((ref) => ref.getName());\n\n\t\t\treturn {\n\t\t\t\tname: material.getName(),\n\t\t\t\tinstances,\n\t\t\t\ttextures: slots,\n\t\t\t\talphaMode: material.getAlphaMode(),\n\t\t\t\tdoubleSided: material.getDoubleSided(),\n\t\t\t};\n\t\t});\n\n\treturn { properties: materials };\n}\n\n/** List textures. */\nfunction listTextures(doc: Document): InspectPropertyReport<InspectTextureReport> {\n\tconst textures: InspectTextureReport[] = doc\n\t\t.getRoot()\n\t\t.listTextures()\n\t\t.map((texture) => {\n\t\t\tconst instances = texture\n\t\t\t\t.listParents()\n\t\t\t\t.filter((parent) => parent.propertyType !== PropertyType.ROOT).length;\n\n\t\t\tconst slots = doc\n\t\t\t\t.getGraph()\n\t\t\t\t.listParentEdges(texture)\n\t\t\t\t.filter((edge) => edge.getParent().propertyType !== PropertyType.ROOT)\n\t\t\t\t.map((edge) => edge.getName());\n\n\t\t\tconst resolution = ImageUtils.getSize(texture.getImage()!, texture.getMimeType());\n\n\t\t\tlet compression = '';\n\t\t\tif (texture.getMimeType() === 'image/ktx2') {\n\t\t\t\tconst container = readKTX(texture.getImage()!);\n\t\t\t\tconst dfd = container.dataFormatDescriptor[0];\n\t\t\t\tif (dfd.colorModel === KHR_DF_MODEL_ETC1S) {\n\t\t\t\t\tcompression = 'ETC1S';\n\t\t\t\t} else if (dfd.colorModel === KHR_DF_MODEL_UASTC) {\n\t\t\t\t\tcompression = 'UASTC';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tname: texture.getName(),\n\t\t\t\turi: texture.getURI(),\n\t\t\t\tslots: Array.from(new Set(slots)),\n\t\t\t\tinstances,\n\t\t\t\tmimeType: texture.getMimeType(),\n\t\t\t\tcompression,\n\t\t\t\tresolution: resolution ? resolution.join('x') : '',\n\t\t\t\tsize: texture.getImage()!.byteLength,\n\t\t\t\tgpuSize: ImageUtils.getVRAMByteLength(texture.getImage()!, texture.getMimeType()),\n\t\t\t};\n\t\t});\n\n\treturn { properties: textures };\n}\n\n/** List animations. */\nfunction listAnimations(doc: Document): InspectPropertyReport<InspectAnimationReport> {\n\tconst animations: InspectAnimationReport[] = doc\n\t\t.getRoot()\n\t\t.listAnimations()\n\t\t.map((anim) => {\n\t\t\tlet minTime = Infinity;\n\t\t\tlet maxTime = -Infinity;\n\t\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\t\tconst input = sampler.getInput();\n\t\t\t\tif (!input) return;\n\t\t\t\tminTime = Math.min(minTime, input.getMin([])[0]);\n\t\t\t\tmaxTime = Math.max(maxTime, input.getMax([])[0]);\n\t\t\t});\n\n\t\t\tlet size = 0;\n\t\t\tlet keyframes = 0;\n\t\t\tconst accessors: Set<Accessor> = new Set();\n\t\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\t\tconst input = sampler.getInput();\n\t\t\t\tconst output = sampler.getOutput();\n\t\t\t\tif (!input) return;\n\t\t\t\tkeyframes += input.getCount();\n\t\t\t\taccessors.add(input);\n\t\t\t\tif (!output) return;\n\t\t\t\taccessors.add(output);\n\t\t\t});\n\t\t\tArray.from(accessors).forEach((accessor) => {\n\t\t\t\tsize += accessor.getArray()!.byteLength;\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\tname: anim.getName(),\n\t\t\t\tchannels: anim.listChannels().length,\n\t\t\t\tsamplers: anim.listSamplers().length,\n\t\t\t\tduration: Math.round((maxTime - minTime) * 1000) / 1000,\n\t\t\t\tkeyframes: keyframes,\n\t\t\t\tsize: size,\n\t\t\t};\n\t\t});\n\n\treturn { properties: animations };\n}\n\nexport interface InspectReport {\n\tscenes: InspectPropertyReport<InspectSceneReport>;\n\tmeshes: InspectPropertyReport<InspectMeshReport>;\n\tmaterials: InspectPropertyReport<InspectMaterialReport>;\n\ttextures: InspectPropertyReport<InspectTextureReport>;\n\tanimations: InspectPropertyReport<InspectAnimationReport>;\n}\n\nexport interface InspectPropertyReport<T> {\n\tproperties: T[];\n\terrors?: string[];\n\twarnings?: string[];\n}\n\nexport interface InspectSceneReport {\n\tname: string;\n\trootName: string;\n\tbboxMin: number[];\n\tbboxMax: number[];\n}\n\nexport interface InspectMeshReport {\n\tname: string;\n\tprimitives: number;\n\tmode: string[];\n\tvertices: number;\n\tglPrimitives: number;\n\tindices: string[];\n\tattributes: string[];\n\tinstances: number;\n\tsize: number;\n}\n\nexport interface InspectMaterialReport {\n\tname: string;\n\tinstances: number;\n\ttextures: string[];\n\talphaMode: GLTF.MaterialAlphaMode;\n\tdoubleSided: boolean;\n}\n\nexport interface InspectTextureReport {\n\tname: string;\n\turi: string;\n\tslots: string[];\n\tinstances: number;\n\tmimeType: string;\n\tresolution: string;\n\tcompression: string;\n\tsize: number;\n\tgpuSize: number | null;\n}\n\nexport interface InspectAnimationReport {\n\tname: string;\n\tchannels: number;\n\tsamplers: number;\n\tkeyframes: number;\n\tduration: number;\n\tsize: number;\n}\n\nconst MeshPrimitiveModeLabels = [\n\t'POINTS',\n\t'LINES',\n\t'LINE_LOOP',\n\t'LINE_STRIP',\n\t'TRIANGLES',\n\t'TRIANGLE_STRIP',\n\t'TRIANGLE_FAN',\n];\n\nconst NumericTypeLabels: Record<string, string> = {\n\tFloat32Array: 'f32',\n\tUint32Array: 'u32',\n\tUint16Array: 'u16',\n\tUint8Array: 'u8',\n\tInt32Array: 'i32',\n\tInt16Array: 'i16',\n\tInt8Array: 'i8',\n};\n\n/** Maps values in a vector to a finite precision. */\nfunction toPrecision(v: number[]): number[] {\n\tfor (let i = 0; i < v.length; i++) {\n\t\tif ((v[i] as number).toFixed) v[i] = Number(v[i].toFixed(5));\n\t}\n\treturn v;\n}\n\nfunction accessorToTypeLabel(accessor: Accessor): string {\n\tconst array = accessor.getArray()!;\n\tconst base = NumericTypeLabels[array.constructor.name] || '?';\n\tconst suffix = accessor.getNormalized() ? '_norm' : '';\n\treturn base + suffix;\n}\n","import { Document, ILogger, MathUtils, Mesh, Node, Transform, vec3, vec4 } from '@gltf-transform/core';\nimport { InstancedMesh, EXTMeshGPUInstancing } from '@gltf-transform/extensions';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'instance';\n\nexport interface InstanceOptions {\n\t/** Minimum number of meshes considered eligible for instancing. Default: 2. */\n\tmin?: number;\n}\n\nconst INSTANCE_DEFAULTS: Required<InstanceOptions> = {\n\tmin: 2,\n};\n\n/**\n * Creates GPU instances (with `EXT_mesh_gpu_instancing`) for shared {@link Mesh} references. In\n * engines supporting the extension, reused Meshes will be drawn with GPU instancing, greatly\n * reducing draw calls and improving performance in many cases. If you're not sure that identical\n * Meshes share vertex data and materials (\"linked duplicates\"), run {@link dedup} first to link them.\n *\n * Example:\n *\n * ```javascript\n * import { dedup, instance } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tdedup(),\n * \tinstance({min: 2}),\n * );\n * ```\n *\n * @category Transforms\n */\nexport function instance(_options: InstanceOptions = INSTANCE_DEFAULTS): Transform {\n\tconst options = { ...INSTANCE_DEFAULTS, ..._options } as Required<InstanceOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\n\t\tif (root.listAnimations().length) {\n\t\t\tlogger.warn(`${NAME}: Instancing is not currently supported for animated models.`);\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst batchExtension = doc.createExtension(EXTMeshGPUInstancing);\n\n\t\tlet numBatches = 0;\n\t\tlet numInstances = 0;\n\n\t\tfor (const scene of root.listScenes()) {\n\t\t\t// Gather a one-to-many Mesh/Node mapping, identifying what we can instance.\n\t\t\tconst meshInstances = new Map<Mesh, Set<Node>>();\n\t\t\tscene.traverse((node) => {\n\t\t\t\tconst mesh = node.getMesh();\n\t\t\t\tif (!mesh) return;\n\t\t\t\tmeshInstances.set(mesh, (meshInstances.get(mesh) || new Set<Node>()).add(node));\n\t\t\t});\n\n\t\t\t// For each Mesh, create an InstancedMesh and collect transforms.\n\t\t\tconst modifiedNodes = [];\n\t\t\tfor (const mesh of Array.from(meshInstances.keys())) {\n\t\t\t\tconst nodes = Array.from(meshInstances.get(mesh)!);\n\t\t\t\tif (nodes.length < options.min) continue;\n\t\t\t\tif (nodes.some((node) => node.getSkin())) continue;\n\n\t\t\t\tconst batch = createBatch(doc, batchExtension, mesh, nodes.length);\n\t\t\t\tconst batchTranslation = batch.getAttribute('TRANSLATION')!;\n\t\t\t\tconst batchRotation = batch.getAttribute('ROTATION')!;\n\t\t\t\tconst batchScale = batch.getAttribute('SCALE')!;\n\n\t\t\t\tconst batchNode = doc.createNode().setMesh(mesh).setExtension('EXT_mesh_gpu_instancing', batch);\n\t\t\t\tscene.addChild(batchNode);\n\n\t\t\t\tlet needsTranslation = false;\n\t\t\t\tlet needsRotation = false;\n\t\t\t\tlet needsScale = false;\n\n\t\t\t\t// For each Node, write TRS properties into instance attributes.\n\t\t\t\tfor (let i = 0; i < nodes.length; i++) {\n\t\t\t\t\tlet t: vec3, r: vec4, s: vec3;\n\t\t\t\t\tconst node = nodes[i];\n\n\t\t\t\t\tbatchTranslation.setElement(i, (t = node.getWorldTranslation()));\n\t\t\t\t\tbatchRotation.setElement(i, (r = node.getWorldRotation()));\n\t\t\t\t\tbatchScale.setElement(i, (s = node.getWorldScale()));\n\n\t\t\t\t\tif (!MathUtils.eq(t, [0, 0, 0])) needsTranslation = true;\n\t\t\t\t\tif (!MathUtils.eq(r, [0, 0, 0, 1])) needsRotation = true;\n\t\t\t\t\tif (!MathUtils.eq(s, [1, 1, 1])) needsScale = true;\n\n\t\t\t\t\t// Mark the node for cleanup.\n\t\t\t\t\tnode.setMesh(null);\n\t\t\t\t\tmodifiedNodes.push(node);\n\t\t\t\t}\n\n\t\t\t\tif (!needsTranslation) batchTranslation.dispose();\n\t\t\t\tif (!needsRotation) batchRotation.dispose();\n\t\t\t\tif (!needsScale) batchScale.dispose();\n\n\t\t\t\tpruneUnusedNodes(modifiedNodes, logger);\n\n\t\t\t\tnumBatches++;\n\t\t\t\tnumInstances += nodes.length;\n\t\t\t}\n\t\t}\n\n\t\tif (numBatches > 0) {\n\t\t\tlogger.info(`${NAME}: Created ${numBatches} batches, with ${numInstances} total instances.`);\n\t\t} else {\n\t\t\tlogger.info(`${NAME}: No meshes with ≥${options.min} parent nodes were found.`);\n\t\t}\n\n\t\tif (batchExtension.listProperties().length === 0) {\n\t\t\tbatchExtension.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction pruneUnusedNodes(nodes: Node[], logger: ILogger): void {\n\tlet node: Node | undefined;\n\tlet unusedNodes = 0;\n\twhile ((node = nodes.pop())) {\n\t\tif (\n\t\t\tnode.listChildren().length ||\n\t\t\tnode.getCamera() ||\n\t\t\tnode.getMesh() ||\n\t\t\tnode.getSkin() ||\n\t\t\tnode.listExtensions().length\n\t\t) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst nodeParent = node.getParentNode();\n\t\tif (nodeParent) nodes.push(nodeParent);\n\t\tnode.dispose();\n\t\tunusedNodes++;\n\t}\n\n\tlogger.debug(`${NAME}: Removed ${unusedNodes} unused nodes.`);\n}\n\nfunction createBatch(doc: Document, batchExtension: EXTMeshGPUInstancing, mesh: Mesh, count: number): InstancedMesh {\n\tconst buffer = mesh.listPrimitives()[0].getAttribute('POSITION')!.getBuffer();\n\n\tconst batchTranslation = doc\n\t\t.createAccessor()\n\t\t.setType('VEC3')\n\t\t.setArray(new Float32Array(3 * count))\n\t\t.setBuffer(buffer);\n\tconst batchRotation = doc\n\t\t.createAccessor()\n\t\t.setType('VEC4')\n\t\t.setArray(new Float32Array(4 * count))\n\t\t.setBuffer(buffer);\n\tconst batchScale = doc\n\t\t.createAccessor()\n\t\t.setType('VEC3')\n\t\t.setArray(new Float32Array(3 * count))\n\t\t.setBuffer(buffer);\n\n\treturn batchExtension\n\t\t.createInstancedMesh()\n\t\t.setAttribute('TRANSLATION', batchTranslation)\n\t\t.setAttribute('ROTATION', batchRotation)\n\t\t.setAttribute('SCALE', batchScale);\n}\n","import { Document, Primitive, ComponentTypeToTypedArray } from '@gltf-transform/core';\nimport { createIndices, createPrimGroupKey } from './utils.js';\n\ninterface JoinPrimitiveOptions {\n\tskipValidation?: boolean;\n}\n\nconst JOIN_PRIMITIVE_DEFAULTS: Required<JoinPrimitiveOptions> = {\n\tskipValidation: false,\n};\n\n/**\n * Given a list of compatible Mesh {@link Primitive Primitives}, returns new Primitive\n * containing their vertex data. Compatibility requires that all Primitives share the\n * same {@link Material Materials}, draw mode, and vertex attribute types. Primitives\n * using morph targets cannot currently be joined.\n *\n * Example:\n *\n * ```javascript\n * import { joinPrimitives } from '@gltf-transform/functions';\n *\n * // Succeeds if Primitives are compatible, or throws an error.\n * const result = joinPrimitives(mesh.listPrimitives());\n *\n * for (const prim of mesh.listPrimitives()) {\n * \tprim.dispose();\n * }\n *\n * mesh.addPrimitive(result);\n * ```\n */\nexport function joinPrimitives(prims: Primitive[], options: JoinPrimitiveOptions = {}): Primitive {\n\toptions = { ...JOIN_PRIMITIVE_DEFAULTS, ...options };\n\tconst templatePrim = prims[0]!;\n\tconst document = Document.fromGraph(templatePrim.getGraph())!;\n\n\t// (1) Validation.\n\tif (!options.skipValidation && new Set(prims.map(createPrimGroupKey)).size > 1) {\n\t\tthrow new Error(\n\t\t\t'' +\n\t\t\t\t'Requires ≥2 Primitives, sharing the same Material ' +\n\t\t\t\t'and Mode, with compatible vertex attributes and indices.'\n\t\t);\n\t}\n\n\tconst remapList = [] as Uint32Array[]; // remap[srcIndex] → dstIndex, by prim\n\tconst countList = [] as number[]; // vertex count, by prim\n\tconst indicesList = [] as (Uint32Array | Uint16Array)[]; // indices, by prim\n\n\tlet dstVertexCount = 0;\n\tlet dstIndicesCount = 0;\n\n\t// (2) Build remap lists.\n\tfor (const srcPrim of prims) {\n\t\tconst indices = _getOrCreateIndices(srcPrim);\n\t\tconst remap = [];\n\t\tlet count = 0;\n\t\tfor (let i = 0; i < indices.length; i++) {\n\t\t\tconst index = indices[i];\n\t\t\tif (remap[index] === undefined) {\n\t\t\t\tremap[index] = dstVertexCount++;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tdstIndicesCount++;\n\t\t}\n\t\tremapList.push(new Uint32Array(remap));\n\t\tcountList.push(count);\n\t\tindicesList.push(indices);\n\t}\n\n\t// (3) Allocate joined attributes.\n\tconst dstPrim = document.createPrimitive().setMode(templatePrim.getMode()).setMaterial(templatePrim.getMaterial());\n\tfor (const semantic of templatePrim.listSemantics()) {\n\t\tconst tplAttribute = templatePrim.getAttribute(semantic)!;\n\t\tconst AttributeArray = ComponentTypeToTypedArray[tplAttribute.getComponentType()];\n\t\tconst dstAttribute = document\n\t\t\t.createAccessor()\n\t\t\t.setType(tplAttribute.getType())\n\t\t\t.setBuffer(tplAttribute.getBuffer())\n\t\t\t.setNormalized(tplAttribute.getNormalized())\n\t\t\t.setArray(new AttributeArray(dstVertexCount * tplAttribute.getElementSize()));\n\t\tdstPrim.setAttribute(semantic, dstAttribute);\n\t}\n\n\t// (4) Allocate joined indices.\n\tconst dstIndicesArray = templatePrim.getIndices() ? createIndices(dstVertexCount) : null;\n\tconst dstIndices =\n\t\tdstIndicesArray &&\n\t\tdocument\n\t\t\t.createAccessor()\n\t\t\t.setBuffer(templatePrim.getIndices()!.getBuffer())\n\t\t\t.setArray(createIndices(dstIndicesCount, dstVertexCount));\n\tdstPrim.setIndices(dstIndices);\n\n\t// (5) Remap attributes into joined Primitive.\n\tlet dstNextIndex = 0;\n\tfor (let primIndex = 0; primIndex < remapList.length; primIndex++) {\n\t\tconst srcPrim = prims[primIndex];\n\t\tconst remap = remapList[primIndex];\n\t\tconst indicesArray = indicesList[primIndex];\n\n\t\tconst primStartIndex = dstNextIndex;\n\t\tlet primNextIndex = primStartIndex;\n\n\t\tfor (const semantic of dstPrim.listSemantics()) {\n\t\t\tconst srcAttribute = srcPrim.getAttribute(semantic)!;\n\t\t\tconst dstAttribute = dstPrim.getAttribute(semantic)!;\n\t\t\tconst el = [] as number[];\n\n\t\t\tprimNextIndex = primStartIndex;\n\t\t\tfor (let i = 0; i < indicesArray.length; i++) {\n\t\t\t\tconst index = indicesArray[i];\n\t\t\t\tsrcAttribute.getElement(index, el);\n\t\t\t\tdstAttribute.setElement(remap[index], el);\n\t\t\t\tif (dstIndices) {\n\t\t\t\t\tdstIndices.setScalar(primNextIndex++, remap[index]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdstNextIndex = primNextIndex;\n\t}\n\n\treturn dstPrim;\n}\n\nfunction _getOrCreateIndices(prim: Primitive): Uint16Array | Uint32Array {\n\tconst indices = prim.getIndices();\n\tif (indices) return indices.getArray() as Uint32Array | Uint16Array;\n\tconst position = prim.getAttribute('POSITION')!;\n\treturn createIndices(position.getCount());\n}\n","import {\n\tAnimationChannel,\n\tDocument,\n\tmat4,\n\tMesh,\n\tNode,\n\tPrimitive,\n\tPropertyType,\n\tScene,\n\tTransform,\n} from '@gltf-transform/core';\nimport { invert, multiply } from 'gl-matrix/mat4';\nimport { joinPrimitives } from './join-primitives.js';\nimport { prune } from './prune.js';\nimport { transformPrimitive } from './transform-primitive.js';\nimport { createPrimGroupKey, createTransform, formatLong, isUsed } from './utils.js';\n\nconst NAME = 'join';\n\nconst { ROOT, NODE, MESH, PRIMITIVE, ACCESSOR } = PropertyType;\n\n// prettier-ignore\nconst _matrix = [\n\t0, 0, 0, 0,\n\t0, 0, 0, 0,\n\t0, 0, 0, 0,\n\t0, 0, 0, 0,\n] as mat4;\n\n/** Options for the {@link join} function. */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface JoinOptions {\n\t/**\n\t * Prevents joining distinct {@link Mesh Meshes} and {@link Node Nodes}.\n\t * Joins only Primitives found within the same parent Mesh. To preserve\n\t * only _named_ Nodes and Meshes, use\n\t * {@link JoinOptions.keepNamed keepNamed} instead. Default: false.\n\t */\n\tkeepMeshes: boolean;\n\t/**\n\t * Prevents joining _named_ {@link Mesh Meshes} and {@link Node Nodes}.\n\t * If {@link JoinOptions.keepMeshes keepMeshes} is enabled, keepNamed will\n\t * have no effect. Default: false.\n\t */\n\tkeepNamed: boolean;\n}\n\nexport const JOIN_DEFAULTS: Required<JoinOptions> = {\n\tkeepMeshes: false,\n\tkeepNamed: false,\n};\n\n/**\n * Joins compatible {@link Primitive Primitives} and reduces draw calls.\n * Primitives are eligible for joining if they are members of the same\n * {@link Mesh} or, optionally, attached to sibling {@link Node Nodes}\n * in the scene hierarchy. For best results, apply {@link dedup} and\n * {@link flatten} first to maximize the number of Primitives that\n * can be joined.\n *\n * NOTE: In a Scene that heavily reuses the same Mesh data, joining may\n * increase vertex count. Consider alternatives, like\n * {@link instance instancing} with {@link EXTMeshGPUInstancing}.\n *\n * Example:\n *\n * ```ts\n * import { PropertyType } from '@gltf-transform/core';\n * import { join, flatten, dedup } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tdedup({ propertyTypes: [PropertyType.MATERIAL] }),\n * \tflatten(),\n * \tjoin({ keepNamed: false }),\n * );\n * ```\n *\n * @category Transforms\n */\nexport function join(_options: JoinOptions = JOIN_DEFAULTS): Transform {\n\tconst options = { ...JOIN_DEFAULTS, ..._options } as Required<JoinOptions>;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst root = document.getRoot();\n\t\tconst logger = document.getLogger();\n\n\t\t// Join.\n\t\tfor (const scene of root.listScenes()) {\n\t\t\t_joinLevel(document, scene, options);\n\t\t\tscene.traverse((node) => _joinLevel(document, node, options));\n\t\t}\n\n\t\t// Clean up.\n\t\tawait document.transform(\n\t\t\tprune({\n\t\t\t\tpropertyTypes: [NODE, MESH, PRIMITIVE, ACCESSOR],\n\t\t\t\tkeepLeaves: false,\n\t\t\t\tkeepAttributes: true,\n\t\t\t})\n\t\t);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\ninterface IJoinGroup {\n\tkey: string;\n\tprims: Primitive[];\n\tprimMeshes: Mesh[];\n\tprimNodes: Node[];\n\tdstNode: Node;\n\tdstMesh?: Mesh | undefined;\n}\n\nfunction _joinLevel(document: Document, parent: Node | Scene, options: Required<JoinOptions>) {\n\tconst logger = document.getLogger();\n\tconst groups = {} as Record<string, IJoinGroup>;\n\n\t// Scan for compatible Primitives.\n\tconst children = parent.listChildren();\n\tfor (let nodeIndex = 0; nodeIndex < children.length; nodeIndex++) {\n\t\tconst node = children[nodeIndex];\n\n\t\t// Skip animated nodes.\n\t\tconst isAnimated = node.listParents().some((p) => p instanceof AnimationChannel);\n\t\tif (isAnimated) continue;\n\n\t\t// Skip nodes without meshes.\n\t\tconst mesh = node.getMesh();\n\t\tif (!mesh) continue;\n\n\t\t// Skip nodes with instancing; unsupported.\n\t\tif (node.getExtension('EXT_mesh_gpu_instancing')) continue;\n\n\t\t// Skip nodes with skinning; unsupported.\n\t\tif (node.getSkin()) continue;\n\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t// Skip prims with morph targets; unsupported.\n\t\t\tif (prim.listTargets().length > 0) continue;\n\n\t\t\t// Skip prims with volumetric materials; unsupported.\n\t\t\tconst material = prim.getMaterial();\n\t\t\tif (material && material.getExtension('KHR_materials_volume')) continue;\n\n\t\t\tlet key = createPrimGroupKey(prim);\n\n\t\t\tconst isNamed = mesh.getName() || node.getName();\n\t\t\tif (options.keepMeshes || (options.keepNamed && isNamed)) {\n\t\t\t\tkey += `|${nodeIndex}`;\n\t\t\t}\n\n\t\t\tif (!(key in groups)) {\n\t\t\t\tgroups[key] = {\n\t\t\t\t\tprims: [] as Primitive[],\n\t\t\t\t\tprimMeshes: [] as Mesh[],\n\t\t\t\t\tprimNodes: [] as Node[],\n\t\t\t\t\tdstNode: node,\n\t\t\t\t\tdstMesh: undefined,\n\t\t\t\t} as IJoinGroup;\n\t\t\t}\n\n\t\t\tconst group = groups[key];\n\t\t\tgroup.prims.push(prim);\n\t\t\tgroup.primNodes.push(node);\n\t\t}\n\t}\n\n\t// Discard single-Primitive groups.\n\tconst joinGroups = Object.values(groups).filter(({ prims }) => prims.length > 1);\n\n\t// Unlink all affected Meshes at current level, before modifying Primitives.\n\tconst srcNodes = new Set<Node>(joinGroups.flatMap((group) => group.primNodes));\n\tfor (const node of srcNodes) {\n\t\tconst mesh = node.getMesh()!;\n\t\tconst isSharedMesh = mesh.listParents().some((parent) => {\n\t\t\treturn parent.propertyType !== ROOT && node !== parent;\n\t\t});\n\t\tif (isSharedMesh) {\n\t\t\tnode.setMesh(mesh.clone());\n\t\t}\n\t}\n\n\t// Update Meshes in groups.\n\tfor (const group of joinGroups) {\n\t\tconst { dstNode, primNodes } = group;\n\t\tgroup.dstMesh = dstNode.getMesh()!;\n\t\tgroup.primMeshes = primNodes.map((node) => node.getMesh()!);\n\t}\n\n\t// Join Primitives.\n\tfor (const group of joinGroups) {\n\t\tconst { prims, primNodes, primMeshes, dstNode, dstMesh } = group as Required<IJoinGroup>;\n\t\tconst dstMatrix = dstNode.getMatrix();\n\n\t\tfor (let i = 0; i < prims.length; i++) {\n\t\t\tconst primNode = primNodes[i];\n\t\t\tconst primMesh = primMeshes[i];\n\n\t\t\tlet prim = prims[i];\n\t\t\tprimMesh.removePrimitive(prim);\n\n\t\t\t// Primitives may be reused directly, or their attributes may be\n\t\t\t// used in another Primitive with a different Material.\n\t\t\tif (isUsed(prim) || hasSharedAttributes(prim)) {\n\t\t\t\tprim = prims[i] = _deepClonePrimitive(prims[i]);\n\t\t\t}\n\n\t\t\t// Transform Primitive into new local coordinate space.\n\t\t\tif (primNode !== dstNode) {\n\t\t\t\tmultiply(_matrix, invert(_matrix, dstMatrix), primNode.getMatrix());\n\t\t\t\ttransformPrimitive(prim, _matrix);\n\t\t\t}\n\t\t}\n\n\t\tconst dstPrim = joinPrimitives(prims);\n\t\tconst dstVertexCount = dstPrim.listAttributes()[0].getCount();\n\t\tdstMesh.addPrimitive(dstPrim);\n\n\t\tlogger.debug(\n\t\t\t`${NAME}: Joined Primitives (${prims.length}) containing ` +\n\t\t\t\t`${formatLong(dstVertexCount)} vertices under Node \"${dstNode.getName()}\".`\n\t\t);\n\t}\n}\n\nfunction _deepClonePrimitive(src: Primitive): Primitive {\n\tconst dst = src.clone();\n\tfor (const semantic of dst.listSemantics()) {\n\t\tdst.setAttribute(semantic, dst.getAttribute(semantic)!.clone());\n\t}\n\tconst indices = dst.getIndices();\n\tif (indices) dst.setIndices(indices.clone());\n\treturn dst;\n}\n\nfunction hasSharedAttributes(prim: Primitive): boolean {\n\tfor (const attribute of prim.listAttributes()) {\n\t\tfor (const parent of attribute.listParents()) {\n\t\t\tif (parent !== prim && parent.propertyType !== ROOT) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n","import { Document, Texture } from '@gltf-transform/core';\nimport { Material, TextureChannel, PropertyType } from '@gltf-transform/core';\n\n/**\n * Returns a list of {@link TextureChannel TextureChannels} used by the given\n * texture. Determination is based only on the _role_ of the textures, e.g.\n * a texture used for the `occlusionTexture` will have (at least) a red channel\n * in use. See {@link getTextureChannelMask} for bitmask alternative.\n *\n * Example:\n *\n * ```js\n * const channels = listTextureChannels(texture);\n * if (channels.includes(TextureChannel.R)) {\n *   console.log('texture red channel used');\n * }\n * ```\n */\nexport function listTextureChannels(texture: Texture): TextureChannel[] {\n\tconst mask = getTextureChannelMask(texture);\n\tconst channels = [];\n\tif (mask & TextureChannel.R) channels.push(TextureChannel.R);\n\tif (mask & TextureChannel.G) channels.push(TextureChannel.G);\n\tif (mask & TextureChannel.B) channels.push(TextureChannel.B);\n\tif (mask & TextureChannel.A) channels.push(TextureChannel.A);\n\treturn channels;\n}\n\n/**\n * Returns bitmask of all {@link TextureChannel TextureChannels} used by the\n * given texture. Determination is based only on the _role_ of the textures, e.g.\n * a texture used for the `occlusionTexture` will have (at least) a red channel.\n * See {@link listTextureChannels} for an array alternative.\n *\n * Example:\n *\n * ```js\n * const mask = getTextureChannelMask(texture);\n * if (mask & TextureChannel.R) {\n *   console.log('texture red channel used');\n * }\n * ```\n */\nexport function getTextureChannelMask(texture: Texture): number {\n\tconst document = Document.fromGraph(texture.getGraph())!;\n\tlet mask = 0x0000;\n\tfor (const edge of document.getGraph().listParentEdges(texture)) {\n\t\tconst parent = edge.getParent();\n\t\tlet { channels } = edge.getAttributes() as { channels: number | undefined };\n\n\t\tif (\n\t\t\tchannels &&\n\t\t\tedge.getName() === 'baseColorTexture' &&\n\t\t\tparent instanceof Material &&\n\t\t\tparent.getAlphaMode() === Material.AlphaMode.OPAQUE\n\t\t) {\n\t\t\tchannels &= ~TextureChannel.A;\n\t\t}\n\n\t\tif (channels) {\n\t\t\tmask |= channels;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (parent.propertyType !== PropertyType.ROOT) {\n\t\t\tdocument.getLogger().warn(`Missing attribute \".channels\" on edge, \"${edge.getName()}\".`);\n\t\t}\n\t}\n\treturn mask;\n}\n","import { Document, Texture } from '@gltf-transform/core';\n\n/**\n * Returns names of all texture slots using the given texture.\n *\n * Example:\n *\n * ```js\n * const slots = listTextureSlots(texture);\n * // → ['occlusionTexture', 'metallicRoughnesTexture']\n * ```\n */\nexport function listTextureSlots(texture: Texture): string[] {\n\tconst document = Document.fromGraph(texture.getGraph())!;\n\tconst root = document.getRoot();\n\tconst slots = texture\n\t\t.getGraph()\n\t\t.listParentEdges(texture)\n\t\t.filter((edge) => edge.getParent() !== root)\n\t\t.map((edge) => edge.getName());\n\treturn Array.from(new Set(slots));\n}\n","import { Accessor, Document, GLTF, Primitive, PropertyType, Transform } from '@gltf-transform/core';\nimport { prune } from './prune.js';\nimport { createTransform, deepListAttributes, remapAttribute, SetMap } from './utils.js';\nimport type { MeshoptEncoder } from 'meshoptimizer';\n\nconst NAME = 'reorder';\n\n/** Options for the {@link reorder} function. */\nexport interface ReorderOptions {\n\t/** MeshoptEncoder instance. */\n\tencoder: unknown;\n\t/**\n\t * Whether the order should be optimal for transmission size (recommended for Web)\n\t * or for GPU rendering performance. Default is 'size'.\n\t */\n\ttarget?: 'size' | 'performance';\n}\n\nconst REORDER_DEFAULTS: Required<Omit<ReorderOptions, 'encoder'>> = {\n\ttarget: 'size',\n};\n\n/**\n * Optimizes {@link Mesh} {@link Primitive Primitives} for locality of reference. Choose whether\n * the order should be optimal for transmission size (recommended for Web) or for GPU rendering\n * performance. Requires a MeshoptEncoder instance from the Meshoptimizer library.\n *\n * Example:\n *\n * ```ts\n * import { MeshoptEncoder } from 'meshoptimizer';\n * import { reorder } from '@gltf-transform/functions';\n *\n * await MeshoptEncoder.ready;\n *\n * await document.transform(\n * \treorder({encoder: MeshoptEncoder})\n * );\n * ```\n *\n * @category Transforms\n */\nexport function reorder(_options: ReorderOptions): Transform {\n\tconst options = { ...REORDER_DEFAULTS, ..._options } as Required<ReorderOptions>;\n\tconst encoder = options.encoder as typeof MeshoptEncoder | undefined;\n\n\tif (!encoder) {\n\t\tthrow new Error(`${NAME}: encoder dependency required — install \"meshoptimizer\".`);\n\t}\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tawait encoder.ready;\n\n\t\tconst plan = createLayoutPlan(doc);\n\n\t\tfor (const srcIndices of plan.indicesToAttributes.keys()) {\n\t\t\tconst dstIndices = srcIndices.clone();\n\t\t\tlet indicesArray = dstIndices.getArray()!.slice();\n\t\t\tif (!(indicesArray instanceof Uint32Array)) {\n\t\t\t\tindicesArray = new Uint32Array(indicesArray);\n\t\t\t}\n\n\t\t\t// Compute optimal order.\n\t\t\tconst [remap, unique] = encoder.reorderMesh(\n\t\t\t\tindicesArray,\n\t\t\t\tplan.indicesToMode.get(srcIndices) === Primitive.Mode.TRIANGLES,\n\t\t\t\toptions.target === 'size'\n\t\t\t);\n\n\t\t\tdstIndices.setArray(unique <= 65534 ? new Uint16Array(indicesArray) : indicesArray);\n\n\t\t\t// Update affected primitives.\n\t\t\tfor (const srcAttribute of plan.indicesToAttributes.get(srcIndices)) {\n\t\t\t\tconst dstAttribute = srcAttribute.clone();\n\t\t\t\tremapAttribute(dstAttribute, remap, unique);\n\t\t\t\tfor (const prim of plan.attributesToPrimitives.get(srcAttribute)) {\n\t\t\t\t\tif (prim.getIndices() === srcIndices) {\n\t\t\t\t\t\tprim.swap(srcIndices, dstIndices);\n\t\t\t\t\t}\n\t\t\t\t\tif (prim.getIndices() === dstIndices) {\n\t\t\t\t\t\tprim.swap(srcAttribute, dstAttribute);\n\t\t\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\t\t\ttarget.swap(srcAttribute, dstAttribute);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Clean up any attributes left unused by earlier cloning.\n\t\tawait doc.transform(prune({ propertyTypes: [PropertyType.ACCESSOR] }));\n\n\t\tif (!plan.indicesToAttributes.size) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found; may need to weld first.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\n/** @hidden */\ninterface LayoutPlan {\n\tindicesToMode: Map<Accessor, GLTF.MeshPrimitiveMode>;\n\tindicesToAttributes: SetMap<Accessor, Accessor>;\n\tattributesToPrimitives: SetMap<Accessor, Primitive>;\n}\n\n/**\n * Constructs a plan for processing vertex streams, based on unique\n * index:attribute[] groups. Where different indices are used with the same\n * attributes, we'll end up splitting the primitives to not share attributes,\n * which appears to be consistent with the Meshopt implementation.\n *\n * @hidden\n */\nfunction createLayoutPlan(document: Document): LayoutPlan {\n\tconst indicesToAttributes = new SetMap<Accessor, Accessor>();\n\tconst indicesToMode = new Map<Accessor, GLTF.MeshPrimitiveMode>();\n\tconst attributesToPrimitives = new SetMap<Accessor, Primitive>();\n\n\tfor (const mesh of document.getRoot().listMeshes()) {\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\tconst indices = prim.getIndices();\n\t\t\tif (!indices) continue;\n\n\t\t\tindicesToMode.set(indices, prim.getMode());\n\n\t\t\tfor (const attribute of deepListAttributes(prim)) {\n\t\t\t\tindicesToAttributes.add(indices, attribute);\n\t\t\t\tattributesToPrimitives.add(attribute, prim);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { indicesToAttributes, indicesToMode, attributesToPrimitives };\n}\n","import { Accessor, GLTF, MathUtils, Primitive, PrimitiveTarget, TypedArray, vec4 } from '@gltf-transform/core';\n\n/**\n * Sorts skinning weights from high to low, for each vertex of the input\n * {@link Primitive} or {@link PrimitiveTarget}, and normalizes the weights.\n * Optionally, uses the given 'limit' to remove least-significant joint\n * influences such that no vertex has more than 'limit' influences.\n *\n * Most realtime engines support a limited number of joint influences per vertex,\n * often 4 or 8. Sorting and removing the additional influences can reduce file\n * size and improve compatibility.\n *\n * Example:\n *\n * ```javascript\n * import { sortPrimitiveWeights } from '@gltf-transform/functions';\n *\n * const limit = 4;\n * for (const mesh of document.getRoot().listMeshes()) {\n * \tfor (const prim of mesh.listPrimitives()) {\n * \t\tsortPrimitiveWeights(prim, limit);\n * \t}\n * }\n * ```\n *\n * @param prim Input, to be modified in place.\n * @param limit Maximum number of joint influences per vertex. Must be a multiple of four.\n */\nexport function sortPrimitiveWeights(prim: Primitive | PrimitiveTarget, limit = Infinity) {\n\tif ((Number.isFinite(limit) && limit % 4) || limit <= 0) {\n\t\tthrow new Error(`Limit must be positive multiple of four.`);\n\t}\n\n\tconst vertexCount = prim.getAttribute('POSITION')!.getCount();\n\tconst setCount = prim.listSemantics().filter((name) => name.startsWith('WEIGHTS_')).length;\n\n\t// (1) Sort.\n\n\tconst indices = new Uint16Array(setCount * 4);\n\tconst srcWeights = new Float32Array(setCount * 4);\n\tconst dstWeights = new Float32Array(setCount * 4);\n\tconst srcJoints = new Uint32Array(setCount * 4);\n\tconst dstJoints = new Uint32Array(setCount * 4);\n\n\tfor (let i = 0; i < vertexCount; i++) {\n\t\tgetVertexArray(prim, i, 'WEIGHTS', srcWeights);\n\t\tgetVertexArray(prim, i, 'JOINTS', srcJoints);\n\n\t\t// Sort indices to create a lookup table, indices[dstIndex] → srcIndex,\n\t\t// indexed into the weights and joints arrays.\n\t\tfor (let j = 0; j < setCount * 4; j++) indices[j] = j;\n\t\tindices.sort((a, b) => (srcWeights[a] > srcWeights[b] ? -1 : 1));\n\n\t\t// Sort weights and joints.\n\t\tfor (let j = 0; j < indices.length; j++) {\n\t\t\tdstWeights[j] = srcWeights[indices[j]];\n\t\t\tdstJoints[j] = srcJoints[indices[j]];\n\t\t}\n\n\t\tsetVertexArray(prim, i, 'WEIGHTS', dstWeights);\n\t\tsetVertexArray(prim, i, 'JOINTS', dstJoints);\n\t}\n\n\t// (2) Limit.\n\tfor (let i = setCount; i * 4 > limit; i--) {\n\t\tconst weights = prim.getAttribute(`WEIGHTS_${i - 1}`)!;\n\t\tconst joints = prim.getAttribute(`JOINTS_${i - 1}`)!;\n\t\tprim.setAttribute(`WEIGHTS_${i - 1}`, null);\n\t\tprim.setAttribute(`JOINTS_${i - 1}`, null);\n\t\tif (weights.listParents().length === 1) weights.dispose();\n\t\tif (joints.listParents().length === 1) joints.dispose();\n\t}\n\n\t// (3) Normalize.\n\tnormalizePrimitiveWeights(prim);\n}\n\n// Utilities.\n\ntype PrimLike = Primitive | PrimitiveTarget;\n\nfunction normalizePrimitiveWeights(prim: PrimLike): void {\n\t// Would prefer to warn if unsafe, but no logger accessible in this scope.\n\tif (!isNormalizeSafe(prim)) return;\n\n\tconst vertexCount = prim.getAttribute('POSITION')!.getCount();\n\tconst setCount = prim.listSemantics().filter((name) => name.startsWith('WEIGHTS_')).length;\n\n\tconst templateAttribute = prim.getAttribute('WEIGHTS_0')!;\n\tconst templateArray = templateAttribute.getArray()!;\n\tconst componentType = templateAttribute.getComponentType();\n\tconst normalized = templateAttribute.getNormalized();\n\tconst normalizedComponentType = normalized ? componentType : undefined;\n\tconst delta = normalized ? MathUtils.decodeNormalizedInt(1, componentType) : Number.EPSILON;\n\tconst joints = new Uint32Array(setCount * 4).fill(0);\n\tconst weights = templateArray.slice(0, setCount * 4).fill(0);\n\n\tfor (let i = 0; i < vertexCount; i++) {\n\t\tgetVertexArray(prim, i, 'JOINTS', joints);\n\t\tgetVertexArray(prim, i, 'WEIGHTS', weights, normalizedComponentType);\n\n\t\tlet weightsSum = sum(weights, normalizedComponentType);\n\t\tif (weightsSum === 0) continue;\n\n\t\t// (1) If sum of weights not within δ of 1, renormalize all weights.\n\t\tif (Math.abs(1 - weightsSum) > delta) {\n\t\t\tfor (let j = 0; j < weights.length; j++) {\n\t\t\t\tif (normalized) {\n\t\t\t\t\tconst intValue = MathUtils.encodeNormalizedInt(weights[j] / weightsSum, componentType);\n\t\t\t\t\tweights[j] = MathUtils.decodeNormalizedInt(intValue, componentType);\n\t\t\t\t} else {\n\t\t\t\t\tweights[j] /= weightsSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tweightsSum = sum(weights, normalizedComponentType);\n\n\t\t// (2) Sum of normalized weights may still be off by δ. Compensate\n\t\t// in least-significant weight.\n\t\tif (normalized && weightsSum !== 1) {\n\t\t\tfor (let j = weights.length - 1; j >= 0; j--) {\n\t\t\t\tif (weights[j] > 0) {\n\t\t\t\t\tweights[j] += MathUtils.encodeNormalizedInt(1 - weightsSum, componentType);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (3) Remove joint indices whose weights have fallen to zero.\n\t\tfor (let j = weights.length - 1; j >= 0; j--) {\n\t\t\tif (weights[j] === 0) {\n\t\t\t\tjoints[j] = 0;\n\t\t\t}\n\t\t}\n\n\t\tsetVertexArray(prim, i, 'JOINTS', joints);\n\t\tsetVertexArray(prim, i, 'WEIGHTS', weights, normalizedComponentType);\n\t}\n}\n\n/** Lists all values of a multi-set vertex attribute (WEIGHTS_#, ...) for given vertex. */\nfunction getVertexArray(\n\tprim: PrimLike,\n\tvertexIndex: number,\n\tprefix: string,\n\ttarget: TypedArray,\n\tnormalizedComponentType?: GLTF.AccessorComponentType\n): TypedArray {\n\tlet weights: Accessor | null;\n\tconst el = [0, 0, 0, 0] as vec4;\n\tfor (let i = 0; (weights = prim.getAttribute(`${prefix}_${i}`)); i++) {\n\t\tweights.getElement(vertexIndex, el);\n\t\tfor (let j = 0; j < 4; j++) {\n\t\t\tif (normalizedComponentType) {\n\t\t\t\ttarget[i * 4 + j] = MathUtils.encodeNormalizedInt(el[j], normalizedComponentType);\n\t\t\t} else {\n\t\t\t\ttarget[i * 4 + j] = el[j];\n\t\t\t}\n\t\t}\n\t}\n\treturn target;\n}\n\n/** Sets all values of a multi-set vertex attribute (WEIGHTS_#, ...) for given vertex. */\nfunction setVertexArray(\n\tprim: PrimLike,\n\tvertexIndex: number,\n\tprefix: string,\n\tvalues: TypedArray,\n\tnormalizedComponentType?: GLTF.AccessorComponentType\n): void {\n\tlet weights: Accessor | null;\n\tconst el = [0, 0, 0, 0] as vec4;\n\tfor (let i = 0; (weights = prim.getAttribute(`${prefix}_${i}`)); i++) {\n\t\tfor (let j = 0; j < 4; j++) {\n\t\t\tif (normalizedComponentType) {\n\t\t\t\tel[j] = MathUtils.decodeNormalizedInt(values[i * 4 + j], normalizedComponentType);\n\t\t\t} else {\n\t\t\t\tel[j] = values[i * 4 + j];\n\t\t\t}\n\t\t}\n\t\tweights.setElement(vertexIndex, el);\n\t}\n}\n\n/** Sum an array of numbers. */\nfunction sum(values: TypedArray, normalizedComponentType?: GLTF.AccessorComponentType): number {\n\tlet sum = 0;\n\tfor (let i = 0; i < values.length; i++) {\n\t\tif (normalizedComponentType) {\n\t\t\tsum += MathUtils.decodeNormalizedInt(values[i], normalizedComponentType);\n\t\t} else {\n\t\t\tsum += values[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\n/** Returns true if attribute normalization is supported for this primitive. */\nfunction isNormalizeSafe(prim: PrimLike): boolean {\n\tconst attributes = prim\n\t\t.listSemantics()\n\t\t.filter((name) => name.startsWith('WEIGHTS_'))\n\t\t.map((name) => prim.getAttribute(name)!);\n\tconst normList = attributes.map((a) => a.getNormalized());\n\tconst typeList = attributes.map((a) => a.getComponentType());\n\treturn new Set(normList).size === 1 && new Set(typeList).size === 1;\n}\n","import {\n\tAccessor,\n\tAnimationChannel,\n\tbbox,\n\tDocument,\n\tILogger,\n\tmat4,\n\tMathUtils,\n\tMesh,\n\tNode,\n\tPrimitive,\n\tPrimitiveTarget,\n\tPropertyType,\n\tSkin,\n\tTransform,\n\tvec2,\n\tvec3,\n\tvec4,\n} from '@gltf-transform/core';\nimport { dedup } from './dedup.js';\nimport { fromRotationTranslationScale, fromScaling, invert, multiply as multiplyMat4 } from 'gl-matrix/mat4';\nimport { max, min, scale, transformMat4 } from 'gl-matrix/vec3';\nimport { InstancedMesh, KHRMeshQuantization } from '@gltf-transform/extensions';\nimport type { Volume } from '@gltf-transform/extensions';\nimport { prune } from './prune.js';\nimport { createTransform } from './utils.js';\nimport { sortPrimitiveWeights } from './sort-primitive-weights.js';\n\nconst NAME = 'quantize';\n\ntype TypedArrayConstructor =\n\t| Int8ArrayConstructor\n\t| Int16ArrayConstructor\n\t| Uint8ArrayConstructor\n\t| Uint16ArrayConstructor;\nconst SIGNED_INT = [Int8Array, Int16Array, Int32Array] as TypedArrayConstructor[];\n\nconst { TRANSLATION, ROTATION, SCALE, WEIGHTS } = AnimationChannel.TargetPath;\nconst TRS_CHANNELS = [TRANSLATION, ROTATION, SCALE];\n\n/** Options for the {@link quantize} function. */\nexport interface QuantizeOptions {\n\t/** Pattern (regex) used to filter vertex attribute semantics for quantization. Default: all. */\n\tpattern?: RegExp;\n\t/** Bounds for quantization grid. */\n\tquantizationVolume?: 'mesh' | 'scene';\n\t/** Quantization bits for `POSITION` attributes. */\n\tquantizePosition?: number;\n\t/** Quantization bits for `NORMAL` attributes. */\n\tquantizeNormal?: number;\n\t/** Quantization bits for `TEXCOORD_*` attributes. */\n\tquantizeTexcoord?: number;\n\t/** Quantization bits for `COLOR_*` attributes. */\n\tquantizeColor?: number;\n\t/** Quantization bits for `WEIGHT_*` attributes. */\n\tquantizeWeight?: number;\n\t/** Quantization bits for application-specific (`_*`) attributes. */\n\tquantizeGeneric?: number;\n\t/** Normalize weight attributes. */\n\tnormalizeWeights?: boolean;\n}\n\nexport const QUANTIZE_DEFAULTS: Required<QuantizeOptions> = {\n\tpattern: /.*/,\n\tquantizationVolume: 'mesh',\n\tquantizePosition: 14,\n\tquantizeNormal: 10,\n\tquantizeTexcoord: 12,\n\tquantizeColor: 8,\n\tquantizeWeight: 8,\n\tquantizeGeneric: 12,\n\tnormalizeWeights: true,\n};\n\n/**\n * References:\n * - https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization\n * - http://www.aclockworkberry.com/normal-unpacking-quantization-errors/\n * - https://www.mathworks.com/help/dsp/ref/uniformencoder.html\n * - https://oroboro.com/compressed-unit-vectors/\n */\n\n/**\n * Quantizes vertex attributes with `KHR_mesh_quantization`, reducing the size and memory footprint\n * of the file.\n *\n * @category Transforms\n */\nexport function quantize(_options: QuantizeOptions = QUANTIZE_DEFAULTS): Transform {\n\tconst options = { ...QUANTIZE_DEFAULTS, ..._options } as Required<QuantizeOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\n\t\tdoc.createExtension(KHRMeshQuantization).setRequired(true);\n\n\t\t// Compute vertex position quantization volume.\n\t\tlet nodeTransform: VectorTransform<vec3> | undefined = undefined;\n\t\tif (options.quantizationVolume === 'scene') {\n\t\t\tnodeTransform = getNodeTransform(expandBounds(root.listMeshes().map(getPositionQuantizationVolume)));\n\t\t}\n\n\t\t// Quantize mesh primitives.\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tif (options.quantizationVolume === 'mesh') {\n\t\t\t\tnodeTransform = getNodeTransform(getPositionQuantizationVolume(mesh));\n\t\t\t}\n\n\t\t\tif (nodeTransform && options.pattern.test('POSITION')) {\n\t\t\t\ttransformMeshParents(doc, mesh, nodeTransform);\n\t\t\t\ttransformMeshMaterials(mesh, 1 / nodeTransform.scale);\n\t\t\t}\n\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tquantizePrimitive(doc, prim, nodeTransform!, options);\n\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\tquantizePrimitive(doc, target, nodeTransform!, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait doc.transform(\n\t\t\tprune({ propertyTypes: [PropertyType.ACCESSOR, PropertyType.SKIN, PropertyType.MATERIAL] }),\n\t\t\tdedup({ propertyTypes: [PropertyType.ACCESSOR, PropertyType.MATERIAL, PropertyType.SKIN] })\n\t\t);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction quantizePrimitive(\n\tdoc: Document,\n\tprim: Primitive | PrimitiveTarget,\n\tnodeTransform: VectorTransform<vec3>,\n\toptions: Required<QuantizeOptions>\n): void {\n\tconst logger = doc.getLogger();\n\n\tfor (const semantic of prim.listSemantics()) {\n\t\tif (!options.pattern.test(semantic)) continue;\n\n\t\tconst srcAttribute = prim.getAttribute(semantic)!;\n\t\tconst { bits, ctor } = getQuantizationSettings(semantic, srcAttribute, logger, options);\n\n\t\tif (!ctor) continue;\n\t\tif (bits < 8 || bits > 16) throw new Error(`${NAME}: Requires bits = 8–16.`);\n\t\tif (srcAttribute.getComponentSize() <= bits / 8) continue;\n\n\t\tconst dstAttribute = srcAttribute.clone();\n\n\t\t// Remap position data.\n\t\tif (semantic === 'POSITION') {\n\t\t\tconst scale = nodeTransform.scale;\n\t\t\tconst transform: mat4 = [] as unknown as mat4;\n\t\t\t// Morph targets are relative offsets, don't translate them.\n\t\t\tprim instanceof Primitive\n\t\t\t\t? invert(transform, fromTransform(nodeTransform))\n\t\t\t\t: fromScaling(transform, [1 / scale, 1 / scale, 1 / scale]);\n\t\t\tfor (let i = 0, el: vec3 = [0, 0, 0], il = dstAttribute.getCount(); i < il; i++) {\n\t\t\t\tdstAttribute.getElement(i, el);\n\t\t\t\tdstAttribute.setElement(i, transformMat4(el, el, transform) as vec3);\n\t\t\t}\n\t\t}\n\n\t\t// Quantize the vertex attribute.\n\t\tquantizeAttribute(dstAttribute, ctor, bits);\n\t\tprim.swap(srcAttribute, dstAttribute);\n\t}\n\n\t// Normalize skinning weights.\n\tif (options.normalizeWeights && prim.getAttribute('WEIGHTS_0')) {\n\t\tsortPrimitiveWeights(prim, Infinity);\n\t}\n\n\tif (\n\t\tprim instanceof Primitive &&\n\t\tprim.getIndices() &&\n\t\tprim.listAttributes().length &&\n\t\tprim.listAttributes()[0]!.getCount() < 65535\n\t) {\n\t\tconst indices = prim.getIndices()!;\n\t\tindices.setArray(new Uint16Array(indices.getArray()!));\n\t}\n}\n\n/** Computes node quantization transforms in local space. */\nfunction getNodeTransform(volume: bbox): VectorTransform<vec3> {\n\tconst { min, max } = volume;\n\n\t// Scaling factor transforms [-1,1] box to the mesh AABB in local space.\n\t// See: https://github.com/donmccurdy/glTF-Transform/issues/328\n\tconst scale = Math.max(\n\t\t(max[0] - min[0]) / 2, // Divide because interval [-1,1] has length 2.\n\t\t(max[1] - min[1]) / 2,\n\t\t(max[2] - min[2]) / 2\n\t);\n\n\t// Original center of the mesh, in local space.\n\tconst offset: vec3 = [\n\t\tmin[0] + (max[0] - min[0]) / 2,\n\t\tmin[1] + (max[1] - min[1]) / 2,\n\t\tmin[2] + (max[2] - min[2]) / 2,\n\t];\n\n\treturn { offset, scale };\n}\n\n/** Applies corrective scale and offset to nodes referencing a quantized Mesh. */\nfunction transformMeshParents(doc: Document, mesh: Mesh, nodeTransform: VectorTransform<vec3>): void {\n\tconst transformMatrix = fromTransform(nodeTransform);\n\tfor (const parent of mesh.listParents()) {\n\t\tif (!(parent instanceof Node)) continue;\n\n\t\tconst animChannels = parent.listParents().filter((p) => p instanceof AnimationChannel) as AnimationChannel[];\n\t\tconst isAnimated = animChannels.some((channel) => TRS_CHANNELS.includes(channel.getTargetPath()!));\n\t\tconst isParentNode = parent.listChildren().length > 0;\n\n\t\tconst skin = parent.getSkin();\n\t\tif (skin) {\n\t\t\tparent.setSkin(transformSkin(skin, nodeTransform));\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst batch = parent.getExtension<InstancedMesh>('EXT_mesh_gpu_instancing');\n\t\tif (batch) {\n\t\t\tparent.setExtension('EXT_mesh_gpu_instancing', transformBatch(batch, nodeTransform));\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet targetNode: Node;\n\t\tif (isParentNode || isAnimated) {\n\t\t\ttargetNode = doc.createNode('').setMesh(mesh);\n\t\t\tparent.addChild(targetNode).setMesh(null);\n\t\t\tanimChannels\n\t\t\t\t.filter((channel) => channel.getTargetPath() === WEIGHTS)\n\t\t\t\t.forEach((channel) => channel.setTargetNode(targetNode));\n\t\t} else {\n\t\t\ttargetNode = parent;\n\t\t}\n\n\t\tconst nodeMatrix = targetNode.getMatrix();\n\t\tmultiplyMat4(nodeMatrix, nodeMatrix, transformMatrix);\n\t\ttargetNode.setMatrix(nodeMatrix);\n\t}\n}\n\n/** Applies corrective scale and offset to skin IBMs. */\nfunction transformSkin(skin: Skin, nodeTransform: VectorTransform<vec3>): Skin {\n\tskin = skin.clone(); // quantize() does cleanup.\n\tconst transformMatrix = fromTransform(nodeTransform);\n\tconst inverseBindMatrices = skin.getInverseBindMatrices()!.clone();\n\tconst ibm = [] as unknown as mat4;\n\tfor (let i = 0, count = inverseBindMatrices.getCount(); i < count; i++) {\n\t\tinverseBindMatrices.getElement(i, ibm);\n\t\tmultiplyMat4(ibm, ibm, transformMatrix);\n\t\tinverseBindMatrices.setElement(i, ibm);\n\t}\n\treturn skin.setInverseBindMatrices(inverseBindMatrices);\n}\n\n/** Applies corrective scale and offset to GPU instancing batches. */\nfunction transformBatch(batch: InstancedMesh, nodeTransform: VectorTransform<vec3>): InstancedMesh {\n\tif (!batch.getAttribute('TRANSLATION') && !batch.getAttribute('ROTATION') && !batch.getAttribute('SCALE')) {\n\t\treturn batch;\n\t}\n\n\tbatch = batch.clone(); // quantize() does cleanup.\n\tconst instanceTranslation = batch.getAttribute('TRANSLATION')?.clone();\n\tconst instanceRotation = batch.getAttribute('ROTATION')?.clone();\n\tconst instanceScale = batch.getAttribute('SCALE')?.clone();\n\tconst tpl = (instanceTranslation || instanceRotation || instanceScale)!;\n\n\tconst T_IDENTITY = [0, 0, 0] as vec3;\n\tconst R_IDENTITY = [0, 0, 0, 1] as vec4;\n\tconst S_IDENTITY = [1, 1, 1] as vec3;\n\n\tconst t = [0, 0, 0] as vec3;\n\tconst r = [0, 0, 0, 1] as vec4;\n\tconst s = [1, 1, 1] as vec3;\n\n\t// prettier-ignore\n\tconst instanceMatrix = [\n\t\t1, 0, 0, 0,\n\t\t0, 1, 0, 0,\n\t\t0, 0, 1, 0,\n\t\t0, 0, 0, 1,\n\t] as mat4;\n\n\tconst transformMatrix = fromTransform(nodeTransform);\n\n\tfor (let i = 0, count = tpl.getCount(); i < count; i++) {\n\t\tMathUtils.compose(\n\t\t\tinstanceTranslation ? (instanceTranslation.getElement(i, t) as vec3) : T_IDENTITY,\n\t\t\tinstanceRotation ? (instanceRotation.getElement(i, r) as vec4) : R_IDENTITY,\n\t\t\tinstanceScale ? (instanceScale.getElement(i, s) as vec3) : S_IDENTITY,\n\t\t\tinstanceMatrix\n\t\t);\n\n\t\tmultiplyMat4(instanceMatrix, instanceMatrix, transformMatrix);\n\n\t\tMathUtils.decompose(instanceMatrix, t, r, s);\n\n\t\tif (instanceTranslation) instanceTranslation.setElement(i, t);\n\t\tif (instanceRotation) instanceRotation.setElement(i, r);\n\t\tif (instanceScale) instanceScale.setElement(i, s);\n\t}\n\n\tif (instanceTranslation) batch.setAttribute('TRANSLATION', instanceTranslation);\n\tif (instanceRotation) batch.setAttribute('ROTATION', instanceRotation);\n\tif (instanceScale) batch.setAttribute('SCALE', instanceScale);\n\n\treturn batch;\n}\n\n/** Applies corrective scale to volumetric materials, which give thickness in local units. */\nfunction transformMeshMaterials(mesh: Mesh, scale: number) {\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tlet material = prim.getMaterial();\n\t\tif (!material) continue;\n\n\t\tlet volume = material.getExtension<Volume>('KHR_materials_volume');\n\t\tif (!volume || volume.getThicknessFactor() <= 0) continue;\n\n\t\t// quantize() does cleanup.\n\t\tvolume = volume.clone().setThicknessFactor(volume.getThicknessFactor() * scale);\n\t\tmaterial = material.clone().setExtension('KHR_materials_volume', volume);\n\t\tprim.setMaterial(material);\n\t}\n}\n\n/**\n * Quantizes an attribute to the given parameters.\n *\n * Uniformly remap 32-bit floats to reduced-precision 8- or 16-bit integers, so\n * that there are only 2^N unique values, for N within [8, 16].\n *\n * See: https://github.com/donmccurdy/glTF-Transform/issues/208\n */\nfunction quantizeAttribute(attribute: Accessor, ctor: TypedArrayConstructor, bits: number): void {\n\tconst dstArray = new ctor(attribute.getArray()!.length);\n\n\tconst signBits = SIGNED_INT.includes(ctor) ? 1 : 0;\n\tconst quantBits = bits - signBits;\n\tconst storageBits = ctor.BYTES_PER_ELEMENT * 8 - signBits;\n\n\tconst scale = Math.pow(2, quantBits) - 1;\n\tconst lo = storageBits - quantBits;\n\tconst hi = 2 * quantBits - storageBits;\n\n\tfor (let i = 0, di = 0, el: number[] = []; i < attribute.getCount(); i++) {\n\t\tattribute.getElement(i, el);\n\t\tfor (let j = 0; j < el.length; j++) {\n\t\t\t// Map [0.0 ... 1.0] to [0 ... scale].\n\t\t\tlet value = Math.round(Math.abs(el[j]) * scale);\n\n\t\t\t// Replicate msb to missing lsb.\n\t\t\tvalue = (value << lo) | (value >> hi);\n\n\t\t\t// Restore sign.\n\t\t\tdstArray[di++] = value * Math.sign(el[j]);\n\t\t}\n\t}\n\n\t// TODO(feat): Support sparse accessors, https://github.com/donmccurdy/glTF-Transform/issues/795\n\tattribute.setArray(dstArray).setNormalized(true).setSparse(false);\n}\n\nfunction getQuantizationSettings(\n\tsemantic: string,\n\tattribute: Accessor,\n\tlogger: ILogger,\n\toptions: Required<QuantizeOptions>\n): { bits: number; ctor?: TypedArrayConstructor } {\n\tconst min = attribute.getMinNormalized([]);\n\tconst max = attribute.getMaxNormalized([]);\n\n\tlet bits: number;\n\tlet ctor: TypedArrayConstructor;\n\n\tif (semantic === 'POSITION') {\n\t\tbits = options.quantizePosition;\n\t\tctor = bits <= 8 ? Int8Array : Int16Array;\n\t} else if (semantic === 'NORMAL' || semantic === 'TANGENT') {\n\t\tbits = options.quantizeNormal;\n\t\tctor = bits <= 8 ? Int8Array : Int16Array;\n\t} else if (semantic.startsWith('COLOR_')) {\n\t\tbits = options.quantizeColor;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('TEXCOORD_')) {\n\t\tif (min.some((v) => v < 0) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [0,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeTexcoord;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('JOINTS_')) {\n\t\tbits = Math.max(...attribute.getMax([])) <= 255 ? 8 : 16;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t\tif (attribute.getComponentSize() > bits / 8) {\n\t\t\tattribute.setArray(new ctor(attribute.getArray()!));\n\t\t}\n\t\treturn { bits: -1 };\n\t} else if (semantic.startsWith('WEIGHTS_')) {\n\t\tif (min.some((v) => v < 0) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [0,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeWeight;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('_')) {\n\t\tif (min.some((v) => v < -1) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [-1,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeGeneric;\n\t\tctor = min.some((v) => v < 0)\n\t\t\t? (ctor = bits <= 8 ? Int8Array : Int16Array)\n\t\t\t: (ctor = bits <= 8 ? Uint8Array : Uint16Array);\n\t} else {\n\t\tthrow new Error(`${NAME}: Unexpected semantic, \"${semantic}\".`);\n\t}\n\n\treturn { bits, ctor };\n}\n\nfunction getPositionQuantizationVolume(mesh: Mesh): bbox {\n\tconst positions: Accessor[] = [];\n\tconst relativePositions: Accessor[] = [];\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tconst attribute = prim.getAttribute('POSITION');\n\t\tif (attribute) positions.push(attribute);\n\t\tfor (const target of prim.listTargets()) {\n\t\t\tconst attribute = target.getAttribute('POSITION');\n\t\t\tif (attribute) relativePositions.push(attribute);\n\t\t}\n\t}\n\n\tif (positions.length === 0) {\n\t\tthrow new Error(`${NAME}: Missing \"POSITION\" attribute.`);\n\t}\n\n\tconst bbox = flatBounds<vec3>(positions, 3);\n\n\t// Morph target quantization volume is computed differently. First, ensure that the origin\n\t// <0, 0, 0> is in the quantization volume. Because we can't offset target positions (they're\n\t// relative deltas), default remapping will only map to a [-2, 2] AABB. Double the bounding box\n\t// to ensure scaling puts them within a [-1, 1] AABB instead.\n\tif (relativePositions.length > 0) {\n\t\tconst { min: relMin, max: relMax } = flatBounds<vec3>(relativePositions, 3);\n\t\tmin(bbox.min, bbox.min, min(relMin, scale(relMin, relMin, 2), [0, 0, 0]));\n\t\tmax(bbox.max, bbox.max, max(relMax, scale(relMax, relMax, 2), [0, 0, 0]));\n\t}\n\n\treturn bbox;\n}\n\n/** Computes total min and max of all Accessors in a list. */\nfunction flatBounds<T = vec2 | vec3>(accessors: Accessor[], elementSize: number): { min: T; max: T } {\n\tconst min: number[] = new Array(elementSize).fill(Infinity);\n\tconst max: number[] = new Array(elementSize).fill(-Infinity);\n\n\tconst tmpMin: number[] = [];\n\tconst tmpMax: number[] = [];\n\n\tfor (const accessor of accessors) {\n\t\taccessor.getMinNormalized(tmpMin);\n\t\taccessor.getMaxNormalized(tmpMax);\n\t\tfor (let i = 0; i < elementSize; i++) {\n\t\t\tmin[i] = Math.min(min[i], tmpMin[i]);\n\t\t\tmax[i] = Math.max(max[i], tmpMax[i]);\n\t\t}\n\t}\n\n\treturn { min, max } as unknown as { min: T; max: T };\n}\n\nfunction expandBounds(bboxes: bbox[]): bbox {\n\tconst result = bboxes[0];\n\tfor (const bbox of bboxes) {\n\t\tmin(result.min, result.min, bbox.min);\n\t\tmax(result.max, result.max, bbox.max);\n\t}\n\treturn result;\n}\n\ninterface VectorTransform<T = vec2 | vec3 | vec4> {\n\toffset: T;\n\tscale: number;\n}\n\nfunction fromTransform(transform: VectorTransform<vec3>): mat4 {\n\treturn fromRotationTranslationScale([] as unknown as mat4, [0, 0, 0, 1], transform.offset, [\n\t\ttransform.scale,\n\t\ttransform.scale,\n\t\ttransform.scale,\n\t]) as mat4;\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { EXTMeshoptCompression } from '@gltf-transform/extensions';\nimport type { MeshoptEncoder } from 'meshoptimizer';\nimport { reorder } from './reorder.js';\nimport { quantize } from './quantize.js';\nimport { createTransform } from './utils.js';\n\nexport interface MeshoptOptions {\n\tencoder: unknown;\n\tlevel?: 'medium' | 'high';\n}\n\nexport const MESHOPT_DEFAULTS: Required<Omit<MeshoptOptions, 'encoder'>> = { level: 'high' };\n\nconst NAME = 'meshopt';\n\n/**\n * Applies Meshopt compression using {@link EXTMeshoptCompression EXT_meshopt_compression}.\n * This type of compression can reduce the size of point, line, and triangle geometry,\n * morph targets, and animation data.\n *\n * This function is a thin wrapper around {@link reorder}, {@link quantize}, and\n * {@link EXTMeshoptCompression}, and exposes relatively few configuration options.\n * To access more options (like quantization bits) direct use of the underlying\n * functions is recommended.\n *\n * Example:\n *\n * ```javascript\n * import { MeshoptEncoder } from 'meshoptimizer';\n * import { reorder } from '@gltf-transform/functions';\n *\n * await MeshoptEncoder.ready;\n *\n * await document.transform(\n *   reorder({encoder: MeshoptEncoder, level: 'medium'})\n * );\n * ```\n *\n * @category Transforms\n */\nexport function meshopt(_options: MeshoptOptions): Transform {\n\tconst options = { ...MESHOPT_DEFAULTS, ..._options } as Required<MeshoptOptions>;\n\tconst encoder = options.encoder as typeof MeshoptEncoder | undefined;\n\n\tif (!encoder) {\n\t\tthrow new Error(`${NAME}: encoder dependency required — install \"meshoptimizer\".`);\n\t}\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tawait document.transform(\n\t\t\treorder({\n\t\t\t\tencoder: encoder,\n\t\t\t\ttarget: 'size',\n\t\t\t}),\n\t\t\tquantize({\n\t\t\t\t// IMPORTANT: Vertex attributes should be quantized in 'high' mode IFF they are\n\t\t\t\t// _not_ filtered in 'packages/extensions/src/ext-meshopt-compression/encoder.ts'.\n\t\t\t\tpattern: options.level === 'medium' ? /.*/ : /^(POSITION|TEXCOORD|JOINTS|WEIGHTS)(_\\d+)?$/,\n\t\t\t\tquantizePosition: 14,\n\t\t\t\tquantizeTexcoord: 12,\n\t\t\t\tquantizeColor: 8,\n\t\t\t\tquantizeNormal: 8,\n\t\t\t})\n\t\t);\n\n\t\tdocument\n\t\t\t.createExtension(EXTMeshoptCompression)\n\t\t\t.setRequired(true)\n\t\t\t.setEncoderOptions({\n\t\t\t\tmethod:\n\t\t\t\t\toptions.level === 'medium'\n\t\t\t\t\t\t? EXTMeshoptCompression.EncoderMethod.QUANTIZE\n\t\t\t\t\t\t: EXTMeshoptCompression.EncoderMethod.FILTER,\n\t\t\t});\n\t});\n}\n","import type { Document, Texture, Transform } from '@gltf-transform/core';\nimport {\n\tKHRMaterialsIOR,\n\tKHRMaterialsPBRSpecularGlossiness,\n\tKHRMaterialsSpecular,\n\tPBRSpecularGlossiness,\n} from '@gltf-transform/extensions';\nimport { createTransform, rewriteTexture } from './utils.js';\n\nconst NAME = 'metalRough';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface MetalRoughOptions {}\n\nconst METALROUGH_DEFAULTS: Required<MetalRoughOptions> = {};\n\n/**\n * Convert {@link Material}s from spec/gloss PBR workflow to metal/rough PBR workflow,\n * removing `KHR_materials_pbrSpecularGlossiness` and adding `KHR_materials_ior` and\n * `KHR_materials_specular`. The metal/rough PBR workflow is preferred for most use cases,\n * and is a prerequisite for other advanced PBR extensions provided by glTF.\n *\n * No options are currently implemented for this function.\n *\n * @category Transforms\n */\nexport function metalRough(_options: MetalRoughOptions = METALROUGH_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...METALROUGH_DEFAULTS, ..._options } as Required<MetalRoughOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tconst extensionsUsed = doc\n\t\t\t.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.map((ext) => ext.extensionName);\n\t\tif (!extensionsUsed.includes('KHR_materials_pbrSpecularGlossiness')) {\n\t\t\tlogger.warn(`${NAME}: KHR_materials_pbrSpecularGlossiness not found on document.`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst iorExtension = doc.createExtension(KHRMaterialsIOR);\n\t\tconst specExtension = doc.createExtension(KHRMaterialsSpecular);\n\t\tconst specGlossExtension = doc.createExtension(KHRMaterialsPBRSpecularGlossiness);\n\n\t\tconst inputTextures = new Set<Texture | null>();\n\n\t\tfor (const material of doc.getRoot().listMaterials()) {\n\t\t\tconst specGloss = material.getExtension<PBRSpecularGlossiness>('KHR_materials_pbrSpecularGlossiness');\n\t\t\tif (!specGloss) continue;\n\n\t\t\t// Create specular extension.\n\t\t\tconst specular = specExtension\n\t\t\t\t.createSpecular()\n\t\t\t\t.setSpecularFactor(1.0)\n\t\t\t\t.setSpecularColorFactor(specGloss.getSpecularFactor());\n\n\t\t\t// Stash textures that might become unused, to check and clean up later.\n\t\t\tinputTextures.add(specGloss.getSpecularGlossinessTexture());\n\t\t\tinputTextures.add(material.getBaseColorTexture());\n\t\t\tinputTextures.add(material.getMetallicRoughnessTexture());\n\n\t\t\t// Set up a metal/rough PBR material with IOR=Infinity (or 0), metallic=0. This\n\t\t\t// representation is precise and reliable, but perhaps less convenient for artists\n\t\t\t// than deriving a metalness value. Unfortunately we can't do that without imprecise\n\t\t\t// heuristics, and perhaps user tuning.\n\t\t\t// See: https://github.com/KhronosGroup/glTF/pull/1719#issuecomment-674365677\n\t\t\tmaterial\n\t\t\t\t.setBaseColorFactor(specGloss.getDiffuseFactor())\n\t\t\t\t.setMetallicFactor(0)\n\t\t\t\t.setRoughnessFactor(1)\n\t\t\t\t.setExtension('KHR_materials_ior', iorExtension.createIOR().setIOR(1000))\n\t\t\t\t.setExtension('KHR_materials_specular', specular);\n\n\t\t\t// Move diffuse -> baseColor.\n\t\t\tconst diffuseTexture = specGloss.getDiffuseTexture();\n\t\t\tif (diffuseTexture) {\n\t\t\t\tmaterial.setBaseColorTexture(diffuseTexture);\n\t\t\t\tmaterial.getBaseColorTextureInfo()!.copy(specGloss.getDiffuseTextureInfo()!);\n\t\t\t}\n\n\t\t\t// Move specular + gloss -> specular + roughness.\n\t\t\tconst sgTexture = specGloss.getSpecularGlossinessTexture();\n\t\t\tif (sgTexture) {\n\t\t\t\t// specularGlossiness -> specular.\n\t\t\t\tconst sgTextureInfo = specGloss.getSpecularGlossinessTextureInfo()!;\n\t\t\t\tconst specularTexture = doc.createTexture();\n\t\t\t\tawait rewriteTexture(sgTexture, specularTexture, (pixels, i, j) => {\n\t\t\t\t\tpixels.set(i, j, 3, 255); // Remove glossiness.\n\t\t\t\t});\n\t\t\t\tspecular.setSpecularTexture(specularTexture);\n\t\t\t\tspecular.setSpecularColorTexture(specularTexture);\n\t\t\t\tspecular.getSpecularTextureInfo()!.copy(sgTextureInfo);\n\t\t\t\tspecular.getSpecularColorTextureInfo()!.copy(sgTextureInfo);\n\n\t\t\t\t// specularGlossiness -> roughness.\n\t\t\t\tconst glossinessFactor = specGloss.getGlossinessFactor();\n\t\t\t\tconst metalRoughTexture = doc.createTexture();\n\t\t\t\tawait rewriteTexture(sgTexture, metalRoughTexture, (pixels, i, j) => {\n\t\t\t\t\t// Invert glossiness.\n\t\t\t\t\tconst roughness = 255 - Math.round(pixels.get(i, j, 3) * glossinessFactor);\n\t\t\t\t\tpixels.set(i, j, 0, 0);\n\t\t\t\t\tpixels.set(i, j, 1, roughness);\n\t\t\t\t\tpixels.set(i, j, 2, 0);\n\t\t\t\t\tpixels.set(i, j, 3, 255);\n\t\t\t\t});\n\t\t\t\tmaterial.setMetallicRoughnessTexture(metalRoughTexture);\n\t\t\t\tmaterial.getMetallicRoughnessTextureInfo()!.copy(sgTextureInfo);\n\t\t\t} else {\n\t\t\t\tspecular.setSpecularColorFactor(specGloss.getSpecularFactor());\n\t\t\t\tmaterial.setRoughnessFactor(1 - specGloss.getGlossinessFactor());\n\t\t\t}\n\n\t\t\t// Remove KHR_materials_pbrSpecularGlossiness from the material.\n\t\t\tmaterial.setExtension('KHR_materials_pbrSpecularGlossiness', null);\n\t\t}\n\n\t\t// Remove KHR_materials_pbrSpecularGlossiness from the document.\n\t\tspecGlossExtension.dispose();\n\n\t\t// Clean up unused textures.\n\t\tfor (const tex of inputTextures) {\n\t\t\tif (tex && tex.listParents().length === 1) tex.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import type { Accessor, Document, ILogger, Transform, TypedArray } from '@gltf-transform/core';\nimport { createTransform, formatDeltaOp } from './utils.js';\n\nconst NAME = 'unweld';\n\n/** Options for the {@link unweld} function. */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface UnweldOptions {}\n\nconst UNWELD_DEFAULTS: UnweldOptions = {};\n\n/**\n * De-index {@link Primitive}s, disconnecting any shared vertices. This operation will generally\n * increase the number of vertices in a mesh, but may be helpful for some geometry operations or\n * for creating hard edges.\n *\n * No options are currently implemented for this function.\n *\n * @category Transforms\n */\nexport function unweld(_options: UnweldOptions = UNWELD_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...UNWELD_DEFAULTS, ..._options } as Required<UnweldOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst visited = new Map<Accessor, Map<Accessor, Accessor>>();\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst indices = prim.getIndices();\n\t\t\t\tif (!indices) continue;\n\n\t\t\t\tconst srcVertexCount = prim.getAttribute('POSITION')!.getCount();\n\n\t\t\t\t// Vertex attributes.\n\t\t\t\tfor (const srcAttribute of prim.listAttributes()) {\n\t\t\t\t\tprim.swap(srcAttribute, unweldAttribute(srcAttribute, indices, logger, visited));\n\n\t\t\t\t\t// Clean up.\n\t\t\t\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t\t\t\t}\n\n\t\t\t\t// Morph target vertex attributes.\n\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\tfor (const srcAttribute of target.listAttributes()) {\n\t\t\t\t\t\ttarget.swap(srcAttribute, unweldAttribute(srcAttribute, indices, logger, visited));\n\n\t\t\t\t\t\t// Clean up.\n\t\t\t\t\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst dstVertexCount = prim.getAttribute('POSITION')!.getCount();\n\t\t\t\tlogger.debug(`${NAME}: ${formatDeltaOp(srcVertexCount, dstVertexCount)} vertices.`);\n\n\t\t\t\t// Clean up.\n\t\t\t\tprim.setIndices(null);\n\t\t\t\tif (indices.listParents().length === 1) indices.dispose();\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction unweldAttribute(\n\tsrcAttribute: Accessor,\n\tindices: Accessor,\n\tlogger: ILogger,\n\tvisited: Map<Accessor, Map<Accessor, Accessor>>\n): Accessor {\n\tif (visited.has(srcAttribute) && visited.get(srcAttribute)!.has(indices)) {\n\t\tlogger.debug(`${NAME}: Cache hit for reused attribute, \"${srcAttribute.getName()}\".`);\n\t\treturn visited.get(srcAttribute)!.get(indices)!;\n\t}\n\n\tconst dstAttribute = srcAttribute.clone();\n\tconst ArrayCtor = srcAttribute.getArray()!.constructor as new (len: number) => TypedArray;\n\tdstAttribute.setArray(new ArrayCtor(indices.getCount() * srcAttribute.getElementSize()));\n\n\tconst el: number[] = [];\n\tfor (let i = 0; i < indices.getCount(); i++) {\n\t\tdstAttribute.setElement(i, srcAttribute.getElement(indices.getScalar(i), el));\n\t}\n\n\tif (!visited.has(srcAttribute)) visited.set(srcAttribute, new Map());\n\tvisited.get(srcAttribute)!.set(indices, dstAttribute);\n\n\treturn dstAttribute;\n}\n","import type { Document, Transform, vec3 } from '@gltf-transform/core';\nimport { unweld } from './unweld.js';\nimport { createTransform } from './utils.js';\nimport { normalize } from 'gl-matrix/vec3';\n\nconst NAME = 'normals';\n\n/** Options for the {@link normals} function. */\nexport interface NormalsOptions {\n\t/** Whether to overwrite existing `NORMAL` attributes. */\n\toverwrite?: boolean;\n}\n\nconst NORMALS_DEFAULTS: Required<NormalsOptions> = {\n\toverwrite: false,\n};\n\n/**\n * Generates flat vertex normals for mesh primitives.\n *\n * Example:\n *\n * ```ts\n * import { normals } from '@gltf-transform/functions';\n *\n * await document.transform(normals({overwrite: true}));\n * ```\n *\n * @category Transforms\n */\nexport function normals(_options: NormalsOptions = NORMALS_DEFAULTS): Transform {\n\tconst options = { ...NORMALS_DEFAULTS, ..._options } as Required<NormalsOptions>;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tlet modified = 0;\n\n\t\tawait document.transform(unweld());\n\n\t\tfor (const mesh of document.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst position = prim.getAttribute('POSITION')!;\n\t\t\t\tlet normal = prim.getAttribute('NORMAL');\n\n\t\t\t\tif (options.overwrite && normal) {\n\t\t\t\t\tnormal.dispose();\n\t\t\t\t} else if (normal) {\n\t\t\t\t\tlogger.debug(`${NAME}: Skipping primitive: NORMAL found.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tnormal = document\n\t\t\t\t\t.createAccessor()\n\t\t\t\t\t.setArray(new Float32Array(position.getCount() * 3))\n\t\t\t\t\t.setType('VEC3');\n\n\t\t\t\tconst a = [0, 0, 0] as vec3;\n\t\t\t\tconst b = [0, 0, 0] as vec3;\n\t\t\t\tconst c = [0, 0, 0] as vec3;\n\n\t\t\t\tfor (let i = 0; i < position.getCount(); i += 3) {\n\t\t\t\t\tposition.getElement(i + 0, a);\n\t\t\t\t\tposition.getElement(i + 1, b);\n\t\t\t\t\tposition.getElement(i + 2, c);\n\n\t\t\t\t\tconst faceNormal = computeNormal(a, b, c);\n\n\t\t\t\t\tnormal.setElement(i + 0, faceNormal);\n\t\t\t\t\tnormal.setElement(i + 1, faceNormal);\n\t\t\t\t\tnormal.setElement(i + 2, faceNormal);\n\t\t\t\t}\n\n\t\t\t\tprim.setAttribute('NORMAL', normal);\n\t\t\t\tmodified++;\n\t\t\t}\n\t\t}\n\n\t\tif (!modified) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found. See debug output.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\n// https://stackoverflow.com/a/23709352/1314762\nfunction computeNormal(a: vec3, b: vec3, c: vec3): vec3 {\n\tconst A = [b[0] - a[0], b[1] - a[1], b[2] - a[2]];\n\tconst B = [c[0] - a[0], c[1] - a[1], c[2] - a[2]];\n\tconst n = [\n\t\tA[1] * B[2] - A[2] * B[1], //\n\t\tA[2] * B[0] - A[0] * B[2],\n\t\tA[0] * B[1] - A[1] * B[0],\n\t] as vec3;\n\treturn normalize([0, 0, 0], n) as vec3;\n}\n","import {\n\tColorUtils,\n\tDocument,\n\tMaterial,\n\tPrimitive,\n\tPropertyType,\n\tTexture,\n\tTextureInfo,\n\tTransform,\n\tvec4,\n} from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\nimport { prune } from './prune.js';\nimport ndarray, { NdArray, TypedArray } from 'ndarray';\nimport { savePixels } from 'ndarray-pixels';\n\nconst NAME = 'palette';\n\ntype TexturableProp = 'baseColor' | 'emissive' | 'metallicRoughness';\n\nexport interface PaletteOptions {\n\t/** Size (in pixels) of a single block within each palette texture. Default: 4. */\n\tblockSize?: number;\n\t/**\n\t * Minimum number of blocks in the palette texture. If fewer unique\n\t * material values are found, no palettes will be generated. Default: 2.\n\t */\n\tmin?: number;\n}\n\nexport const PALETTE_DEFAULTS: Required<PaletteOptions> = {\n\tblockSize: 4,\n\tmin: 2,\n};\n\n/**\n * Creates palette textures containing all unique values of scalar\n * {@link Material} properties within the scene, then merges materials. For\n * scenes with many solid-colored materials (often found in CAD, architectural,\n * or low-poly styles), texture palettes can reduce the number of materials\n * used, and significantly increase the number of {@link Mesh} objects eligible\n * for {@link join} operations.\n *\n * Materials already containing texture coordinates (UVs) are not eligible for\n * texture palette optimizations. Currently only a material's base color,\n * alpha, emissive factor, metallic factor, and roughness factor are converted\n * to palette textures.\n *\n * Example:\n *\n * ```typescript\n * import { palette, flatten, dequantize, join } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tpalette({ min: 5 }),\n * \tflatten(),\n * \tdequantize(),\n * \tjoin()\n * );\n * ```\n *\n * The illustration below shows a typical base color palette texture:\n *\n * <img\n * \tsrc=\"/media/functions/palette.png\"\n * \talt=\"Row of colored blocks\"\n * \tstyle=\"width: 100%; max-width: 320px; image-rendering: pixelated;\">\n *\n * @category Transforms\n */\nexport function palette(_options: PaletteOptions = PALETTE_DEFAULTS): Transform {\n\tconst options = { ...PALETTE_DEFAULTS, ..._options } as Required<PaletteOptions>;\n\tconst blockSize = Math.max(options.blockSize, 1);\n\tconst min = Math.max(options.min, 1);\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tconst root = document.getRoot();\n\n\t\t// Find and remove unused TEXCOORD_n attributes.\n\t\tawait document.transform(\n\t\t\tprune({\n\t\t\t\tkeepAttributes: false,\n\t\t\t\tkeepLeaves: true,\n\t\t\t\tpropertyTypes: [PropertyType.ACCESSOR],\n\t\t\t})\n\t\t);\n\n\t\tconst prims = new Set<Primitive>();\n\t\tconst materials = new Set<Material>();\n\n\t\t// (1) Gather list of eligible prims and materials.\n\n\t\tfor (const mesh of root.listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst material = prim.getMaterial();\n\t\t\t\tif (!material || !!prim.getAttribute('TEXCOORD_0')) continue;\n\n\t\t\t\tprims.add(prim);\n\t\t\t\tmaterials.add(material);\n\t\t\t}\n\t\t}\n\n\t\t// (2) Gather list of distinct material properties.\n\n\t\tconst materialKeys = new Set<string>();\n\t\tconst materialKeyMap = new Map<Material, string>();\n\t\tconst materialProps: Record<TexturableProp, Set<string>> = {\n\t\t\tbaseColor: new Set<string>(),\n\t\t\temissive: new Set<string>(),\n\t\t\tmetallicRoughness: new Set<string>(),\n\t\t};\n\n\t\tfor (const material of materials) {\n\t\t\tconst baseColor = encodeRGBA(material.getBaseColorFactor().slice() as vec4);\n\t\t\tconst emissive = encodeRGBA([...material.getEmissiveFactor(), 1]);\n\t\t\tconst roughness = encodeFloat(material.getRoughnessFactor());\n\t\t\tconst metallic = encodeFloat(material.getMetallicFactor());\n\t\t\tconst key = `baseColor:${baseColor},emissive:${emissive},metallicRoughness:${metallic}${roughness}`;\n\t\t\tmaterialProps.baseColor.add(baseColor);\n\t\t\tmaterialProps.emissive.add(emissive);\n\t\t\tmaterialProps.metallicRoughness.add(metallic + '+' + roughness);\n\t\t\tmaterialKeys.add(key);\n\t\t\tmaterialKeyMap.set(material, key);\n\t\t}\n\n\t\t// logger.debug(`${NAME}:\\n${Array.from(materialKeys.values()).join('\\n')}`);\n\n\t\tconst keyCount = materialKeys.size;\n\t\tif (keyCount < min) {\n\t\t\tlogger.debug(`${NAME}: Found <${min} unique material properties. Exiting.`);\n\t\t\treturn;\n\t\t}\n\n\t\t// (3) Allocate palette textures.\n\n\t\tconst w = ceilPowerOfTwo(keyCount * blockSize);\n\t\tconst h = ceilPowerOfTwo(blockSize);\n\t\tconst padWidth = w - keyCount * blockSize;\n\n\t\tconst paletteTexturePixels: Record<TexturableProp, NdArray<Uint8Array> | null> = {\n\t\t\tbaseColor: null,\n\t\t\temissive: null,\n\t\t\tmetallicRoughness: null,\n\t\t};\n\n\t\t// Properties skipped for material equality comparisons.\n\t\tconst skipProps = new Set(['name', 'extras']);\n\t\tconst skip = (...props: string[]) => props.forEach((prop) => skipProps.add(prop));\n\n\t\tlet baseColorTexture: Texture | null = null;\n\t\tlet emissiveTexture: Texture | null = null;\n\t\tlet metallicRoughnessTexture: Texture | null = null;\n\n\t\tif (materialProps.baseColor.size >= min) {\n\t\t\tconst name = 'PaletteBaseColor';\n\t\t\tbaseColorTexture = document.createTexture(name).setURI(`${name}.png`);\n\t\t\tpaletteTexturePixels.baseColor = ndarray(new Uint8Array(w * h * 4), [w, h, 4]);\n\t\t\tskip('baseColorFactor', 'baseColorTexture', 'baseColorTextureInfo');\n\t\t}\n\t\tif (materialProps.emissive.size >= min) {\n\t\t\tconst name = 'PaletteEmissive';\n\t\t\temissiveTexture = document.createTexture(name).setURI(`${name}.png`);\n\t\t\tpaletteTexturePixels.emissive = ndarray(new Uint8Array(w * h * 4), [w, h, 4]);\n\t\t\tskip('emissiveFactor', 'emissiveTexture', 'emissiveTextureInfo');\n\t\t}\n\t\tif (materialProps.metallicRoughness.size >= min) {\n\t\t\tconst name = 'PaletteMetallicRoughness';\n\t\t\tmetallicRoughnessTexture = document.createTexture(name).setURI(`${name}.png`);\n\t\t\tpaletteTexturePixels.metallicRoughness = ndarray(new Uint8Array(w * h * 4), [w, h, 4]);\n\t\t\tskip('metallicFactor', 'roughnessFactor', 'metallicRoughnessTexture', 'metallicRoughnessTextureInfo');\n\t\t}\n\n\t\tif (!(baseColorTexture || emissiveTexture || metallicRoughnessTexture)) {\n\t\t\tlogger.debug(`${NAME}: No material property has ≥${min} unique values. Exiting.`);\n\t\t\treturn;\n\t\t}\n\n\t\t// (4) Write blocks to palette textures.\n\n\t\tconst visitedKeys = new Set<string>();\n\t\tconst materialIndices = new Map<string, number>();\n\t\tconst paletteMaterials: Material[] = [];\n\n\t\tlet nextIndex = 0;\n\t\tfor (const material of materials) {\n\t\t\tconst key = materialKeyMap.get(material)!;\n\t\t\tif (visitedKeys.has(key)) continue;\n\n\t\t\tconst index = nextIndex++;\n\n\t\t\tif (paletteTexturePixels.baseColor) {\n\t\t\t\tconst pixels = paletteTexturePixels.baseColor;\n\t\t\t\tconst baseColor = [...material.getBaseColorFactor()] as vec4;\n\t\t\t\tColorUtils.convertLinearToSRGB(baseColor, baseColor);\n\t\t\t\twriteBlock(pixels, index, baseColor, blockSize);\n\t\t\t}\n\t\t\tif (paletteTexturePixels.emissive) {\n\t\t\t\tconst pixels = paletteTexturePixels.emissive;\n\t\t\t\tconst emissive = [...material.getEmissiveFactor(), 1] as vec4;\n\t\t\t\tColorUtils.convertLinearToSRGB(emissive, emissive);\n\t\t\t\twriteBlock(pixels, index, emissive, blockSize);\n\t\t\t}\n\t\t\tif (paletteTexturePixels.metallicRoughness) {\n\t\t\t\tconst pixels = paletteTexturePixels.metallicRoughness;\n\t\t\t\tconst metallic = material.getMetallicFactor();\n\t\t\t\tconst roughness = material.getRoughnessFactor();\n\t\t\t\twriteBlock(pixels, index, [0, roughness, metallic, 1], blockSize);\n\t\t\t}\n\n\t\t\tvisitedKeys.add(key);\n\t\t\tmaterialIndices.set(key, index);\n\t\t}\n\n\t\t// (5) Compress palette textures and assign to palette materials.\n\n\t\tconst mimeType = 'image/png';\n\n\t\tif (baseColorTexture) {\n\t\t\tconst image = await savePixels(paletteTexturePixels.baseColor!, mimeType);\n\t\t\tbaseColorTexture.setImage(image).setMimeType(mimeType);\n\t\t}\n\t\tif (emissiveTexture) {\n\t\t\tconst image = await savePixels(paletteTexturePixels.emissive!, mimeType);\n\t\t\temissiveTexture.setImage(image).setMimeType(mimeType);\n\t\t}\n\t\tif (metallicRoughnessTexture) {\n\t\t\tconst image = await savePixels(paletteTexturePixels.metallicRoughness!, mimeType);\n\t\t\tmetallicRoughnessTexture.setImage(image).setMimeType(mimeType);\n\t\t}\n\n\t\t// (6) Create palette materials, generate UVs, and assign both to prims.\n\n\t\tlet nextPaletteMaterialIndex = 1;\n\t\tfor (const prim of prims) {\n\t\t\tconst srcMaterial = prim.getMaterial()!;\n\t\t\tconst key = materialKeyMap.get(srcMaterial)!;\n\t\t\tconst blockIndex = materialIndices.get(key)!;\n\n\t\t\t// UVs are centered horizontally in each block, descending vertically\n\t\t\t// to form a diagonal line in the UV layout. Easy and compressible.\n\t\t\tconst baseUV = (blockIndex + 0.5) / keyCount;\n\t\t\tconst padUV = (baseUV * (w - padWidth)) / w;\n\n\t\t\tconst position = prim.getAttribute('POSITION')!;\n\t\t\tconst buffer = position.getBuffer();\n\t\t\tconst array = new Float32Array(position.getCount() * 2).fill(padUV);\n\t\t\tconst uv = document.createAccessor().setType('VEC2').setArray(array).setBuffer(buffer);\n\n\t\t\tlet dstMaterial;\n\t\t\tfor (const material of paletteMaterials) {\n\t\t\t\tif (material.equals(srcMaterial, skipProps)) {\n\t\t\t\t\tdstMaterial = material;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!dstMaterial) {\n\t\t\t\tconst suffix = (nextPaletteMaterialIndex++).toString().padStart(3, '0');\n\t\t\t\tdstMaterial = srcMaterial.clone().setName(`PaletteMaterial${suffix}`);\n\n\t\t\t\tif (baseColorTexture) {\n\t\t\t\t\tdstMaterial\n\t\t\t\t\t\t.setBaseColorFactor([1, 1, 1, 1])\n\t\t\t\t\t\t.setBaseColorTexture(baseColorTexture)\n\t\t\t\t\t\t.getBaseColorTextureInfo()!\n\t\t\t\t\t\t.setMinFilter(TextureInfo.MinFilter.NEAREST)\n\t\t\t\t\t\t.setMagFilter(TextureInfo.MagFilter.NEAREST);\n\t\t\t\t}\n\t\t\t\tif (emissiveTexture) {\n\t\t\t\t\tdstMaterial\n\t\t\t\t\t\t.setEmissiveFactor([1, 1, 1])\n\t\t\t\t\t\t.setEmissiveTexture(emissiveTexture)\n\t\t\t\t\t\t.getEmissiveTextureInfo()!\n\t\t\t\t\t\t.setMinFilter(TextureInfo.MinFilter.NEAREST)\n\t\t\t\t\t\t.setMagFilter(TextureInfo.MagFilter.NEAREST);\n\t\t\t\t}\n\t\t\t\tif (metallicRoughnessTexture) {\n\t\t\t\t\tdstMaterial\n\t\t\t\t\t\t.setMetallicFactor(1)\n\t\t\t\t\t\t.setRoughnessFactor(1)\n\t\t\t\t\t\t.setMetallicRoughnessTexture(metallicRoughnessTexture)\n\t\t\t\t\t\t.getMetallicRoughnessTextureInfo()!\n\t\t\t\t\t\t.setMinFilter(TextureInfo.MinFilter.NEAREST)\n\t\t\t\t\t\t.setMagFilter(TextureInfo.MagFilter.NEAREST);\n\t\t\t\t}\n\n\t\t\t\tpaletteMaterials.push(dstMaterial);\n\t\t\t}\n\n\t\t\tprim.setMaterial(dstMaterial).setAttribute('TEXCOORD_0', uv);\n\t\t}\n\n\t\tawait document.transform(prune({ propertyTypes: [PropertyType.MATERIAL] }));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/** Encodes a floating-point value on the interval [0,1] at 8-bit precision. */\nfunction encodeFloat(value: number): string {\n\tconst hex = Math.round(value * 255).toString(16);\n\treturn hex.length === 1 ? '0' + hex : hex;\n}\n\n/** Encodes an RGBA color in Linear-sRGB-D65 color space. */\nfunction encodeRGBA(value: vec4): string {\n\tColorUtils.convertLinearToSRGB(value, value);\n\treturn value.map(encodeFloat).join('');\n}\n\n/** Returns the nearest higher power of two. */\nfunction ceilPowerOfTwo(value: number): number {\n\treturn Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n}\n\n/** Writes an NxN block of pixels to an image, at the given block index. */\nfunction writeBlock(pixels: NdArray<TypedArray>, index: number, value: vec4, blockSize: number): void {\n\tfor (let i = 0; i < blockSize; i++) {\n\t\tfor (let j = 0; j < blockSize; j++) {\n\t\t\tpixels.set(index * blockSize + i, j, 0, value[0] * 255);\n\t\t\tpixels.set(index * blockSize + i, j, 1, value[1] * 255);\n\t\t\tpixels.set(index * blockSize + i, j, 2, value[2] * 255);\n\t\t\tpixels.set(index * blockSize + i, j, 3, value[3] * 255);\n\t\t}\n\t}\n}\n","import { Document, ILogger, PropertyType, Transform } from '@gltf-transform/core';\nimport { prune } from './prune.js';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'partition';\n\nexport interface PartitionOptions {\n\tanimations?: boolean | Array<string>;\n\tmeshes?: boolean | Array<string>;\n}\n\nconst PARTITION_DEFAULTS: Required<PartitionOptions> = {\n\tanimations: true,\n\tmeshes: true,\n};\n\n/**\n * Partitions the binary payload of a glTF file so separate mesh or animation data is in separate\n * `.bin` {@link Buffer}s. This technique may be useful for engines that support lazy-loading\n * specific binary resources as needed over the application lifecycle.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listBuffers(); // → [Buffer]\n *\n * await document.transform(partition({meshes: true}));\n *\n * document.getRoot().listBuffers(); // → [Buffer, Buffer, ...]\n * ```\n *\n * @category Transforms\n */\nexport function partition(_options: PartitionOptions = PARTITION_DEFAULTS): Transform {\n\tconst options = { ...PARTITION_DEFAULTS, ..._options } as Required<PartitionOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tif (options.meshes !== false) partitionMeshes(doc, logger, options);\n\t\tif (options.animations !== false) partitionAnimations(doc, logger, options);\n\n\t\tif (!options.meshes && !options.animations) {\n\t\t\tlogger.warn(`${NAME}: Select animations or meshes to create a partition.`);\n\t\t}\n\n\t\tawait doc.transform(prune({ propertyTypes: [PropertyType.BUFFER] }));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction partitionMeshes(doc: Document, logger: ILogger, options: PartitionOptions): void {\n\tconst existingURIs = new Set<string>(\n\t\tdoc\n\t\t\t.getRoot()\n\t\t\t.listBuffers()\n\t\t\t.map((b) => b.getURI())\n\t);\n\n\tdoc.getRoot()\n\t\t.listMeshes()\n\t\t.forEach((mesh, meshIndex) => {\n\t\t\tif (Array.isArray(options.meshes) && !options.meshes.includes(mesh.getName())) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping mesh #${meshIndex} with name \"${mesh.getName()}\".`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Creating buffer for mesh \"${mesh.getName()}\".`);\n\n\t\t\tconst buffer = doc\n\t\t\t\t.createBuffer(mesh.getName())\n\t\t\t\t.setURI(createBufferURI(mesh.getName() || 'mesh', existingURIs));\n\n\t\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\t\tconst indices = primitive.getIndices();\n\t\t\t\tif (indices) indices.setBuffer(buffer);\n\t\t\t\tprimitive.listAttributes().forEach((attribute) => attribute.setBuffer(buffer));\n\t\t\t\tprimitive.listTargets().forEach((primTarget) => {\n\t\t\t\t\tprimTarget.listAttributes().forEach((attribute) => attribute.setBuffer(buffer));\n\t\t\t\t});\n\t\t\t});\n\t\t});\n}\n\nfunction partitionAnimations(doc: Document, logger: ILogger, options: PartitionOptions): void {\n\tconst existingURIs = new Set<string>(\n\t\tdoc\n\t\t\t.getRoot()\n\t\t\t.listBuffers()\n\t\t\t.map((b) => b.getURI())\n\t);\n\n\tdoc.getRoot()\n\t\t.listAnimations()\n\t\t.forEach((anim, animIndex) => {\n\t\t\tif (Array.isArray(options.animations) && !options.animations.includes(anim.getName())) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping animation #${animIndex} with name \"${anim.getName()}\".`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Creating buffer for animation \"${anim.getName()}\".`);\n\n\t\t\tconst buffer = doc\n\t\t\t\t.createBuffer(anim.getName())\n\t\t\t\t.setURI(createBufferURI(anim.getName() || 'animation', existingURIs));\n\n\t\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\t\tconst input = sampler.getInput();\n\t\t\t\tconst output = sampler.getOutput();\n\t\t\t\tif (input) input.setBuffer(buffer);\n\t\t\t\tif (output) output.setBuffer(buffer);\n\t\t\t});\n\t\t});\n}\n\nfunction createBufferURI(basename: string, existing: Set<string>): string {\n\tlet uri = `${basename}.bin`;\n\tlet i = 1;\n\twhile (existing.has(uri)) uri = `${basename}_${i++}.bin`;\n\treturn uri;\n}\n","var InterpolationInternal;\n\n(function (InterpolationInternal) {\n  InterpolationInternal[InterpolationInternal[\"STEP\"] = 0] = \"STEP\";\n  InterpolationInternal[InterpolationInternal[\"LERP\"] = 1] = \"LERP\";\n  InterpolationInternal[InterpolationInternal[\"SLERP\"] = 2] = \"SLERP\";\n})(InterpolationInternal || (InterpolationInternal = {}));\n\nconst TO_INTERPOLATION_INTERNAL = {\n  step: InterpolationInternal.STEP,\n  lerp: InterpolationInternal.LERP,\n  slerp: InterpolationInternal.SLERP\n};\nconst EPSILON = 0.000001;\n\n/* Implementation */\n\nfunction resampleDebug(input, output, interpolation, tolerance = 1e-4) {\n  const elementSize = output.length / input.length;\n  const tmp = new Array(elementSize).fill(0);\n  const value = new Array(elementSize).fill(0);\n  const valueNext = new Array(elementSize).fill(0);\n  const valuePrev = new Array(elementSize).fill(0);\n  const lastIndex = input.length - 1;\n  let writeIndex = 1;\n\n  for (let i = 1; i < lastIndex; ++i) {\n    const timePrev = input[writeIndex - 1];\n    const time = input[i];\n    const timeNext = input[i + 1];\n    const t = (time - timePrev) / (timeNext - timePrev);\n    let keep = false; // Remove unnecessary adjacent keyframes.\n\n    if (time !== timeNext && (i !== 1 || time !== input[0])) {\n      getElement(output, writeIndex - 1, valuePrev);\n      getElement(output, i, value);\n      getElement(output, i + 1, valueNext);\n\n      if (interpolation === 'slerp') {\n        // Prune keyframes colinear with prev/next keyframes.\n        const sample = slerp(tmp, valuePrev, valueNext, t);\n        const angle = getAngle(valuePrev, value) + getAngle(value, valueNext);\n        keep = !eq(value, sample, tolerance) || angle + Number.EPSILON >= Math.PI;\n      } else if (interpolation === 'lerp') {\n        // Prune keyframes colinear with prev/next keyframes.\n        const sample = vlerp(tmp, valuePrev, valueNext, t);\n        keep = !eq(value, sample, tolerance);\n      } else if (interpolation === 'step') {\n        // Prune keyframes identical to prev/next keyframes.\n        keep = !eq(value, valuePrev) || !eq(value, valueNext);\n      }\n    } // In-place compaction.\n\n\n    if (keep) {\n      if (i !== writeIndex) {\n        input[writeIndex] = input[i];\n        setElement(output, writeIndex, getElement(output, i, tmp));\n      }\n\n      writeIndex++;\n    }\n  } // Flush last keyframe (compaction looks ahead).\n\n\n  if (lastIndex > 0) {\n    input[writeIndex] = input[lastIndex];\n    setElement(output, writeIndex, getElement(output, lastIndex, tmp));\n    writeIndex++;\n  }\n\n  return writeIndex;\n}\n/* Utilities */\n\nfunction getElement(array, index, target) {\n  for (let i = 0, elementSize = target.length; i < elementSize; i++) {\n    target[i] = array[index * elementSize + i];\n  }\n\n  return target;\n}\n\nfunction setElement(array, index, value) {\n  for (let i = 0, elementSize = value.length; i < elementSize; i++) {\n    array[index * elementSize + i] = value[i];\n  }\n}\n\nfunction eq(a, b, tolerance = 0) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let i = 0; i < a.length; i++) {\n    if (Math.abs(a[i] - b[i]) > tolerance) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction lerp(v0, v1, t) {\n  return v0 * (1 - t) + v1 * t;\n}\n\nfunction vlerp(out, a, b, t) {\n  for (let i = 0; i < a.length; i++) out[i] = lerp(a[i], b[i], t);\n\n  return out;\n} // From gl-matrix.\n\n\nfunction slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  let ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  let bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  let omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n\nfunction getAngle(a, b) {\n  const dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/** WASM loader for Web environments. */\nconst wasm = /* #__PURE__ */fetch( /* #__PURE__ */new URL('./release.wasm', import.meta.url));\n\n// SETUP\n///////////////////////////////////////////////////////////////////////////////\n\nlet exports;\nconst ready = /* #__PURE__ */new Promise(async (resolve, reject) => {\n  try {\n    const module = await WebAssembly.compile(await wasm);\n    exports = await instantiate(module, {});\n    resolve();\n  } catch (e) {\n    reject(e);\n  }\n});\n\nasync function instantiate(module, imports = {}) {\n  const instance = await WebAssembly.instantiate(module, {\n    env: Object.assign(Object.create(globalThis), {}, {\n      abort: __abort\n    })\n  });\n  return instance.exports;\n} ///////////////////////////////////////////////////////////////////////////////\n// PUBLIC API\n///////////////////////////////////////////////////////////////////////////////\n\n\nconst CHUNK_SIZE = 1024; // The first and last keyframes cannot be removed in any given step, but we need to\n// somehow remove keyframes on chunk boundaries. So after processing each chunk,\n// we copy its last two keyframes in front of the next chunk, and run from there.\n//\n// 🟩 ⬜️ ⬜️ ⬜️ ⬜️ ⬜️                  // chunk 1, original\n// 🟩 ⬜️ 🟨 🟥                       // chunk 1, resampled\n//            🟨 🟥 🟩 ⬜️ ⬜️ ⬜️       // chunk 2, original\n//            🟨 🟩 ⬜️ ⬜️            // chunk 2, resampled\n// ...\n\nfunction resample(input, output, interpolation, tolerance = 1e-4) {\n  __assert(!!exports, 'Await \"ready\" before using module.');\n\n  __assert(input instanceof Float32Array, 'Missing Float32Array input.');\n\n  __assert(output instanceof Float32Array, 'Missing Float32Array output.');\n\n  const outputSize = output.length / input.length;\n\n  __assert(Number.isInteger(outputSize), 'Invalid input/output counts.');\n\n  __assert(interpolation in TO_INTERPOLATION_INTERNAL, 'Invalid interpolation.');\n\n  __assert(Number.isFinite(tolerance), 'Invalid tolerance');\n\n  const interpVal = TO_INTERPOLATION_INTERNAL[interpolation];\n  const srcCount = input.length;\n  let dstCount = 0;\n\n  for (let chunkStart = 0; chunkStart < input.length; chunkStart += CHUNK_SIZE) {\n    const chunkCount = Math.min(srcCount - chunkStart, CHUNK_SIZE); // Allocate a two-keyframe prefix for all chunks after the first.\n\n    const prefixCount = chunkStart > 0 ? 2 : 0;\n    const chunkInput = new Float32Array(input.buffer, input.byteOffset + (chunkStart - prefixCount) * Float32Array.BYTES_PER_ELEMENT, chunkCount + prefixCount);\n    const chunkOutput = new Float32Array(output.buffer, output.byteOffset + (chunkStart - prefixCount) * outputSize * Float32Array.BYTES_PER_ELEMENT, (chunkCount + prefixCount) * outputSize); // Copy prefix to start of next chunk.\n\n    if (prefixCount > 0) {\n      input.copyWithin(chunkStart - prefixCount, dstCount - prefixCount, dstCount);\n      output.copyWithin((chunkStart - prefixCount) * outputSize, (dstCount - prefixCount) * outputSize, dstCount * outputSize);\n    }\n\n    const inputPtr = __retain(__lowerStaticArray(chunkInput, 4, 2));\n\n    const outputPtr = __retain(__lowerStaticArray(chunkOutput, 4, 2));\n\n    try {\n      exports.__setArgumentsLength(4);\n\n      const count = exports.resample(inputPtr, outputPtr, interpVal, tolerance) >>> 0;\n      dstCount -= prefixCount;\n\n      __liftStaticArray(inputPtr, input, dstCount, count);\n\n      __liftStaticArray(outputPtr, output, dstCount * outputSize, count * outputSize);\n\n      dstCount += count;\n    } finally {\n      __release(inputPtr);\n\n      __release(outputPtr);\n\n      exports.__collect();\n    }\n  } // console.log(`Memory: ${exports.memory.buffer.byteLength} bytes`);\n\n\n  return dstCount;\n} ///////////////////////////////////////////////////////////////////////////////\n// INTERNAL\n///////////////////////////////////////////////////////////////////////////////\n\nfunction __assert(cond, msg) {\n  if (!cond) throw new Error(msg);\n}\n\nfunction __retain(ptr) {\n  exports.__pin(ptr);\n\n  return ptr;\n}\n\nfunction __release(ptr) {\n  exports.__unpin(ptr);\n\n  return ptr;\n}\n\nfunction __liftString(ptr) {\n  if (!ptr) return null;\n  const end = ptr + new Uint32Array(exports.memory.buffer)[ptr - 4 >>> 2] >>> 1,\n        memoryU16 = new Uint16Array(exports.memory.buffer);\n  let start = ptr >>> 1,\n      string = '';\n\n  while (end - start > 1024) string += String.fromCharCode(...memoryU16.subarray(start, start += 1024));\n\n  return string + String.fromCharCode(...memoryU16.subarray(start, end));\n}\n\nfunction __lowerStaticArray(values, id, align) {\n  const ptr = exports.__pin(exports.__new(values.length << align, id)) >>> 0;\n  new Float32Array(exports.memory.buffer, ptr, values.length).set(values);\n\n  exports.__unpin(ptr);\n\n  return ptr;\n}\n\nfunction __liftStaticArray(ptr, values, offset, count) {\n  values.set(new Float32Array(exports.memory.buffer, ptr, count), offset);\n}\n\nfunction __abort(messagePtr, fileNamePtr, lineNumber, columnNumber) {\n  const message = __liftString(messagePtr >>> 0);\n\n  const fileName = __liftString(fileNamePtr >>> 0);\n\n  lineNumber = lineNumber >>> 0;\n  columnNumber = columnNumber >>> 0;\n\n  (() => {\n    throw Error(`${message} in ${fileName}:${lineNumber}:${columnNumber}`);\n  })();\n}\n\nexport { ready, resample, resampleDebug };\n//# sourceMappingURL=keyframe-resample-browser.modern.js.map\n","import {\n\tAccessor,\n\tAnimationSampler,\n\tComponentTypeToTypedArray,\n\tDocument,\n\tGLTF,\n\tMathUtils,\n\tPropertyType,\n\tRoot,\n\tTransform,\n\tTransformContext,\n\tTypedArray,\n} from '@gltf-transform/core';\nimport { dedup } from './dedup.js';\nimport { createTransform, isTransformPending } from './utils.js';\nimport { resampleDebug } from 'keyframe-resample';\n\nconst NAME = 'resample';\n\nconst EMPTY_ARRAY = new Float32Array(0);\n\nexport interface ResampleOptions {\n\tready?: Promise<void>;\n\tresample?: unknown; // glTF-Transform/issues/996\n\ttolerance?: number;\n}\n\nconst RESAMPLE_DEFAULTS: Required<ResampleOptions> = {\n\tready: Promise.resolve(),\n\tresample: resampleDebug,\n\ttolerance: 1e-4,\n};\n\n/**\n * Resample {@link Animation}s, losslessly deduplicating keyframes to reduce file size. Duplicate\n * keyframes are commonly present in animation 'baked' by the authoring software to apply IK\n * constraints or other software-specific features. Based on THREE.KeyframeTrack.optimize().\n *\n * Result: (0,0,0,0,1,1,1,0,0,0,0,0,0,0) → (0,0,1,1,0,0)\n *\n * Example:\n *\n * ```\n * import { ready, resample } from 'keyframe-resample';\n *\n * // JavaScript (slower)\n * await document.transform(resample());\n *\n * // WebAssembly (faster)\n * await document.transform(resample({ ready, resample }));\n * ```\n *\n * @category Transforms\n */\nexport function resample(_options: ResampleOptions = RESAMPLE_DEFAULTS): Transform {\n\tconst options = { ...RESAMPLE_DEFAULTS, ..._options } as Required<ResampleOptions>;\n\n\treturn createTransform(NAME, async (document: Document, context?: TransformContext): Promise<void> => {\n\t\tconst accessorsVisited = new Set<Accessor>();\n\t\tconst srcAccessorCount = document.getRoot().listAccessors().length;\n\t\tconst logger = document.getLogger();\n\n\t\tconst ready = options.ready;\n\t\tconst resample = options.resample as typeof resampleDebug;\n\n\t\tawait ready;\n\n\t\tfor (const animation of document.getRoot().listAnimations()) {\n\t\t\tconst samplerTargetPaths = new Map<AnimationSampler, GLTF.AnimationChannelTargetPath>();\n\t\t\tfor (const channel of animation.listChannels()) {\n\t\t\t\tsamplerTargetPaths.set(channel.getSampler()!, channel.getTargetPath()!);\n\t\t\t}\n\n\t\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\t\tconst samplerInterpolation = sampler.getInterpolation();\n\n\t\t\t\tif (samplerInterpolation === 'STEP' || samplerInterpolation === 'LINEAR') {\n\t\t\t\t\tconst input = sampler.getInput()!;\n\t\t\t\t\tconst output = sampler.getOutput()!;\n\n\t\t\t\t\taccessorsVisited.add(input);\n\t\t\t\t\taccessorsVisited.add(output);\n\n\t\t\t\t\t// prettier-ignore\n\t\t\t\t\tconst tmpTimes = toFloat32Array(\n\t\t\t\t\t\tinput.getArray()!,\n\t\t\t\t\t\tinput.getComponentType(),\n\t\t\t\t\t\tinput.getNormalized()\n\t\t\t\t\t);\n\t\t\t\t\tconst tmpValues = toFloat32Array(\n\t\t\t\t\t\toutput.getArray()!,\n\t\t\t\t\t\toutput.getComponentType(),\n\t\t\t\t\t\toutput.getNormalized()\n\t\t\t\t\t);\n\n\t\t\t\t\tconst elementSize = tmpValues.length / tmpTimes.length;\n\t\t\t\t\tconst srcCount = tmpTimes.length;\n\t\t\t\t\tlet dstCount: number;\n\n\t\t\t\t\tif (samplerInterpolation === 'STEP') {\n\t\t\t\t\t\tdstCount = resample(tmpTimes, tmpValues, 'step', options.tolerance);\n\t\t\t\t\t} else if (samplerTargetPaths.get(sampler) === 'rotation') {\n\t\t\t\t\t\tdstCount = resample(tmpTimes, tmpValues, 'slerp', options.tolerance);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdstCount = resample(tmpTimes, tmpValues, 'lerp', options.tolerance);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (dstCount < srcCount) {\n\t\t\t\t\t\t// Clone the input/output accessors, without cloning their underlying\n\t\t\t\t\t\t// arrays. Then assign the resampled data.\n\t\t\t\t\t\tconst srcTimes = input.getArray()!;\n\t\t\t\t\t\tconst srcValues = output.getArray()!;\n\n\t\t\t\t\t\tconst dstTimes = fromFloat32Array(\n\t\t\t\t\t\t\tnew Float32Array(tmpTimes.buffer, tmpTimes.byteOffset, dstCount),\n\t\t\t\t\t\t\tinput.getComponentType(),\n\t\t\t\t\t\t\tinput.getNormalized()\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst dstValues = fromFloat32Array(\n\t\t\t\t\t\t\tnew Float32Array(tmpValues.buffer, tmpValues.byteOffset, dstCount * elementSize),\n\t\t\t\t\t\t\toutput.getComponentType(),\n\t\t\t\t\t\t\toutput.getNormalized()\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tinput.setArray(EMPTY_ARRAY);\n\t\t\t\t\t\toutput.setArray(EMPTY_ARRAY);\n\n\t\t\t\t\t\tsampler.setInput(input.clone().setArray(dstTimes));\n\t\t\t\t\t\tsampler.setOutput(output.clone().setArray(dstValues));\n\n\t\t\t\t\t\tinput.setArray(srcTimes);\n\t\t\t\t\t\toutput.setArray(srcValues);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const accessor of Array.from(accessorsVisited.values())) {\n\t\t\tconst used = accessor.listParents().some((p) => !(p instanceof Root));\n\t\t\tif (!used) accessor.dispose();\n\t\t}\n\n\t\t// Resampling may result in duplicate input or output sampler\n\t\t// accessors. Find and remove the duplicates after processing.\n\t\tconst dstAccessorCount = document.getRoot().listAccessors().length;\n\t\tif (dstAccessorCount > srcAccessorCount && !isTransformPending(context, NAME, 'dedup')) {\n\t\t\tawait document.transform(dedup({ propertyTypes: [PropertyType.ACCESSOR] }));\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/** Returns a copy of the source array, as a denormalized Float32Array. */\nfunction toFloat32Array(\n\tsrcArray: TypedArray,\n\tcomponentType: GLTF.AccessorComponentType,\n\tnormalized: boolean\n): Float32Array {\n\tif (srcArray instanceof Float32Array) return srcArray.slice();\n\tconst dstArray = new Float32Array(srcArray);\n\tif (!normalized) return dstArray;\n\n\tfor (let i = 0; i < dstArray.length; i++) {\n\t\tdstArray[i] = MathUtils.decodeNormalizedInt(dstArray[i], componentType);\n\t}\n\n\treturn dstArray;\n}\n\n/** Returns a copy of the source array, with specified component type and normalization. */\nfunction fromFloat32Array(\n\tsrcArray: Float32Array,\n\tcomponentType: GLTF.AccessorComponentType,\n\tnormalized: boolean\n): TypedArray {\n\tif (componentType === Accessor.ComponentType.FLOAT) return srcArray.slice();\n\tconst TypedArray = ComponentTypeToTypedArray[componentType];\n\tconst dstArray = new TypedArray(srcArray.length);\n\n\tfor (let i = 0; i < dstArray.length; i++) {\n\t\tdstArray[i] = normalized ? MathUtils.encodeNormalizedInt(srcArray[i], componentType) : srcArray[i];\n\t}\n\n\treturn dstArray;\n}\n","import { Accessor, AnimationChannel, AnimationSampler, Document, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'sequence';\n\nexport interface SequenceOptions {\n\t/** Frames per second, where one node is shown each frame. Default 10. */\n\tfps?: number;\n\t/** Pattern (regex) used to filter nodes for the sequence. Required. */\n\tpattern: RegExp;\n\t/** Name of the new animation. */\n\tname?: string;\n\t/** Whether to sort the nodes by name, or use original order. Default true. */\n\tsort?: boolean;\n}\n\nconst SEQUENCE_DEFAULTS: Required<SequenceOptions> = {\n\tname: '',\n\tfps: 10,\n\tpattern: /.*/,\n\tsort: true,\n};\n\n/**\n * Creates an {@link Animation} displaying each of the specified {@link Node}s sequentially.\n *\n * @category Transforms\n */\nexport function sequence(_options: SequenceOptions = SEQUENCE_DEFAULTS): Transform {\n\tconst options = { ...SEQUENCE_DEFAULTS, ..._options } as Required<SequenceOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst fps = options.fps;\n\n\t\t// Collect sequence nodes.\n\t\tconst sequenceNodes = root.listNodes().filter((node) => node.getName().match(options.pattern));\n\n\t\t// Sort by node name.\n\t\tif (options.sort) {\n\t\t\tsequenceNodes.sort((a, b) => (a.getName() > b.getName() ? 1 : -1));\n\t\t}\n\n\t\t// Create animation cycling visibility of each node.\n\t\tconst anim = doc.createAnimation(options.name);\n\t\tconst animBuffer = root.listBuffers()[0];\n\t\tsequenceNodes.forEach((node, i) => {\n\t\t\t// Create keyframe tracks that show each node for a single frame.\n\t\t\tlet inputArray;\n\t\t\tlet outputArray;\n\t\t\tif (i === 0) {\n\t\t\t\tinputArray = [i / fps, (i + 1) / fps];\n\t\t\t\toutputArray = [1, 1, 1, 0, 0, 0];\n\t\t\t} else if (i === sequenceNodes.length - 1) {\n\t\t\t\tinputArray = [(i - 1) / fps, i / fps];\n\t\t\t\toutputArray = [0, 0, 0, 1, 1, 1];\n\t\t\t} else {\n\t\t\t\tinputArray = [(i - 1) / fps, i / fps, (i + 1) / fps];\n\t\t\t\toutputArray = [0, 0, 0, 1, 1, 1, 0, 0, 0];\n\t\t\t}\n\n\t\t\t// Append channel to animation sequence.\n\t\t\tconst input = doc.createAccessor().setArray(new Float32Array(inputArray)).setBuffer(animBuffer);\n\t\t\tconst output = doc\n\t\t\t\t.createAccessor()\n\t\t\t\t.setArray(new Float32Array(outputArray))\n\t\t\t\t.setBuffer(animBuffer)\n\t\t\t\t.setType(Accessor.Type.VEC3);\n\t\t\tconst sampler = doc\n\t\t\t\t.createAnimationSampler()\n\t\t\t\t.setInterpolation(AnimationSampler.Interpolation.STEP)\n\t\t\t\t.setInput(input)\n\t\t\t\t.setOutput(output);\n\t\t\tconst channel = doc\n\t\t\t\t.createAnimationChannel()\n\t\t\t\t.setTargetNode(node)\n\t\t\t\t.setTargetPath(AnimationChannel.TargetPath.SCALE)\n\t\t\t\t.setSampler(sampler);\n\t\t\tanim.addSampler(sampler).addChannel(channel);\n\t\t});\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import { Accessor, Document, Primitive, PropertyType, Transform, TransformContext } from '@gltf-transform/core';\nimport {\n\tcreateTransform,\n\tformatDeltaOp,\n\tdeepListAttributes,\n\tremapAttribute,\n\tdeepSwapAttribute,\n\tisTransformPending,\n} from './utils.js';\nimport { weld } from './weld.js';\nimport type { MeshoptSimplifier } from 'meshoptimizer';\nimport { dedup } from './dedup.js';\n\nconst NAME = 'simplify';\n\n/** Options for the {@link simplify} function. */\nexport interface SimplifyOptions {\n\t/** MeshoptSimplifier instance. */\n\tsimplifier: unknown;\n\t/** Target ratio (0–1) of vertices to keep. Default: 0.0 (0%). */\n\tratio?: number;\n\t/** Limit on error, as a fraction of mesh radius. Default: 0.0001 (0.01%). */\n\terror?: number;\n\t/**\n\t * Whether to lock topological borders of the mesh. May be necessary when\n\t * adjacent 'chunks' of a large mesh (e.g. terrain) share a border, helping\n\t * to ensure no seams appear.\n\t */\n\tlockBorder?: boolean;\n}\n\nexport const SIMPLIFY_DEFAULTS: Required<Omit<SimplifyOptions, 'simplifier'>> = {\n\tratio: 0.0,\n\terror: 0.0001,\n\tlockBorder: false,\n};\n\n/**\n * Simplification algorithm, based on meshoptimizer, producing meshes with fewer\n * triangles and vertices. Simplification is lossy, but the algorithm aims to\n * preserve visual quality as much as possible for given parameters.\n *\n * The algorithm aims to reach the target 'ratio', while minimizing error. If\n * error exceeds the specified 'error' threshold, the algorithm will quit\n * before reaching the target ratio. Examples:\n *\n * - ratio=0.0, error=0.0001: Aims for maximum simplification, constrained to 0.01% error.\n * - ratio=0.5, error=0.0001: Aims for 50% simplification, constrained to 0.01% error.\n * - ratio=0.5, error=1: Aims for 50% simplification, unconstrained by error.\n *\n * Topology, particularly split vertices, will also limit the simplifier. For\n * best results, apply a {@link weld} operation before simplification.\n *\n * Example:\n *\n * ```javascript\n * import { simplify, weld } from '@gltf-transform/functions';\n * import { MeshoptSimplifier } from 'meshoptimizer';\n *\n * await document.transform(\n *   weld({ tolerance: 0.0001 }),\n *   simplify({ simplifier: MeshoptSimplifier, ratio: 0.75, error: 0.001 })\n * );\n * ```\n *\n * References:\n * - https://github.com/zeux/meshoptimizer/blob/master/js/README.md#simplifier\n *\n * @category Transforms\n */\nexport function simplify(_options: SimplifyOptions): Transform {\n\tconst options = { ...SIMPLIFY_DEFAULTS, ..._options } as Required<SimplifyOptions>;\n\n\tconst simplifier = options.simplifier as typeof MeshoptSimplifier | undefined;\n\n\tif (!simplifier) {\n\t\tthrow new Error(`${NAME}: simplifier dependency required — install \"meshoptimizer\".`);\n\t}\n\n\treturn createTransform(NAME, async (document: Document, context?: TransformContext): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\n\t\tawait simplifier.ready;\n\t\tawait document.transform(weld({ overwrite: false }));\n\n\t\t// Simplify mesh primitives.\n\t\tfor (const mesh of document.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tif (prim.getMode() !== Primitive.Mode.TRIANGLES) {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t`${NAME}: Skipping primitive of mesh \"${mesh.getName()}\": Requires TRIANGLES draw mode.`\n\t\t\t\t\t);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tsimplifyPrimitive(document, prim, options);\n\t\t\t}\n\t\t}\n\n\t\t// Where multiple primitive indices point into the same vertex streams, simplification\n\t\t// may write duplicate streams. Find and remove the duplicates after processing.\n\t\tif (!isTransformPending(context, NAME, 'dedup')) {\n\t\t\tawait document.transform(dedup({ propertyTypes: [PropertyType.ACCESSOR] }));\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nexport function simplifyPrimitive(document: Document, prim: Primitive, _options: SimplifyOptions): Primitive {\n\tconst options = { ...SIMPLIFY_DEFAULTS, ..._options } as Required<SimplifyOptions>;\n\tconst simplifier = options.simplifier as typeof MeshoptSimplifier;\n\n\tconst logger = document.getLogger();\n\tconst position = prim.getAttribute('POSITION')!;\n\tconst srcIndices = prim.getIndices()!;\n\tconst srcVertexCount = position.getCount();\n\n\tlet positionArray = position.getArray()!;\n\tlet indicesArray = srcIndices.getArray()!;\n\n\t// (1) Gather attributes and indices in Meshopt-compatible format.\n\n\tif (position.getComponentType() !== Accessor.ComponentType.FLOAT) {\n\t\tif (position.getNormalized()) {\n\t\t\tconst src = positionArray;\n\t\t\tconst dst = new Float32Array(src.length);\n\n\t\t\t// Dequantize.\n\t\t\tfor (let i = 0, il = position.getCount(), el = [] as number[]; i < il; i++) {\n\t\t\t\tel = position.getElement(i, el);\n\t\t\t\tposition.setArray(dst).setElement(i, el).setArray(src);\n\t\t\t}\n\n\t\t\tpositionArray = dst;\n\t\t} else {\n\t\t\tpositionArray = new Float32Array(positionArray);\n\t\t}\n\t}\n\n\tif (srcIndices.getComponentType() !== Accessor.ComponentType.UNSIGNED_INT) {\n\t\tindicesArray = new Uint32Array(indicesArray);\n\t}\n\n\t// (2) Run simplification.\n\n\tconst targetCount = Math.floor((options.ratio * srcVertexCount) / 3) * 3;\n\tconst [dstIndicesArray, error] = simplifier.simplify(\n\t\tindicesArray as Uint32Array,\n\t\tpositionArray as Float32Array,\n\t\t3,\n\t\ttargetCount,\n\t\toptions.error,\n\t\toptions.lockBorder ? ['LockBorder'] : []\n\t);\n\n\tconst [remap, unique] = simplifier.compactMesh(dstIndicesArray);\n\n\tlogger.debug(`${NAME}: ${formatDeltaOp(position.getCount(), unique)} vertices, error: ${error.toFixed(4)}.`);\n\n\t// (3) Write vertex attributes.\n\n\tfor (const srcAttribute of deepListAttributes(prim)) {\n\t\tconst dstAttribute = srcAttribute.clone();\n\t\tremapAttribute(dstAttribute, remap, unique);\n\t\tdeepSwapAttribute(prim, srcAttribute, dstAttribute);\n\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t}\n\n\t// (4) Write indices.\n\n\tconst dstIndices = srcIndices.clone();\n\tdstIndices.setArray(srcVertexCount <= 65534 ? new Uint16Array(dstIndicesArray) : dstIndicesArray);\n\tprim.setIndices(dstIndices);\n\tif (srcIndices.listParents().length === 1) srcIndices.dispose();\n\n\treturn prim;\n}\n","import { Document, MathUtils, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'sparse';\n\n/** Options for the {@link sparse} function. */\nexport interface SparseOptions {\n\t/**\n\t * Threshold ratio used to determine when an accessor should be sparse.\n\t * Default: 1 / 3.\n\t */\n\tratio: number;\n}\n\nconst SPARSE_DEFAULTS: Required<SparseOptions> = {\n\tratio: 1 / 3,\n};\n\n/**\n * Scans all {@link Accessor Accessors} in the Document, detecting whether each Accessor\n * would benefit from sparse data storage. Currently, sparse data storage is used only\n * when many values (≥ ratio) are zeroes. Particularly for assets using morph target\n * (\"shape key\") animation, sparse data storage may significantly reduce file sizes.\n *\n * Example:\n *\n * ```ts\n * import { sparse } from '@gltf-transform/functions';\n *\n * accessor.getArray(); // → [ 0, 0, 0, 0, 0, 25.0, 0, 0, ... ]\n * accessor.getSparse(); // → false\n *\n * await document.transform(sparse({ratio: 1 / 10}));\n *\n * accessor.getSparse(); // → true\n * ```\n *\n * @experimental\n * @category Transforms\n */\nexport function sparse(_options: SparseOptions = SPARSE_DEFAULTS): Transform {\n\tconst options = { ...SPARSE_DEFAULTS, ..._options } as Required<SparseOptions>;\n\n\tconst ratio = options.ratio;\n\tif (ratio < 0 || ratio > 1) {\n\t\tthrow new Error(`${NAME}: Ratio must be between 0 and 1.`);\n\t}\n\n\treturn createTransform(NAME, (document: Document): void => {\n\t\tconst root = document.getRoot();\n\t\tconst logger = document.getLogger();\n\n\t\tlet modifiedCount = 0;\n\n\t\tfor (const accessor of root.listAccessors()) {\n\t\t\tconst count = accessor.getCount();\n\t\t\tconst base = Array(accessor.getElementSize()).fill(0);\n\t\t\tconst el = Array(accessor.getElementSize()).fill(0);\n\n\t\t\tlet nonZeroCount = 0;\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\taccessor.getElement(i, el);\n\t\t\t\tif (!MathUtils.eq(el, base, 0)) nonZeroCount++;\n\t\t\t\tif (nonZeroCount / count >= ratio) break;\n\t\t\t}\n\n\t\t\tconst sparse = nonZeroCount / count < ratio;\n\t\t\tif (sparse !== accessor.getSparse()) {\n\t\t\t\taccessor.setSparse(sparse);\n\t\t\t\tmodifiedCount++;\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Updated ${modifiedCount} accessors.`);\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import ndarray from 'ndarray';\nimport { lanczos2, lanczos3 } from 'ndarray-lanczos';\nimport { getPixels, savePixels } from 'ndarray-pixels';\nimport type { Document, Transform, vec2 } from '@gltf-transform/core';\nimport { listTextureSlots } from './list-texture-slots.js';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'textureResize';\n\n/** Options for the {@link textureResize} function. */\nexport interface TextureResizeOptions {\n\t/**\n\t * Maximum width/height to enforce, preserving aspect ratio. For example,\n\t * a 4096x8192 texture, resized with limit [2048, 2048] will be reduced\n\t * to 1024x2048.\n\t */\n\tsize: vec2;\n\t/** Resampling filter method. LANCZOS3 is sharper, LANCZOS2 is smoother. */\n\tfilter?: TextureResizeFilter;\n\t/** Pattern identifying textures to resize, matched to name or URI. */\n\tpattern?: RegExp | null;\n\t/** Pattern to match slots usage for resizing. */\n\tslots?: RegExp | null;\n}\n\n/** Resampling filter methods. LANCZOS3 is sharper, LANCZOS2 is smoother. */\nexport enum TextureResizeFilter {\n\t/** Lanczos3 (sharp) */\n\tLANCZOS3 = 'lanczos3',\n\t/** Lanczos2 (smooth) */\n\tLANCZOS2 = 'lanczos2',\n}\n\nexport const TEXTURE_RESIZE_DEFAULTS: TextureResizeOptions = {\n\tsize: [2048, 2048],\n\tfilter: TextureResizeFilter.LANCZOS3,\n\tpattern: null,\n\tslots: null,\n};\n\n/**\n * Resize PNG or JPEG {@link Texture Textures}, with [Lanczos filtering](https://en.wikipedia.org/wiki/Lanczos_algorithm).\n *\n * Implementation provided by [ndarray-lanczos](https://github.com/donmccurdy/ndarray-lanczos)\n * package, which works in Web and Node.js environments. For a faster and more robust implementation\n * based on Sharp (available only in Node.js), use {@link textureCompress} with the 'resize' option.\n *\n * @category Transforms\n */\nexport function textureResize(_options: TextureResizeOptions = TEXTURE_RESIZE_DEFAULTS): Transform {\n\tconst options = { ...TEXTURE_RESIZE_DEFAULTS, ..._options } as Required<TextureResizeOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tfor (const texture of doc.getRoot().listTextures()) {\n\t\t\tconst name = texture.getName();\n\t\t\tconst uri = texture.getURI();\n\t\t\tconst match = !options.pattern || options.pattern.test(name) || options.pattern.test(uri);\n\t\t\tif (!match) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping, excluded by \"pattern\" parameter.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (texture.getMimeType() !== 'image/png' && texture.getMimeType() !== 'image/jpeg') {\n\t\t\t\tlogger.warn(`${NAME}: Skipping, unsupported texture type \"${texture.getMimeType()}\".`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst slots = listTextureSlots(texture);\n\t\t\tif (options.slots && !slots.some((slot) => options.slots?.test(slot))) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping, [${slots.join(', ')}] excluded by \"slots\" parameter.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst [maxWidth, maxHeight] = options.size;\n\t\t\tconst [srcWidth, srcHeight] = texture.getSize()!;\n\n\t\t\tif (srcWidth <= maxWidth && srcHeight <= maxHeight) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping, not within size range.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet dstWidth = srcWidth;\n\t\t\tlet dstHeight = srcHeight;\n\n\t\t\tif (dstWidth > maxWidth) {\n\t\t\t\tdstHeight = Math.floor(dstHeight * (maxWidth / dstWidth));\n\t\t\t\tdstWidth = maxWidth;\n\t\t\t}\n\n\t\t\tif (dstHeight > maxHeight) {\n\t\t\t\tdstWidth = Math.floor(dstWidth * (maxHeight / dstHeight));\n\t\t\t\tdstHeight = maxHeight;\n\t\t\t}\n\n\t\t\tconst srcImage = texture.getImage()!;\n\t\t\tconst srcPixels = (await getPixels(srcImage, texture.getMimeType())) as ndarray.NdArray<Uint8Array>;\n\t\t\tconst dstPixels = ndarray(new Uint8Array(dstWidth * dstHeight * 4), [dstWidth, dstHeight, 4]);\n\n\t\t\tlogger.debug(`${NAME}: Resizing \"${uri || name}\", ${srcPixels.shape} → ${dstPixels.shape}...`);\n\t\t\tlogger.debug(`${NAME}: Slots → [${slots.join(', ')}]`);\n\n\t\t\ttry {\n\t\t\t\toptions.filter === TextureResizeFilter.LANCZOS3\n\t\t\t\t\t? lanczos3(srcPixels, dstPixels)\n\t\t\t\t\t: lanczos2(srcPixels, dstPixels);\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof Error) {\n\t\t\t\t\tlogger.warn(`${NAME}: Failed to resize \"${uri || name}\": \"${e.message}\".`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow e;\n\t\t\t}\n\n\t\t\ttexture.setImage(await savePixels(dstPixels, texture.getMimeType()));\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import { BufferUtils, Document, ImageUtils, Texture, TextureChannel, Transform, vec2 } from '@gltf-transform/core';\nimport { EXTTextureAVIF, EXTTextureWebP } from '@gltf-transform/extensions';\nimport { getTextureChannelMask } from './list-texture-channels.js';\nimport { listTextureSlots } from './list-texture-slots.js';\nimport type sharp from 'sharp';\nimport { createTransform, formatBytes } from './utils.js';\nimport { TextureResizeFilter } from './texture-resize.js';\n\nconst NAME = 'textureCompress';\n\ntype Format = (typeof FORMATS)[number];\nconst FORMATS = ['jpeg', 'png', 'webp', 'avif'] as const;\nconst SUPPORTED_MIME_TYPES = ['image/jpeg', 'image/png', 'image/webp', 'image/avif'];\n\nexport interface TextureCompressOptions {\n\t/** Instance of the Sharp encoder, which must be installed from the\n\t * 'sharp' package and provided by the caller.\n\t */\n\tencoder: unknown;\n\t/**\n\t * Target image format. If specified, included textures in other formats\n\t * will be converted. Default: original format.\n\t */\n\ttargetFormat?: Format;\n\t/**\n\t * Resizes textures to given maximum width/height, preserving aspect ratio.\n\t * For example, a 4096x8192 texture, resized with limit [2048, 2048] will\n\t * be reduced to 1024x2048.\n\t */\n\tresize?: vec2;\n\t/** Interpolation used if resizing. Default: TextureResizeFilter.LANCZOS3. */\n\tresizeFilter?: TextureResizeFilter;\n\t/** Pattern identifying textures to compress, matched to name or URI. */\n\tpattern?: RegExp | null;\n\t/** Pattern matching the format(s) to be compressed or converted. */\n\tformats?: RegExp | null;\n\t/** Pattern matching the material texture slot(s) to be compressed or converted. */\n\tslots?: RegExp | null;\n\n\t/** Quality, 1-100. Default: auto. */\n\tquality?: number | null;\n\t/** Level of CPU effort to reduce file size, 0-100. PNG, WebP, and AVIF only. Default: auto. */\n\teffort?: number | null;\n\t/** Use lossless compression mode. WebP and AVIF only. Default: false. */\n\tlossless?: boolean;\n\t/** Use near lossless compression mode. WebP only. Default: false. */\n\tnearLossless?: boolean;\n}\n\nexport type CompressTextureOptions = Omit<TextureCompressOptions, 'pattern' | 'formats' | 'slots'>;\n\nexport const TEXTURE_COMPRESS_DEFAULTS: Required<Omit<TextureCompressOptions, 'resize' | 'targetFormat' | 'encoder'>> =\n\t{\n\t\tresizeFilter: TextureResizeFilter.LANCZOS3,\n\t\tpattern: null,\n\t\tformats: null,\n\t\tslots: null,\n\t\tquality: null,\n\t\teffort: null,\n\t\tlossless: false,\n\t\tnearLossless: false,\n\t};\n\n/**\n * Optimizes images, optionally resizing or converting to JPEG, PNG, WebP, or AVIF formats.\n *\n * Requires `sharp`, and is available only in Node.js environments.\n *\n * Example:\n *\n * ```javascript\n * import { textureCompress } from '@gltf-transform/functions';\n * import sharp from 'sharp';\n *\n * // (A) Optimize without conversion.\n * await document.transform(\n * \ttextureCompress({encoder: sharp})\n * );\n *\n * // (B) Optimize and convert images to WebP.\n * await document.transform(\n * \ttextureCompress({\n * \t\tencoder: sharp,\n * \t\ttargetFormat: 'webp',\n * \t\tslots: /^(?!normalTexture).*$/ // exclude normal maps\n * \t})\n * );\n * ```\n *\n * @category Transforms\n */\nexport function textureCompress(_options: TextureCompressOptions): Transform {\n\tconst options = { ...TEXTURE_COMPRESS_DEFAULTS, ..._options } as Required<TextureCompressOptions>;\n\tconst encoder = options.encoder as typeof sharp | null;\n\tconst targetFormat = options.targetFormat as Format | undefined;\n\tconst patternRe = options.pattern;\n\tconst formatsRe = options.formats;\n\tconst slotsRe = options.slots;\n\n\tif (!encoder) {\n\t\tthrow new Error(`${targetFormat}: encoder dependency required — install \"sharp\".`);\n\t}\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tconst textures = document.getRoot().listTextures();\n\n\t\tawait Promise.all(\n\t\t\ttextures.map(async (texture, textureIndex) => {\n\t\t\t\tconst slots = listTextureSlots(texture);\n\t\t\t\tconst channels = getTextureChannelMask(texture);\n\t\t\t\tconst textureLabel =\n\t\t\t\t\ttexture.getURI() ||\n\t\t\t\t\ttexture.getName() ||\n\t\t\t\t\t`${textureIndex + 1}/${document.getRoot().listTextures().length}`;\n\t\t\t\tconst prefix = `${NAME}(${textureLabel})`;\n\n\t\t\t\t// FILTER: Exclude textures that don't match (a) 'slots' or (b) expected formats.\n\n\t\t\t\tif (!SUPPORTED_MIME_TYPES.includes(texture.getMimeType())) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, unsupported texture type \"${texture.getMimeType()}\".`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (patternRe && !patternRe.test(texture.getName()) && !patternRe.test(texture.getURI())) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, excluded by \"pattern\" parameter.`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (formatsRe && !formatsRe.test(texture.getMimeType())) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, \"${texture.getMimeType()}\" excluded by \"formats\" parameter.`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (slotsRe && slots.length && !slots.some((slot) => slotsRe.test(slot))) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, [${slots.join(', ')}] excluded by \"slots\" parameter.`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (options.targetFormat === 'jpeg' && channels & TextureChannel.A) {\n\t\t\t\t\tlogger.warn(`${prefix}: Skipping, [${slots.join(', ')}] requires alpha channel.`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst srcFormat = getFormat(texture);\n\t\t\t\tconst dstFormat = targetFormat || srcFormat;\n\t\t\t\tlogger.debug(`${prefix}: Format = ${srcFormat} → ${dstFormat}`);\n\t\t\t\tlogger.debug(`${prefix}: Slots = [${slots.join(', ')}]`);\n\n\t\t\t\tconst srcImage = texture.getImage()!;\n\t\t\t\tconst srcByteLength = srcImage.byteLength;\n\n\t\t\t\tawait compressTexture(texture, options);\n\n\t\t\t\tconst dstImage = texture.getImage()!;\n\t\t\t\tconst dstByteLength = dstImage.byteLength;\n\n\t\t\t\tconst flag = srcImage === dstImage ? ' (SKIPPED' : '';\n\n\t\t\t\tlogger.debug(`${prefix}: Size = ${formatBytes(srcByteLength)} → ${formatBytes(dstByteLength)}${flag}`);\n\t\t\t})\n\t\t);\n\n\t\t// Attach EXT_texture_webp if needed.\n\t\tconst webpExtension = document.createExtension(EXTTextureWebP);\n\t\tif (textures.some((texture) => texture.getMimeType() === 'image/webp')) {\n\t\t\twebpExtension.setRequired(true);\n\t\t} else {\n\t\t\twebpExtension.dispose();\n\t\t}\n\n\t\t// Attach EXT_texture_avif if needed.\n\t\tconst avifExtension = document.createExtension(EXTTextureAVIF);\n\t\tif (textures.some((texture) => texture.getMimeType() === 'image/avif')) {\n\t\t\tavifExtension.setRequired(true);\n\t\t} else {\n\t\t\tavifExtension.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/**\n * Optimizes a single {@link Texture}, optionally resizing or converting to JPEG, PNG, WebP, or AVIF formats.\n *\n * Requires `sharp`, and is available only in Node.js environments.\n *\n * Example:\n *\n * ```javascript\n * import { compressTexture } from '@gltf-transform/functions';\n * import sharp from 'sharp';\n *\n * const texture = document.getRoot().listTextures()\n * \t.find((texture) => texture.getName() === 'MyTexture');\n *\n * await compressTexture(texture, {\n * \tencoder: sharp,\n * \ttargetFormat: 'webp',\n * \tresize: [1024, 1024]\n * });\n * ```\n */\nexport async function compressTexture(texture: Texture, _options: CompressTextureOptions) {\n\tconst options = { ...TEXTURE_COMPRESS_DEFAULTS, ..._options } as Required<CompressTextureOptions>;\n\tconst encoder = options.encoder as typeof sharp | null;\n\n\tif (!encoder) {\n\t\tthrow new Error(`${options.targetFormat}: encoder dependency required — install \"sharp\".`);\n\t}\n\n\tconst srcFormat = getFormat(texture);\n\tconst dstFormat = options.targetFormat || srcFormat;\n\tconst srcMimeType = texture.getMimeType();\n\tconst dstMimeType = `image/${dstFormat}`;\n\n\tlet encoderOptions: sharp.JpegOptions | sharp.PngOptions | sharp.WebpOptions | sharp.AvifOptions = {};\n\n\tswitch (dstFormat) {\n\t\tcase 'jpeg':\n\t\t\tencoderOptions = { quality: options.quality } as sharp.JpegOptions;\n\t\t\tbreak;\n\t\tcase 'png':\n\t\t\tencoderOptions = {\n\t\t\t\tquality: options.quality,\n\t\t\t\teffort: remap(options.effort, 100, 10),\n\t\t\t} as sharp.PngOptions;\n\t\t\tbreak;\n\t\tcase 'webp':\n\t\t\tencoderOptions = {\n\t\t\t\tquality: options.quality,\n\t\t\t\teffort: remap(options.effort, 100, 6),\n\t\t\t\tlossless: options.lossless,\n\t\t\t\tnearLossless: options.nearLossless,\n\t\t\t} as sharp.WebpOptions;\n\t\t\tbreak;\n\t\tcase 'avif':\n\t\t\tencoderOptions = {\n\t\t\t\tquality: options.quality,\n\t\t\t\teffort: remap(options.effort, 100, 9),\n\t\t\t\tlossless: options.lossless,\n\t\t\t} as sharp.AvifOptions;\n\t\t\tbreak;\n\t}\n\n\tconst srcImage = texture.getImage()!;\n\tconst instance = encoder(srcImage).toFormat(dstFormat, encoderOptions);\n\n\t// Resize.\n\tif (options.resize) {\n\t\tinstance.resize(options.resize[0], options.resize[1], {\n\t\t\tfit: 'inside',\n\t\t\tkernel: options.resizeFilter,\n\t\t\twithoutEnlargement: true,\n\t\t});\n\t}\n\n\tconst dstImage = BufferUtils.toView(await instance.toBuffer());\n\n\tconst srcByteLength = srcImage.byteLength;\n\tconst dstByteLength = dstImage.byteLength;\n\n\tif (srcMimeType === dstMimeType && dstByteLength >= srcByteLength) {\n\t\t// Skip if src/dst formats match and dst is larger than the original.\n\t\treturn;\n\t} else if (srcMimeType === dstMimeType) {\n\t\t// Overwrite if src/dst formats match and dst is smaller than the original.\n\t\ttexture.setImage(dstImage);\n\t} else {\n\t\t// Overwrite, then update path and MIME type if src/dst formats differ.\n\t\tconst srcExtension = ImageUtils.mimeTypeToExtension(srcMimeType);\n\t\tconst dstExtension = ImageUtils.mimeTypeToExtension(dstMimeType);\n\t\tconst dstURI = texture.getURI().replace(new RegExp(`\\\\.${srcExtension}$`), `.${dstExtension}`);\n\t\ttexture.setImage(dstImage).setMimeType(dstMimeType).setURI(dstURI);\n\t}\n}\n\nfunction getFormat(texture: Texture): Format {\n\tconst mimeType = texture.getMimeType();\n\tconst format = mimeType.split('/').pop() as Format | undefined;\n\tif (!format || !FORMATS.includes(format)) {\n\t\tthrow new Error(`Unknown MIME type \"${mimeType}\".`);\n\t}\n\treturn format;\n}\n\nfunction remap(value: number | null | undefined, srcMax: number, dstMax: number): number | null {\n\tif (value == null) return null;\n\treturn Math.round((value / srcMax) * dstMax);\n}\n","import { Accessor, Document, ILogger, Primitive, Transform, TypedArray, uuid } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'tangents';\n\n/** Options for the {@link tangents} function. */\nexport interface TangentsOptions {\n\t/**\n\t * Callback function to generate tangents from position, uv, and normal attributes.\n\t * Generally, users will want to provide the `generateTangents` from the\n\t * [mikktspace](https://github.com/donmccurdy/mikktspace-wasm) library, which is not\n\t * included by default.\n\t */\n\tgenerateTangents?: (pos: Float32Array, norm: Float32Array, uv: Float32Array) => Float32Array;\n\t/** Whether to overwrite existing `TANGENT` attributes. */\n\toverwrite?: boolean;\n}\n\nconst TANGENTS_DEFAULTS: Required<Omit<TangentsOptions, 'generateTangents'>> = {\n\toverwrite: false,\n};\n\n/**\n * Generates MikkTSpace vertex tangents for mesh primitives, which may fix rendering issues\n * occuring with some baked normal maps. Requires access to the [mikktspace](https://github.com/donmccurdy/mikktspace-wasm)\n * WASM package, or equivalent.\n *\n * Example:\n *\n * ```ts\n * import { generateTangents } from 'mikktspace';\n * import { tangents } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \ttangents({generateTangents})\n * );\n * ```\n *\n * @category Transforms\n */\nexport function tangents(_options: TangentsOptions = TANGENTS_DEFAULTS): Transform {\n\tif (!_options.generateTangents) {\n\t\tthrow new Error(`${NAME}: generateTangents callback required — install \"mikktspace\".`);\n\t}\n\n\tconst options = { ...TANGENTS_DEFAULTS, ..._options } as Required<TangentsOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst attributeIDs = new Map<TypedArray, string>();\n\t\tconst tangentCache = new Map<string, Accessor>();\n\t\tlet modified = 0;\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tconst meshName = mesh.getName();\n\t\t\tconst meshPrimitives = mesh.listPrimitives();\n\n\t\t\tfor (let i = 0; i < meshPrimitives.length; i++) {\n\t\t\t\tconst prim = meshPrimitives[i];\n\n\t\t\t\t// Skip primitives for which we can't compute tangents.\n\t\t\t\tif (!filterPrimitive(prim, logger, meshName, i, options.overwrite)) continue;\n\n\t\t\t\tconst texcoordSemantic = getNormalTexcoord(prim);\n\n\t\t\t\t// Nullability conditions checked by filterPrimitive() above.\n\t\t\t\tconst position = prim.getAttribute('POSITION')!.getArray()!;\n\t\t\t\tconst normal = prim.getAttribute('NORMAL')!.getArray()!;\n\t\t\t\tconst texcoord = prim.getAttribute(texcoordSemantic)!.getArray()!;\n\n\t\t\t\t// Compute UUIDs for each attribute.\n\t\t\t\tconst positionID = attributeIDs.get(position) || uuid();\n\t\t\t\tattributeIDs.set(position, positionID);\n\n\t\t\t\tconst normalID = attributeIDs.get(normal) || uuid();\n\t\t\t\tattributeIDs.set(normal, normalID);\n\n\t\t\t\tconst texcoordID = attributeIDs.get(texcoord) || uuid();\n\t\t\t\tattributeIDs.set(texcoord, texcoordID);\n\n\t\t\t\t// Dispose of previous TANGENT accessor if only used by this primitive (and Root).\n\t\t\t\tconst prevTangent = prim.getAttribute('TANGENT');\n\t\t\t\tif (prevTangent && prevTangent.listParents().length === 2) prevTangent.dispose();\n\n\t\t\t\t// If we've already computed tangents for this pos/norm/uv set, reuse them.\n\t\t\t\tconst attributeHash = `${positionID}|${normalID}|${texcoordID}`;\n\t\t\t\tlet tangent = tangentCache.get(attributeHash);\n\t\t\t\tif (tangent) {\n\t\t\t\t\tlogger.debug(`${NAME}: Found cache for primitive ${i} of mesh \"${meshName}\".`);\n\t\t\t\t\tprim.setAttribute('TANGENT', tangent);\n\t\t\t\t\tmodified++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise, generate tangents with the 'mikktspace' WASM library.\n\t\t\t\tlogger.debug(`${NAME}: Generating for primitive ${i} of mesh \"${meshName}\".`);\n\t\t\t\tconst tangentBuffer = prim.getAttribute('POSITION')!.getBuffer();\n\t\t\t\tconst tangentArray = options.generateTangents(\n\t\t\t\t\tposition instanceof Float32Array ? position : new Float32Array(position),\n\t\t\t\t\tnormal instanceof Float32Array ? normal : new Float32Array(normal),\n\t\t\t\t\ttexcoord instanceof Float32Array ? texcoord : new Float32Array(texcoord)\n\t\t\t\t);\n\n\t\t\t\t// See: https://github.com/KhronosGroup/glTF-Sample-Models/issues/174\n\t\t\t\tfor (let i = 3; i < tangentArray.length; i += 4) tangentArray[i] *= -1;\n\n\t\t\t\ttangent = doc.createAccessor().setBuffer(tangentBuffer).setArray(tangentArray).setType('VEC4');\n\t\t\t\tprim.setAttribute('TANGENT', tangent);\n\n\t\t\t\ttangentCache.set(attributeHash, tangent);\n\t\t\t\tmodified++;\n\t\t\t}\n\t\t}\n\n\t\tif (!modified) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found. See debug output.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\nfunction getNormalTexcoord(prim: Primitive): string {\n\tconst material = prim.getMaterial();\n\tif (!material) return 'TEXCOORD_0';\n\n\tconst normalTextureInfo = material.getNormalTextureInfo();\n\tif (!normalTextureInfo) return 'TEXCOORD_0';\n\n\tconst texcoord = normalTextureInfo.getTexCoord();\n\tconst semantic = `TEXCOORD_${texcoord}`;\n\tif (prim.getAttribute(semantic)) return semantic;\n\n\treturn 'TEXCOORD_0';\n}\n\nfunction filterPrimitive(prim: Primitive, logger: ILogger, meshName: string, i: number, overwrite: boolean): boolean {\n\tif (\n\t\tprim.getMode() !== Primitive.Mode.TRIANGLES ||\n\t\t!prim.getAttribute('POSITION') ||\n\t\t!prim.getAttribute('NORMAL') ||\n\t\t!prim.getAttribute('TEXCOORD_0')\n\t) {\n\t\tlogger.debug(\n\t\t\t`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": primitives must` +\n\t\t\t\t' have attributes=[POSITION, NORMAL, TEXCOORD_0] and mode=TRIANGLES.'\n\t\t);\n\t\treturn false;\n\t}\n\n\tif (prim.getAttribute('TANGENT') && !overwrite) {\n\t\tlogger.debug(`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": TANGENT found.`);\n\t\treturn false;\n\t}\n\n\tif (prim.getIndices()) {\n\t\t// TODO(feat): Do this automatically for qualifying primitives.\n\t\tlogger.warn(`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": primitives must` + ' be unwelded.');\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { KHRMaterialsUnlit } from '@gltf-transform/extensions';\n\n/**\n * @category Transforms\n */\nexport function unlit(): Transform {\n\treturn (doc: Document): void => {\n\t\tconst unlitExtension = doc.createExtension(KHRMaterialsUnlit) as KHRMaterialsUnlit;\n\t\tconst unlit = unlitExtension.createUnlit();\n\t\tdoc.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tmaterial.setExtension('KHR_materials_unlit', unlit);\n\t\t\t});\n\t};\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'unpartition';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface UnpartitionOptions {}\nconst UNPARTITION_DEFAULTS: Required<UnpartitionOptions> = {};\n\n/**\n * Removes partitions from the binary payload of a glTF file, so that the asset\n * contains at most one (1) `.bin` {@link Buffer}. This process reverses the\n * changes from a {@link partition} transform.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listBuffers(); // → [Buffer, Buffer, ...]\n *\n * await document.transform(unpartition());\n *\n * document.getRoot().listBuffers(); // → [Buffer]\n * ```\n *\n * @category Transforms\n */\nexport function unpartition(_options: UnpartitionOptions = UNPARTITION_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...UNPARTITION_DEFAULTS, ..._options } as Required<UnpartitionOptions>;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\n\t\tconst buffer = document.getRoot().listBuffers()[0];\n\t\tdocument\n\t\t\t.getRoot()\n\t\t\t.listAccessors()\n\t\t\t.forEach((a) => a.setBuffer(buffer));\n\t\tdocument\n\t\t\t.getRoot()\n\t\t\t.listBuffers()\n\t\t\t.forEach((b, index) => (index > 0 ? b.dispose() : null));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import type { Accessor, Document, Primitive, Transform, vec3 } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'vertexColorSpace';\n\n/** Options for the {@link vertexColorSpace} function. */\nexport interface ColorSpaceOptions {\n\t/** Input color space of vertex colors, to be converted to \"srgb-linear\". Required. */\n\tinputColorSpace: 'srgb' | 'srgb-linear' | 'sRGB';\n\t/** @deprecated Renamed to 'colorSpace'. */\n\tinputEncoding?: 'srgb' | 'srgb-linear' | 'sRGB';\n}\n\n/** @deprecated Renamed to {@link vertexColorSpace}. */\nexport const colorspace = vertexColorSpace;\n\n/**\n * Vertex color color space correction. The glTF format requires vertex colors to be stored\n * in Linear Rec. 709 D65 color space, and this function provides a way to correct vertex\n * colors that are (incorrectly) stored in sRGB.\n *\n * Example:\n *\n * ```typescript\n * import { vertexColorSpace } from '@gltf-transform/functions';\n *\n * await document.transform(\n *   vertexColorSpace({ inputColorSpace: 'srgb' })\n * );\n * ```\n *\n * @category Transforms\n */\nexport function vertexColorSpace(options: ColorSpaceOptions): Transform {\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\n\t\tconst inputColorSpace = (options.inputColorSpace || options.inputEncoding || '').toLowerCase();\n\n\t\tif (inputColorSpace === 'srgb-linear') {\n\t\t\tlogger.info(`${NAME}: Vertex colors already linear. Skipping conversion.`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (inputColorSpace !== 'srgb') {\n\t\t\tlogger.error(\n\t\t\t\t`${NAME}: Unknown input color space \"${inputColorSpace}\" – should be \"srgb\" or ` +\n\t\t\t\t\t'\"srgb-linear\". Skipping conversion.'\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst converted = new Set<Accessor>();\n\n\t\t// Source: THREE.Color\n\t\tfunction sRGBToLinear(c: number): number {\n\t\t\treturn c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n\t\t}\n\n\t\tfunction updatePrimitive(primitive: Primitive): void {\n\t\t\tconst color = [0, 0, 0] as vec3;\n\t\t\tlet attribute: Accessor | null;\n\t\t\tfor (let i = 0; (attribute = primitive.getAttribute(`COLOR_${i}`)); i++) {\n\t\t\t\tif (converted.has(attribute)) continue;\n\n\t\t\t\tfor (let j = 0; j < attribute.getCount(); j++) {\n\t\t\t\t\tattribute.getElement(j, color);\n\t\t\t\t\tcolor[0] = sRGBToLinear(color[0]);\n\t\t\t\t\tcolor[1] = sRGBToLinear(color[1]);\n\t\t\t\t\tcolor[2] = sRGBToLinear(color[2]);\n\t\t\t\t\tattribute.setElement(j, color);\n\t\t\t\t}\n\n\t\t\t\tconverted.add(attribute);\n\t\t\t}\n\t\t}\n\n\t\tdoc.getRoot()\n\t\t\t.listMeshes()\n\t\t\t.forEach((mesh) => mesh.listPrimitives().forEach(updatePrimitive));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n"],"names":["createTransform","name","fn","Object","defineProperty","value","isTransformPending","context","initial","pending","stack","lastIndexOf","async","rewriteTexture","source","target","srcImage","getImage","pixels","getPixels","getMimeType","i","shape","j","dstImage","savePixels","setImage","setMimeType","getGLPrimitiveCount","prim","indices","getIndices","position","getAttribute","getMode","Primitive","Mode","POINTS","getCount","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","Error","SetMap","constructor","this","_map","Map","size","has","k","add","v","entry","get","Set","set","keys","formatBytes","bytes","decimals","dm","Math","floor","log","parseFloat","pow","toFixed","formatLong","x","toString","replace","formatDeltaOp","a","b","abs","formatDelta","deepListAttributes","accessors","attribute","listAttributes","push","listTargets","Array","from","deepSwapAttribute","src","dst","swap","remapAttribute","remap","dstCount","elementSize","getElementSize","srcCount","srcArray","getArray","dstArray","slice","setArray","createIndices","count","maxIndex","array","Uint16Array","Uint32Array","length","createPrimGroupKey","document","Document","fromGraph","getGraph","material","getMaterial","getRoot","listMaterials","indexOf","listSemantics","sort","map","semantic","getComponentType","join","NAME","CENTER_DEFAULTS","pivot","center","_options","options","_extends","doc","logger","getLogger","root","isAnimated","listAnimations","listSkins","listScenes","forEach","scene","index","debug","bbox","getBounds","max","min","offset","offsetNode","createNode","setTranslation","listChildren","child","addChild","t","getTranslation","listNodeScenes","node","visited","parent","getParentNode","listParents","filter","Scene","clearNodeParent","scenes","setMatrix","getWorldMatrix","removeChild","ARRAY_TYPE","Float32Array","invert","out","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","multiply","b0","b1","b2","b3","create","glMatrix.ARRAY_TYPE","scale","normalize","y","z","len","sqrt","transformMat4","m","w","transformMat3","transformPrimitive","matrix","skipIndices","_prim$getIndices","applyMatrix","normal","applyNormalMatrix","tangent","applyTangentMatrix","el","il","getElement","vector","createVec3","setNormalized","normalMatrix","fromMat4","b21","transpose","normalizeVec3","setElement","v3","v4","createVec4","transformMesh","mesh","overwrite","srcPrim","listPrimitives","some","p","propertyType","PropertyType","MESH","dstPrim","clone","srcTarget","dstTarget","parents","flatMap","attributes","srcAttribute","PrimitiveTarget","dstAttribute","attributeSkipIndices","primSkipIndices","hypot","arguments","IDENTITY","clearNodeTransform","getMesh","localMatrix","getMatrix","MathUtils","eq","multiplyMat4","DEDUP_DEFAULTS","propertyTypes","ACCESSOR","TEXTURE","MATERIAL","SKIN","dedup","includes","indicesMap","attributeMap","inputMap","outputMap","meshes","listMeshes","primitive","accessor","hashAccessor","animation","sampler","listSamplers","getInput","getOutput","group","hash","getType","getNormalized","getSparse","hashSet","detectDuplicates","duplicates","aData","BufferUtils","toView","equals","total","hashGroup","values","input","output","dispose","dedupAccessors","textures","listTextures","bData","aSize","getSize","bSize","entries","property","Root","dedupImages","materials","skip","modifierCache","hasModifier","dedupMaterials","refs","listAccessors","numMeshes","uniqueMeshes","srcKeyItems","createPrimitiveKey","meshKey","targetMesh","ROOT","dedupMeshes","skins","dedupSkins","primKeyItems","prop","cache","graph","visitedNodes","edgeQueue","listParentEdges","edge","pop","getAttributes","modifyChild","getChild","childEdge","listChildEdges","DEQUANTIZE_DEFAULTS","pattern","dequantize","dequantizePrimitive","createExtension","KHRMeshQuantization","dequantizeAttribute","test","getComponentSize","listTextureInfo","texture","results","textureEdge","getParent","getName","TextureInfo","listTextureInfoByMaterial","traverse","textureInfoNames","Texture","ExtensionProperty","PRUNE_DEFAULTS","NODE","CAMERA","PRIMITIVE","PRIMITIVE_TARGET","ANIMATION","BUFFER","keepLeaves","keepAttributes","prune","disposed","markDisposed","nodeTreeShake","isUsed","e","ptype","SCENE","listNodes","treeShake","listCameras","indirectTreeShake","materialPrims","unused","listUnusedSemantics","listRequiredSemantics","pruneAttributes","prims","shiftTexCoords","anim","channel","listChannels","getTargetNode","samplers","listBuffers","str","info","AnimationChannel","listEdges","setAttribute","required","startsWith","semantics","edges","textureNames","getTexCoord","match","textureInfoList","texCoordSet","texCoordList","texCoordMap","texCoord","semanticMap","textureInfo","setTexCoord","updatePrim","srcSemantics","srcSemantic","uv","dstSemantic","Tolerance","DEFAULT","TEXCOORD","COLOR","NORMAL","JOINTS","WEIGHTS","WELD_DEFAULTS","tolerance","exhaustive","weld","weldPrimitive","transform","attr","numVertices","buffer","getBuffer","createAccessor","setBuffer","setType","Accessor","Type","SCALAR","setIndices","_indexPrimitive","srcPosition","srcIndices","uniqueIndices","baseTolerance","Number","EPSILON","attributeTolerance","getAttributeTolerance","kv","posA","posB","grid","cellSize","POSITION","key","getGridKey","weldMap","writeMap","fill","srcVertexCount","dstVertexCount","cellKeys","getGridNeighborhoodKeys","cells","cellKey","neighbors","isBaseMatch","every","compareAttributes","isTargetMatch","dstIndicesCount","dstIndicesArray","getScalar","srcAttr","swapAttributes","tmpIndicesArray","Infinity","c","cleanPrimitive","_weldPrimitive","reorder","dstAttrArray","ArrayCtor","dstAttr","done","Uint8Array","_a","_b","getMinNormalized","getMaxNormalized","_semantic","CELL_OFFSETS","_p","round","DRACO_DEFAULTS","method","encodeSpeed","decodeSpeed","quantizePosition","quantizeNormal","quantizeColor","quantizeTexcoord","quantizeGeneric","quantizationVolume","draco","KHRDracoMeshCompression","setRequired","setEncoderOptions","EncoderMethod","EDGEBREAKER","SEQUENTIAL","quantizationBits","TEX_COORD","GENERIC","FLATTEN_DEFAULTS","flatten","joints","skin","joint","listJoints","animated","hasJointParent","hasAnimatedParent","getNodeScene","SRGB_PATTERN","getTextureColorSpace","isColor","inspect","animations","properties","sceneBounds","rootName","bboxMin","toPrecision","bboxMax","instances","glPrimitives","verts","meshIndices","meshAccessors","accessorToTypeLabel","targ","byteLength","modes","MeshPrimitiveModeLabels","mode","primitives","vertices","extensions","listExtensions","slots","ref","alphaMode","getAlphaMode","doubleSided","getDoubleSided","resolution","ImageUtils","compression","dfd","readKTX","dataFormatDescriptor","colorModel","KHR_DF_MODEL_ETC1S","KHR_DF_MODEL_UASTC","uri","getURI","mimeType","gpuSize","getVRAMByteLength","minTime","maxTime","getMin","getMax","keyframes","channels","duration","NumericTypeLabels","Int32Array","Int16Array","Int8Array","INSTANCE_DEFAULTS","instance","warn","batchExtension","EXTMeshGPUInstancing","numBatches","numInstances","meshInstances","modifiedNodes","nodes","getSkin","batch","createBatch","batchTranslation","batchRotation","batchScale","batchNode","setMesh","setExtension","needsTranslation","needsRotation","needsScale","r","s","getWorldTranslation","getWorldRotation","getWorldScale","pruneUnusedNodes","listProperties","unusedNodes","getCamera","nodeParent","createInstancedMesh","JOIN_PRIMITIVE_DEFAULTS","skipValidation","joinPrimitives","templatePrim","remapList","indicesList","_getOrCreateIndices","undefined","createPrimitive","setMode","setMaterial","tplAttribute","AttributeArray","ComponentTypeToTypedArray","dstIndices","dstNextIndex","primIndex","indicesArray","primStartIndex","primNextIndex","setScalar","_matrix","JOIN_DEFAULTS","keepMeshes","keepNamed","_joinLevel","groups","children","nodeIndex","getExtension","isNamed","primMeshes","primNodes","dstNode","dstMesh","joinGroups","srcNodes","isSharedMesh","dstMatrix","primNode","removePrimitive","hasSharedAttributes","_deepClonePrimitive","addPrimitive","listTextureChannels","mask","getTextureChannelMask","TextureChannel","R","G","B","A","Material","AlphaMode","OPAQUE","listTextureSlots","REORDER_DEFAULTS","encoder","ready","plan","indicesToAttributes","indicesToMode","attributesToPrimitives","createLayoutPlan","unique","reorderMesh","sortPrimitiveWeights","limit","isFinite","vertexCount","setCount","srcWeights","dstWeights","srcJoints","dstJoints","getVertexArray","setVertexArray","weights","normList","typeList","isNormalizeSafe","templateAttribute","templateArray","componentType","normalized","normalizedComponentType","delta","decodeNormalizedInt","weightsSum","sum","intValue","encodeNormalizedInt","normalizePrimitiveWeights","vertexIndex","prefix","SIGNED_INT","TRANSLATION","ROTATION","SCALE","TargetPath","TRS_CHANNELS","QUANTIZE_DEFAULTS","quantizeWeight","normalizeWeights","quantize","nodeTransform","getNodeTransform","bboxes","result","expandBounds","getPositionQuantizationVolume","transformMeshParents","transformMeshMaterials","quantizePrimitive","bits","ctor","getQuantizationSettings","fromTransform","quantizeAttribute","volume","transformMatrix","Node","animChannels","getTargetPath","isParentNode","setSkin","transformSkin","transformBatch","targetNode","setTargetNode","nodeMatrix","inverseBindMatrices","getInverseBindMatrices","ibm","setInverseBindMatrices","_batch$getAttribute","_batch$getAttribute2","_batch$getAttribute3","instanceTranslation","instanceRotation","instanceScale","tpl","T_IDENTITY","R_IDENTITY","S_IDENTITY","instanceMatrix","compose","decompose","getThicknessFactor","setThicknessFactor","signBits","quantBits","storageBits","BYTES_PER_ELEMENT","lo","hi","di","sign","setSparse","positions","relativePositions","flatBounds","relMin","relMax","tmpMin","tmpMax","xx","q","x2","xy","y2","xz","z2","yz","wx","wy","wz","sy","sz","yy","zz","sx","MESHOPT_DEFAULTS","level","meshopt","EXTMeshoptCompression","QUANTIZE","FILTER","METALROUGH_DEFAULTS","metalRough","listExtensionsUsed","ext","extensionName","iorExtension","KHRMaterialsIOR","specExtension","KHRMaterialsSpecular","specGlossExtension","KHRMaterialsPBRSpecularGlossiness","inputTextures","specGloss","specular","createSpecular","setSpecularFactor","setSpecularColorFactor","getSpecularFactor","getSpecularGlossinessTexture","getBaseColorTexture","getMetallicRoughnessTexture","setBaseColorFactor","getDiffuseFactor","setMetallicFactor","setRoughnessFactor","createIOR","setIOR","diffuseTexture","getDiffuseTexture","setBaseColorTexture","getBaseColorTextureInfo","copy","getDiffuseTextureInfo","sgTexture","sgTextureInfo","getSpecularGlossinessTextureInfo","specularTexture","createTexture","setSpecularTexture","setSpecularColorTexture","getSpecularTextureInfo","getSpecularColorTextureInfo","glossinessFactor","getGlossinessFactor","metalRoughTexture","roughness","setMetallicRoughnessTexture","getMetallicRoughnessTextureInfo","tex","UNWELD_DEFAULTS","unweld","unweldAttribute","NORMALS_DEFAULTS","normals","modified","faceNormal","computeNormal","PALETTE_DEFAULTS","blockSize","palette","materialKeys","materialKeyMap","materialProps","baseColor","emissive","metallicRoughness","encodeRGBA","getBaseColorFactor","getEmissiveFactor","encodeFloat","getRoughnessFactor","metallic","getMetallicFactor","keyCount","ceilPowerOfTwo","h","padWidth","paletteTexturePixels","skipProps","props","baseColorTexture","emissiveTexture","metallicRoughnessTexture","setURI","ndarray","visitedKeys","materialIndices","paletteMaterials","nextIndex","ColorUtils","convertLinearToSRGB","writeBlock","image","nextPaletteMaterialIndex","srcMaterial","padUV","dstMaterial","suffix","padStart","setName","setMinFilter","MinFilter","NEAREST","setMagFilter","MagFilter","setEmissiveFactor","setEmissiveTexture","getEmissiveTextureInfo","hex","ceil","LN2","PARTITION_DEFAULTS","partition","existingURIs","meshIndex","isArray","createBuffer","createBufferURI","primTarget","partitionMeshes","animIndex","partitionAnimations","basename","existing","InterpolationInternal","lerp","v0","v1","vlerp","slerp","omega","cosom","sinom","scale0","scale1","ax","ay","az","aw","bx","by","bz","bw","acos","sin","getAngle","dotproduct","dot","EMPTY_ARRAY","RESAMPLE_DEFAULTS","Promise","resolve","resample","interpolation","tmp","valueNext","valuePrev","lastIndex","writeIndex","timePrev","time","timeNext","keep","sample","angle","PI","accessorsVisited","srcAccessorCount","samplerTargetPaths","getSampler","samplerInterpolation","getInterpolation","tmpTimes","toFloat32Array","tmpValues","srcTimes","srcValues","dstTimes","fromFloat32Array","byteOffset","dstValues","setInput","setOutput","ComponentType","FLOAT","TypedArray","SEQUENCE_DEFAULTS","fps","sequence","sequenceNodes","createAnimation","animBuffer","inputArray","outputArray","VEC3","createAnimationSampler","setInterpolation","AnimationSampler","Interpolation","STEP","createAnimationChannel","setTargetPath","setSampler","addSampler","addChannel","SIMPLIFY_DEFAULTS","ratio","error","lockBorder","simplify","simplifier","simplifyPrimitive","positionArray","UNSIGNED_INT","targetCount","compactMesh","SPARSE_DEFAULTS","sparse","modifiedCount","base","nonZeroCount","TextureResizeFilter","TEXTURE_RESIZE_DEFAULTS","LANCZOS3","textureResize","slot","_options$slots","maxWidth","maxHeight","srcWidth","srcHeight","dstWidth","dstHeight","srcPixels","dstPixels","lanczos3","lanczos2","message","FORMATS","SUPPORTED_MIME_TYPES","TEXTURE_COMPRESS_DEFAULTS","resizeFilter","formats","quality","effort","lossless","nearLossless","textureCompress","targetFormat","patternRe","formatsRe","slotsRe","all","textureIndex","textureLabel","srcFormat","getFormat","srcByteLength","compressTexture","dstByteLength","flag","webpExtension","EXTTextureWebP","avifExtension","EXTTextureAVIF","dstFormat","srcMimeType","dstMimeType","encoderOptions","toFormat","resize","fit","kernel","withoutEnlargement","toBuffer","srcExtension","mimeTypeToExtension","dstExtension","dstURI","RegExp","format","split","srcMax","dstMax","TANGENTS_DEFAULTS","tangents","generateTangents","attributeIDs","tangentCache","meshName","meshPrimitives","filterPrimitive","texcoordSemantic","getNormalTexcoord","texcoord","positionID","uuid","normalID","texcoordID","prevTangent","attributeHash","tangentBuffer","tangentArray","normalTextureInfo","getNormalTextureInfo","unlit","KHRMaterialsUnlit","createUnlit","UNPARTITION_DEFAULTS","unpartition","colorspace","vertexColorSpace","inputColorSpace","inputEncoding","toLowerCase","converted","sRGBToLinear","updatePrimitive","color"],"mappings":"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"}