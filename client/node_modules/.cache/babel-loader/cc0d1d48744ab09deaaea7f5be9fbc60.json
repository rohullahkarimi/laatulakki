{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Loader, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FileLoader, UnsignedByteType, CompressedTexture, LinearFilter, LinearMipmapLinearFilter, RGFormat, RedFormat, FloatType, HalfFloatType, DataTexture } from \"three\";\nimport { WorkerPool } from \"../utils/WorkerPool.js\";\nimport { KHR_DF_TRANSFER_SRGB, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, read, VK_FORMAT_UNDEFINED, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZSTD } from \"ktx-parse\";\nimport { ZSTDDecoder } from \"zstddec\";\nimport { CompressedArrayTexture } from \"../_polyfill/CompressedArrayTexture.js\";\nimport { Data3DTexture } from \"../_polyfill/Data3DTexture.js\";\nconst _taskCache = /* @__PURE__ */new WeakMap();\nlet _activeLoaders = 0;\nlet _zstd;\nconst _KTX2Loader = class extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = \"\";\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerPool = new WorkerPool();\n    this.workerSourceURL = \"\";\n    this.workerConfig = null;\n    if (typeof MSC_TRANSCODER !== \"undefined\") {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\". \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n  }\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n  setWorkerLimit(num) {\n    this.workerPool.setWorkerLimit(num);\n    return this;\n  }\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_astc\"),\n      etc1Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc1\"),\n      etc2Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc\"),\n      dxtSupported: renderer.extensions.has(\"WEBGL_compressed_texture_s3tc\"),\n      bptcSupported: renderer.extensions.has(\"EXT_texture_compression_bptc\"),\n      pvrtcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_pvrtc\") || renderer.extensions.has(\"WEBKIT_WEBGL_compressed_texture_pvrtc\")\n    };\n    if (renderer.capabilities.isWebGL2) {\n      this.workerConfig.etc1Supported = false;\n    }\n    return this;\n  }\n  init() {\n    if (!this.transcoderPending) {\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = jsLoader.loadAsync(\"basis_transcoder.js\");\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType(\"arraybuffer\");\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = binaryLoader.loadAsync(\"basis_transcoder.wasm\");\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent2, binaryContent2]) => {\n        const fn = _KTX2Loader.BasisWorker.toString();\n        const body = [\"/* constants */\", \"let _EngineFormat = \" + JSON.stringify(_KTX2Loader.EngineFormat), \"let _TranscoderFormat = \" + JSON.stringify(_KTX2Loader.TranscoderFormat), \"let _BasisFormat = \" + JSON.stringify(_KTX2Loader.BasisFormat), \"/* basis_transcoder.js */\", jsContent2, \"/* worker */\", fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))].join(\"\\n\");\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent2;\n        this.workerPool.setWorkerCreator(() => {\n          const worker = new Worker(this.workerSourceURL);\n          const transcoderBinary = this.transcoderBinary.slice(0);\n          worker.postMessage({\n            type: \"init\",\n            config: this.workerConfig,\n            transcoderBinary\n          }, [transcoderBinary]);\n          return worker;\n        });\n      });\n      if (_activeLoaders > 0) {\n        console.warn(\"THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues. Use a single KTX2Loader instance, or call .dispose() on old instances.\");\n      }\n      _activeLoaders++;\n    }\n    return this.transcoderPending;\n  }\n  load(url, onLoad, onProgress, onError) {\n    if (this.workerConfig === null) {\n      throw new Error(\"THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.\");\n    }\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, buffer => {\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n      this._createTexture(buffer).then(texture => onLoad ? onLoad(texture) : null).catch(onError);\n    }, onProgress, onError);\n  }\n  _createTextureFrom(transcodeResult, container) {\n    const {\n      mipmaps,\n      width,\n      height,\n      format,\n      type,\n      error,\n      dfdTransferFn,\n      dfdFlags\n    } = transcodeResult;\n    if (type === \"error\") return Promise.reject(error);\n    const texture = container.layerCount > 1 ? new CompressedArrayTexture(mipmaps, width, height, container.layerCount, format, UnsignedByteType) : new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n    texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n    texture.magFilter = LinearFilter;\n    texture.generateMipmaps = false;\n    texture.needsUpdate = true;\n    if (\"colorSpace\" in texture) texture.colorSpace = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? \"srgb\" : \"srgb-linear\";else texture.encoding = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? 3001 : 3e3;\n    texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n    return texture;\n  }\n  /**\n   * @param {ArrayBuffer} buffer\n   * @param {object?} config\n   * @return {Promise<CompressedTexture|CompressedArrayTexture|DataTexture|Data3DTexture>}\n   */\n  async _createTexture(buffer, config = {}) {\n    const container = read(new Uint8Array(buffer));\n    if (container.vkFormat !== VK_FORMAT_UNDEFINED) {\n      return createDataTexture(container);\n    }\n    const taskConfig = config;\n    const texturePending = this.init().then(() => {\n      return this.workerPool.postMessage({\n        type: \"transcode\",\n        buffer,\n        taskConfig\n      }, [buffer]);\n    }).then(e => this._createTextureFrom(e.data, container));\n    _taskCache.set(buffer, {\n      promise: texturePending\n    });\n    return texturePending;\n  }\n  dispose() {\n    this.workerPool.dispose();\n    if (this.workerSourceURL) URL.revokeObjectURL(this.workerSourceURL);\n    _activeLoaders--;\n    return this;\n  }\n};\nlet KTX2Loader = _KTX2Loader;\n/* CONSTANTS */\n__publicField(KTX2Loader, \"BasisFormat\", {\n  ETC1S: 0,\n  UASTC_4x4: 1\n});\n__publicField(KTX2Loader, \"TranscoderFormat\", {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n});\n__publicField(KTX2Loader, \"EngineFormat\", {\n  RGBAFormat,\n  RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format,\n  RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format\n});\n/* WEB WORKER */\n__publicField(KTX2Loader, \"BasisWorker\", function () {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat;\n  const TranscoderFormat = _TranscoderFormat;\n  const BasisFormat = _BasisFormat;\n  self.addEventListener(\"message\", function (e) {\n    const message = e.data;\n    switch (message.type) {\n      case \"init\":\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n      case \"transcode\":\n        transcoderPending.then(() => {\n          try {\n            const {\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format,\n              dfdTransferFn,\n              dfdFlags\n            } = transcode(message.buffer);\n            const buffers = [];\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n            self.postMessage({\n              type: \"transcode\",\n              id: message.id,\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format,\n              dfdTransferFn,\n              dfdFlags\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: \"error\",\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  });\n  function init(wasmBinary) {\n    transcoderPending = new Promise(resolve => {\n      BasisModule = {\n        wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule);\n    }).then(() => {\n      BasisModule.initializeBasis();\n      if (BasisModule.KTX2File === void 0) {\n        console.warn(\"THREE.KTX2Loader: Please update Basis Universal transcoder.\");\n      }\n    });\n  }\n  function transcode(buffer) {\n    const ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n    function cleanup() {\n      ktx2File.close();\n      ktx2File.delete();\n    }\n    if (!ktx2File.isValid()) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file\");\n    }\n    const basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = ktx2File.getWidth();\n    const height = ktx2File.getHeight();\n    const layers = ktx2File.getLayers() || 1;\n    const levels = ktx2File.getLevels();\n    const hasAlpha = ktx2File.getHasAlpha();\n    const dfdTransferFn = ktx2File.getDFDTransferFunc();\n    const dfdFlags = ktx2File.getDFDFlags();\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader:\tInvalid texture\");\n    }\n    if (!ktx2File.startTranscoding()) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader: .startTranscoding failed\");\n    }\n    const mipmaps = [];\n    for (let mip = 0; mip < levels; mip++) {\n      const layerMips = [];\n      let mipWidth, mipHeight;\n      for (let layer = 0; layer < layers; layer++) {\n        const levelInfo = ktx2File.getImageLevelInfo(mip, layer, 0);\n        mipWidth = levelInfo.origWidth < 4 ? levelInfo.origWidth : levelInfo.width;\n        mipHeight = levelInfo.origHeight < 4 ? levelInfo.origHeight : levelInfo.height;\n        const dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, layer, 0, transcoderFormat));\n        const status = ktx2File.transcodeImage(dst, mip, layer, 0, transcoderFormat, 0, -1, -1);\n        if (!status) {\n          cleanup();\n          throw new Error(\"THREE.KTX2Loader: .transcodeImage failed.\");\n        }\n        layerMips.push(dst);\n      }\n      mipmaps.push({\n        data: concat(layerMips),\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n    cleanup();\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat,\n      dfdTransferFn,\n      dfdFlags\n    };\n  }\n  const FORMAT_OPTIONS = [{\n    if: \"astcSupported\",\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: \"bptcSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: \"dxtSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: \"etc2Supported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: \"etc1Supported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: \"pvrtcSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (hasAlpha && opt.transcoderFormat.length < 2) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat,\n        engineFormat\n      };\n    }\n    console.warn(\"THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.\");\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat,\n      engineFormat\n    };\n  }\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n  function concat(arrays) {\n    let totalByteLength = 0;\n    for (let i = 0; i < arrays.length; i++) {\n      const array = arrays[i];\n      totalByteLength += array.byteLength;\n    }\n    const result = new Uint8Array(totalByteLength);\n    let byteOffset = 0;\n    for (let i = 0; i < arrays.length; i++) {\n      const array = arrays[i];\n      result.set(array, byteOffset);\n      byteOffset += array.byteLength;\n    }\n    return result;\n  }\n});\nconst FORMAT_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_UNORM]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_SRGB]: RGBAFormat,\n  [VK_FORMAT_R32G32_SFLOAT]: RGFormat,\n  [VK_FORMAT_R16G16_SFLOAT]: RGFormat,\n  [VK_FORMAT_R8G8_UNORM]: RGFormat,\n  [VK_FORMAT_R8G8_SRGB]: RGFormat,\n  [VK_FORMAT_R32_SFLOAT]: RedFormat,\n  [VK_FORMAT_R16_SFLOAT]: RedFormat,\n  [VK_FORMAT_R8_SRGB]: RedFormat,\n  [VK_FORMAT_R8_UNORM]: RedFormat\n};\nconst TYPE_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8B8A8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8B8A8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32G32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R8_UNORM]: UnsignedByteType\n};\nconst ENCODING_MAP = {\n  [VK_FORMAT_R8G8B8A8_SRGB]: 3001,\n  // sRGBEncoding\n  [VK_FORMAT_R8G8_SRGB]: 3001,\n  // sRGBEncoding\n  [VK_FORMAT_R8_SRGB]: 3001\n  // sRGBEncoding\n};\n\nasync function createDataTexture(container) {\n  const {\n    vkFormat,\n    pixelWidth,\n    pixelHeight,\n    pixelDepth\n  } = container;\n  if (FORMAT_MAP[vkFormat] === void 0) {\n    throw new Error(\"THREE.KTX2Loader: Unsupported vkFormat.\");\n  }\n  const level = container.levels[0];\n  let levelData;\n  let view;\n  if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE) {\n    levelData = level.levelData;\n  } else if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n    if (!_zstd) {\n      _zstd = new Promise(async resolve => {\n        const zstd = new ZSTDDecoder();\n        await zstd.init();\n        resolve(zstd);\n      });\n    }\n    levelData = (await _zstd).decode(level.levelData, level.uncompressedByteLength);\n  } else {\n    throw new Error(\"THREE.KTX2Loader: Unsupported supercompressionScheme.\");\n  }\n  if (TYPE_MAP[vkFormat] === FloatType) {\n    view = new Float32Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Float32Array.BYTES_PER_ELEMENT);\n  } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n    view = new Uint16Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n  } else {\n    view = levelData;\n  }\n  const texture = pixelDepth === 0 ? new DataTexture(view, pixelWidth, pixelHeight) : new Data3DTexture(view, pixelWidth, pixelHeight, pixelDepth);\n  texture.type = TYPE_MAP[vkFormat];\n  texture.format = FORMAT_MAP[vkFormat];\n  texture.encoding = ENCODING_MAP[vkFormat] || 3e3;\n  texture.needsUpdate = true;\n  return Promise.resolve(texture);\n}\nexport { KTX2Loader };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Loader","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","FileLoader","UnsignedByteType","CompressedTexture","LinearFilter","LinearMipmapLinearFilter","RGFormat","RedFormat","FloatType","HalfFloatType","DataTexture","WorkerPool","KHR_DF_TRANSFER_SRGB","KHR_DF_FLAG_ALPHA_PREMULTIPLIED","read","VK_FORMAT_UNDEFINED","VK_FORMAT_R32G32B32A32_SFLOAT","VK_FORMAT_R16G16B16A16_SFLOAT","VK_FORMAT_R8G8B8A8_UNORM","VK_FORMAT_R8G8B8A8_SRGB","VK_FORMAT_R32G32_SFLOAT","VK_FORMAT_R16G16_SFLOAT","VK_FORMAT_R8G8_UNORM","VK_FORMAT_R8G8_SRGB","VK_FORMAT_R32_SFLOAT","VK_FORMAT_R16_SFLOAT","VK_FORMAT_R8_SRGB","VK_FORMAT_R8_UNORM","KHR_SUPERCOMPRESSION_NONE","KHR_SUPERCOMPRESSION_ZSTD","ZSTDDecoder","CompressedArrayTexture","Data3DTexture","_taskCache","WeakMap","_activeLoaders","_zstd","_KTX2Loader","constructor","manager","transcoderPath","transcoderBinary","transcoderPending","workerPool","workerSourceURL","workerConfig","MSC_TRANSCODER","console","warn","setTranscoderPath","path","setWorkerLimit","num","detectSupport","renderer","astcSupported","extensions","has","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","capabilities","isWebGL2","init","jsLoader","setPath","setWithCredentials","withCredentials","jsContent","loadAsync","binaryLoader","setResponseType","binaryContent","Promise","all","then","jsContent2","binaryContent2","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","setWorkerCreator","worker","Worker","slice","postMessage","type","config","load","url","onLoad","onProgress","onError","Error","loader","buffer","cachedTask","get","promise","catch","_createTexture","texture","_createTextureFrom","transcodeResult","container","mipmaps","width","height","format","error","dfdTransferFn","dfdFlags","reject","layerCount","minFilter","length","magFilter","generateMipmaps","needsUpdate","colorSpace","encoding","premultiplyAlpha","Uint8Array","vkFormat","createDataTexture","taskConfig","texturePending","e","data","set","dispose","revokeObjectURL","KTX2Loader","ETC1S","UASTC_4x4","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","BasisModule","_EngineFormat","_TranscoderFormat","_BasisFormat","self","addEventListener","message","hasAlpha","transcode","buffers","i","push","id","wasmBinary","resolve","onRuntimeInitialized","BASIS","initializeBasis","KTX2File","ktx2File","cleanup","close","delete","isValid","basisFormat","isUASTC","getWidth","getHeight","layers","getLayers","levels","getLevels","getHasAlpha","getDFDTransferFunc","getDFDFlags","transcoderFormat","engineFormat","getTranscoderFormat","startTranscoding","mip","layerMips","mipWidth","mipHeight","layer","levelInfo","getImageLevelInfo","origWidth","origHeight","dst","getImageTranscodedSizeInBytes","status","transcodeImage","concat","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","needsPowerOfTwo","ETC1S_OPTIONS","sort","a","b","UASTC_OPTIONS","options","opt","includes","isPowerOfTwo","arrays","totalByteLength","array","byteLength","result","byteOffset","FORMAT_MAP","TYPE_MAP","ENCODING_MAP","pixelWidth","pixelHeight","pixelDepth","level","levelData","view","supercompressionScheme","zstd","decode","uncompressedByteLength","Float32Array","BYTES_PER_ELEMENT","Uint16Array"],"sources":["/Users/rohullahkarimi/Local/laatuLakki_main/client/node_modules/three-stdlib/loaders/KTX2Loader.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Loader, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FileLoader, UnsignedByteType, CompressedTexture, LinearFilter, LinearMipmapLinearFilter, RGFormat, RedFormat, FloatType, HalfFloatType, DataTexture } from \"three\";\nimport { WorkerPool } from \"../utils/WorkerPool.js\";\nimport { KHR_DF_TRANSFER_SRGB, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, read, VK_FORMAT_UNDEFINED, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZSTD } from \"ktx-parse\";\nimport { ZSTDDecoder } from \"zstddec\";\nimport { CompressedArrayTexture } from \"../_polyfill/CompressedArrayTexture.js\";\nimport { Data3DTexture } from \"../_polyfill/Data3DTexture.js\";\nconst _taskCache = /* @__PURE__ */ new WeakMap();\nlet _activeLoaders = 0;\nlet _zstd;\nconst _KTX2Loader = class extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = \"\";\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerPool = new WorkerPool();\n    this.workerSourceURL = \"\";\n    this.workerConfig = null;\n    if (typeof MSC_TRANSCODER !== \"undefined\") {\n      console.warn(\n        'THREE.KTX2Loader: Please update to latest \"basis_transcoder\". \"msc_basis_transcoder\" is no longer supported in three.js r125+.'\n      );\n    }\n  }\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n  setWorkerLimit(num) {\n    this.workerPool.setWorkerLimit(num);\n    return this;\n  }\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_astc\"),\n      etc1Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc1\"),\n      etc2Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc\"),\n      dxtSupported: renderer.extensions.has(\"WEBGL_compressed_texture_s3tc\"),\n      bptcSupported: renderer.extensions.has(\"EXT_texture_compression_bptc\"),\n      pvrtcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_pvrtc\") || renderer.extensions.has(\"WEBKIT_WEBGL_compressed_texture_pvrtc\")\n    };\n    if (renderer.capabilities.isWebGL2) {\n      this.workerConfig.etc1Supported = false;\n    }\n    return this;\n  }\n  init() {\n    if (!this.transcoderPending) {\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = jsLoader.loadAsync(\"basis_transcoder.js\");\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType(\"arraybuffer\");\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = binaryLoader.loadAsync(\"basis_transcoder.wasm\");\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent2, binaryContent2]) => {\n        const fn = _KTX2Loader.BasisWorker.toString();\n        const body = [\n          \"/* constants */\",\n          \"let _EngineFormat = \" + JSON.stringify(_KTX2Loader.EngineFormat),\n          \"let _TranscoderFormat = \" + JSON.stringify(_KTX2Loader.TranscoderFormat),\n          \"let _BasisFormat = \" + JSON.stringify(_KTX2Loader.BasisFormat),\n          \"/* basis_transcoder.js */\",\n          jsContent2,\n          \"/* worker */\",\n          fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))\n        ].join(\"\\n\");\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent2;\n        this.workerPool.setWorkerCreator(() => {\n          const worker = new Worker(this.workerSourceURL);\n          const transcoderBinary = this.transcoderBinary.slice(0);\n          worker.postMessage({ type: \"init\", config: this.workerConfig, transcoderBinary }, [transcoderBinary]);\n          return worker;\n        });\n      });\n      if (_activeLoaders > 0) {\n        console.warn(\n          \"THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues. Use a single KTX2Loader instance, or call .dispose() on old instances.\"\n        );\n      }\n      _activeLoaders++;\n    }\n    return this.transcoderPending;\n  }\n  load(url, onLoad, onProgress, onError) {\n    if (this.workerConfig === null) {\n      throw new Error(\"THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.\");\n    }\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(\n      url,\n      (buffer) => {\n        if (_taskCache.has(buffer)) {\n          const cachedTask = _taskCache.get(buffer);\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n        this._createTexture(buffer).then((texture) => onLoad ? onLoad(texture) : null).catch(onError);\n      },\n      onProgress,\n      onError\n    );\n  }\n  _createTextureFrom(transcodeResult, container) {\n    const { mipmaps, width, height, format, type, error, dfdTransferFn, dfdFlags } = transcodeResult;\n    if (type === \"error\")\n      return Promise.reject(error);\n    const texture = container.layerCount > 1 ? new CompressedArrayTexture(mipmaps, width, height, container.layerCount, format, UnsignedByteType) : new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n    texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n    texture.magFilter = LinearFilter;\n    texture.generateMipmaps = false;\n    texture.needsUpdate = true;\n    if (\"colorSpace\" in texture)\n      texture.colorSpace = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? \"srgb\" : \"srgb-linear\";\n    else\n      texture.encoding = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? 3001 : 3e3;\n    texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n    return texture;\n  }\n  /**\n   * @param {ArrayBuffer} buffer\n   * @param {object?} config\n   * @return {Promise<CompressedTexture|CompressedArrayTexture|DataTexture|Data3DTexture>}\n   */\n  async _createTexture(buffer, config = {}) {\n    const container = read(new Uint8Array(buffer));\n    if (container.vkFormat !== VK_FORMAT_UNDEFINED) {\n      return createDataTexture(container);\n    }\n    const taskConfig = config;\n    const texturePending = this.init().then(() => {\n      return this.workerPool.postMessage({ type: \"transcode\", buffer, taskConfig }, [buffer]);\n    }).then((e) => this._createTextureFrom(e.data, container));\n    _taskCache.set(buffer, { promise: texturePending });\n    return texturePending;\n  }\n  dispose() {\n    this.workerPool.dispose();\n    if (this.workerSourceURL)\n      URL.revokeObjectURL(this.workerSourceURL);\n    _activeLoaders--;\n    return this;\n  }\n};\nlet KTX2Loader = _KTX2Loader;\n/* CONSTANTS */\n__publicField(KTX2Loader, \"BasisFormat\", {\n  ETC1S: 0,\n  UASTC_4x4: 1\n});\n__publicField(KTX2Loader, \"TranscoderFormat\", {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n});\n__publicField(KTX2Loader, \"EngineFormat\", {\n  RGBAFormat,\n  RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format,\n  RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format\n});\n/* WEB WORKER */\n__publicField(KTX2Loader, \"BasisWorker\", function() {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat;\n  const TranscoderFormat = _TranscoderFormat;\n  const BasisFormat = _BasisFormat;\n  self.addEventListener(\"message\", function(e) {\n    const message = e.data;\n    switch (message.type) {\n      case \"init\":\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n      case \"transcode\":\n        transcoderPending.then(() => {\n          try {\n            const { width, height, hasAlpha, mipmaps, format, dfdTransferFn, dfdFlags } = transcode(message.buffer);\n            const buffers = [];\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n            self.postMessage(\n              {\n                type: \"transcode\",\n                id: message.id,\n                width,\n                height,\n                hasAlpha,\n                mipmaps,\n                format,\n                dfdTransferFn,\n                dfdFlags\n              },\n              buffers\n            );\n          } catch (error) {\n            console.error(error);\n            self.postMessage({ type: \"error\", id: message.id, error: error.message });\n          }\n        });\n        break;\n    }\n  });\n  function init(wasmBinary) {\n    transcoderPending = new Promise((resolve) => {\n      BasisModule = { wasmBinary, onRuntimeInitialized: resolve };\n      BASIS(BasisModule);\n    }).then(() => {\n      BasisModule.initializeBasis();\n      if (BasisModule.KTX2File === void 0) {\n        console.warn(\"THREE.KTX2Loader: Please update Basis Universal transcoder.\");\n      }\n    });\n  }\n  function transcode(buffer) {\n    const ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n    function cleanup() {\n      ktx2File.close();\n      ktx2File.delete();\n    }\n    if (!ktx2File.isValid()) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file\");\n    }\n    const basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = ktx2File.getWidth();\n    const height = ktx2File.getHeight();\n    const layers = ktx2File.getLayers() || 1;\n    const levels = ktx2File.getLevels();\n    const hasAlpha = ktx2File.getHasAlpha();\n    const dfdTransferFn = ktx2File.getDFDTransferFunc();\n    const dfdFlags = ktx2File.getDFDFlags();\n    const { transcoderFormat, engineFormat } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader:\tInvalid texture\");\n    }\n    if (!ktx2File.startTranscoding()) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader: .startTranscoding failed\");\n    }\n    const mipmaps = [];\n    for (let mip = 0; mip < levels; mip++) {\n      const layerMips = [];\n      let mipWidth, mipHeight;\n      for (let layer = 0; layer < layers; layer++) {\n        const levelInfo = ktx2File.getImageLevelInfo(mip, layer, 0);\n        mipWidth = levelInfo.origWidth < 4 ? levelInfo.origWidth : levelInfo.width;\n        mipHeight = levelInfo.origHeight < 4 ? levelInfo.origHeight : levelInfo.height;\n        const dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, layer, 0, transcoderFormat));\n        const status = ktx2File.transcodeImage(dst, mip, layer, 0, transcoderFormat, 0, -1, -1);\n        if (!status) {\n          cleanup();\n          throw new Error(\"THREE.KTX2Loader: .transcodeImage failed.\");\n        }\n        layerMips.push(dst);\n      }\n      mipmaps.push({ data: concat(layerMips), width: mipWidth, height: mipHeight });\n    }\n    cleanup();\n    return { width, height, hasAlpha, mipmaps, format: engineFormat, dfdTransferFn, dfdFlags };\n  }\n  const FORMAT_OPTIONS = [\n    {\n      if: \"astcSupported\",\n      basisFormat: [BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n      engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n      priorityETC1S: Infinity,\n      priorityUASTC: 1,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"bptcSupported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n      engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n      priorityETC1S: 3,\n      priorityUASTC: 2,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"dxtSupported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n      engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n      priorityETC1S: 4,\n      priorityUASTC: 5,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"etc2Supported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n      engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n      priorityETC1S: 1,\n      priorityUASTC: 3,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"etc1Supported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.ETC1],\n      engineFormat: [EngineFormat.RGB_ETC1_Format],\n      priorityETC1S: 2,\n      priorityUASTC: 4,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"pvrtcSupported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n      engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n      priorityETC1S: 5,\n      priorityUASTC: 6,\n      needsPowerOfTwo: true\n    }\n  ];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function(a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function(a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if])\n        continue;\n      if (!opt.basisFormat.includes(basisFormat))\n        continue;\n      if (hasAlpha && opt.transcoderFormat.length < 2)\n        continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height)))\n        continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return { transcoderFormat, engineFormat };\n    }\n    console.warn(\"THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.\");\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return { transcoderFormat, engineFormat };\n  }\n  function isPowerOfTwo(value) {\n    if (value <= 2)\n      return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n  function concat(arrays) {\n    let totalByteLength = 0;\n    for (let i = 0; i < arrays.length; i++) {\n      const array = arrays[i];\n      totalByteLength += array.byteLength;\n    }\n    const result = new Uint8Array(totalByteLength);\n    let byteOffset = 0;\n    for (let i = 0; i < arrays.length; i++) {\n      const array = arrays[i];\n      result.set(array, byteOffset);\n      byteOffset += array.byteLength;\n    }\n    return result;\n  }\n});\nconst FORMAT_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_UNORM]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_SRGB]: RGBAFormat,\n  [VK_FORMAT_R32G32_SFLOAT]: RGFormat,\n  [VK_FORMAT_R16G16_SFLOAT]: RGFormat,\n  [VK_FORMAT_R8G8_UNORM]: RGFormat,\n  [VK_FORMAT_R8G8_SRGB]: RGFormat,\n  [VK_FORMAT_R32_SFLOAT]: RedFormat,\n  [VK_FORMAT_R16_SFLOAT]: RedFormat,\n  [VK_FORMAT_R8_SRGB]: RedFormat,\n  [VK_FORMAT_R8_UNORM]: RedFormat\n};\nconst TYPE_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8B8A8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8B8A8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32G32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R8_UNORM]: UnsignedByteType\n};\nconst ENCODING_MAP = {\n  [VK_FORMAT_R8G8B8A8_SRGB]: 3001,\n  // sRGBEncoding\n  [VK_FORMAT_R8G8_SRGB]: 3001,\n  // sRGBEncoding\n  [VK_FORMAT_R8_SRGB]: 3001\n  // sRGBEncoding\n};\nasync function createDataTexture(container) {\n  const { vkFormat, pixelWidth, pixelHeight, pixelDepth } = container;\n  if (FORMAT_MAP[vkFormat] === void 0) {\n    throw new Error(\"THREE.KTX2Loader: Unsupported vkFormat.\");\n  }\n  const level = container.levels[0];\n  let levelData;\n  let view;\n  if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE) {\n    levelData = level.levelData;\n  } else if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n    if (!_zstd) {\n      _zstd = new Promise(async (resolve) => {\n        const zstd = new ZSTDDecoder();\n        await zstd.init();\n        resolve(zstd);\n      });\n    }\n    levelData = (await _zstd).decode(level.levelData, level.uncompressedByteLength);\n  } else {\n    throw new Error(\"THREE.KTX2Loader: Unsupported supercompressionScheme.\");\n  }\n  if (TYPE_MAP[vkFormat] === FloatType) {\n    view = new Float32Array(\n      levelData.buffer,\n      levelData.byteOffset,\n      levelData.byteLength / Float32Array.BYTES_PER_ELEMENT\n    );\n  } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n    view = new Uint16Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n  } else {\n    view = levelData;\n  }\n  const texture = pixelDepth === 0 ? new DataTexture(view, pixelWidth, pixelHeight) : new Data3DTexture(view, pixelWidth, pixelHeight, pixelDepth);\n  texture.type = TYPE_MAP[vkFormat];\n  texture.format = FORMAT_MAP[vkFormat];\n  texture.encoding = ENCODING_MAP[vkFormat] || 3e3;\n  texture.needsUpdate = true;\n  return Promise.resolve(texture);\n}\nexport {\n  KTX2Loader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}