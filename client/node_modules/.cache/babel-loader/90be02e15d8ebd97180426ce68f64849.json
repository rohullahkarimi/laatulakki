{"ast":null,"code":"import validate from 'validate.js';\nimport XRegExp from 'xregexp';\nimport { parse, isValid } from 'date-fns';\nimport { PhoneNumberUtil, PhoneNumberType } from 'google-libphonenumber';\nconst phoneUtil = PhoneNumberUtil.getInstance();\nconst phoneNumberType = PhoneNumberType;\nconst dateRegExp = /^\\d{2}\\/\\d{2}\\/\\d{4}$/;\nconst DEFAULT_DATE_FORMAT = 'MM/dd/yyyy';\nconst INVALID_MSG = '^is invalid';\nfunction isValidDate(str, format) {\n  const date = parse(str, format, new Date());\n  return isValid(date);\n}\nvalidate.extend(validate.validators.datetime, {\n  parse: function (value, options) {\n    if (!value) {\n      return false;\n    }\n    if (!dateRegExp.test(value)) {\n      return true;\n    }\n    return !isValidDate(value, options.format || DEFAULT_DATE_FORMAT);\n  },\n  format: function (value) {\n    return value;\n  }\n});\nvalidate.validators.customFormat = (value, options) => {\n  if (!value) {\n    return;\n  }\n  try {\n    const {\n      pattern\n    } = options;\n    const ignoreCase = pattern.includes('(?i)');\n    const patternStr = pattern.replace(/\\\\A/i, '^').replace(/\\\\Z/i, '$').replace(/\\(\\?i\\)/g, '');\n    const regExp = XRegExp(patternStr, ignoreCase ? 'i' : undefined);\n    const message = options.message || INVALID_MSG;\n    if (regExp.test(value)) {\n      return;\n    }\n    return message;\n  } catch (err) {\n    // does nothing\n  }\n};\nfunction isMobilePhone(phone) {\n  return phoneUtil.getNumberType(phone) === phoneNumberType.MOBILE;\n}\nvalidate.validators.phone = (value, {\n  message,\n  country: countryOrCountries = [],\n  mobile = true,\n  strict = true,\n  shouldApplyValidation = () => true\n}, _key, attributes) => {\n  if (!value || !shouldApplyValidation(value, attributes)) {\n    return;\n  }\n  const countries = Array.isArray(countryOrCountries) ? countryOrCountries : new Array(countryOrCountries);\n  try {\n    const num = phoneUtil.parse(value, countries[0]);\n    if (!strict) {\n      if (phoneUtil.isPossibleNumber(num)) return;\n      return message || INVALID_MSG;\n    }\n    const isValidPhone = countries.length === 0 ? phoneUtil.isValidNumber(num) : countries.some(country => phoneUtil.isValidNumberForRegion(num, country));\n    if (isValidPhone) {\n      if (mobile && !isMobilePhone(num)) {\n        return message || '^is not a mobile phone';\n      }\n      return;\n    }\n  } catch (err) {\n    return message || INVALID_MSG;\n  }\n  return message || INVALID_MSG;\n};\nexport default validate;","map":{"version":3,"names":["validate","XRegExp","parse","isValid","PhoneNumberUtil","PhoneNumberType","phoneUtil","getInstance","phoneNumberType","dateRegExp","DEFAULT_DATE_FORMAT","INVALID_MSG","isValidDate","str","format","date","Date","extend","validators","datetime","value","options","test","customFormat","pattern","ignoreCase","includes","patternStr","replace","regExp","undefined","message","err","isMobilePhone","phone","getNumberType","MOBILE","country","countryOrCountries","mobile","strict","shouldApplyValidation","_key","attributes","countries","Array","isArray","num","isPossibleNumber","isValidPhone","length","isValidNumber","some","isValidNumberForRegion"],"sources":["/Users/rohullahkarimi/Local/laatuLakki_main/client/node_modules/@flywire/react-hooks/dist/esm/hooks/useValidate/validate/validate.js"],"sourcesContent":["import validate from 'validate.js';\nimport XRegExp from 'xregexp';\nimport { parse, isValid } from 'date-fns';\nimport { PhoneNumberUtil, PhoneNumberType } from 'google-libphonenumber';\nconst phoneUtil = PhoneNumberUtil.getInstance();\nconst phoneNumberType = PhoneNumberType;\nconst dateRegExp = /^\\d{2}\\/\\d{2}\\/\\d{4}$/;\nconst DEFAULT_DATE_FORMAT = 'MM/dd/yyyy';\nconst INVALID_MSG = '^is invalid';\nfunction isValidDate(str, format) {\n    const date = parse(str, format, new Date());\n    return isValid(date);\n}\nvalidate.extend(validate.validators.datetime, {\n    parse: function (value, options) {\n        if (!value) {\n            return false;\n        }\n        if (!dateRegExp.test(value)) {\n            return true;\n        }\n        return !isValidDate(value, options.format || DEFAULT_DATE_FORMAT);\n    },\n    format: function (value) {\n        return value;\n    },\n});\nvalidate.validators.customFormat = (value, options) => {\n    if (!value) {\n        return;\n    }\n    try {\n        const { pattern } = options;\n        const ignoreCase = pattern.includes('(?i)');\n        const patternStr = pattern\n            .replace(/\\\\A/i, '^')\n            .replace(/\\\\Z/i, '$')\n            .replace(/\\(\\?i\\)/g, '');\n        const regExp = XRegExp(patternStr, ignoreCase ? 'i' : undefined);\n        const message = options.message || INVALID_MSG;\n        if (regExp.test(value)) {\n            return;\n        }\n        return message;\n    }\n    catch (err) {\n        // does nothing\n    }\n};\nfunction isMobilePhone(phone) {\n    return phoneUtil.getNumberType(phone) === phoneNumberType.MOBILE;\n}\nvalidate.validators.phone = (value, { message, country: countryOrCountries = [], mobile = true, strict = true, shouldApplyValidation = () => true, }, _key, attributes) => {\n    if (!value || !shouldApplyValidation(value, attributes)) {\n        return;\n    }\n    const countries = Array.isArray(countryOrCountries)\n        ? countryOrCountries\n        : new Array(countryOrCountries);\n    try {\n        const num = phoneUtil.parse(value, countries[0]);\n        if (!strict) {\n            if (phoneUtil.isPossibleNumber(num))\n                return;\n            return message || INVALID_MSG;\n        }\n        const isValidPhone = countries.length === 0\n            ? phoneUtil.isValidNumber(num)\n            : countries.some((country) => phoneUtil.isValidNumberForRegion(num, country));\n        if (isValidPhone) {\n            if (mobile && !isMobilePhone(num)) {\n                return message || '^is not a mobile phone';\n            }\n            return;\n        }\n    }\n    catch (err) {\n        return message || INVALID_MSG;\n    }\n    return message || INVALID_MSG;\n};\nexport default validate;\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,aAAa;AAClC,OAAOC,OAAO,MAAM,SAAS;AAC7B,SAASC,KAAK,EAAEC,OAAO,QAAQ,UAAU;AACzC,SAASC,eAAe,EAAEC,eAAe,QAAQ,uBAAuB;AACxE,MAAMC,SAAS,GAAGF,eAAe,CAACG,WAAW,CAAC,CAAC;AAC/C,MAAMC,eAAe,GAAGH,eAAe;AACvC,MAAMI,UAAU,GAAG,uBAAuB;AAC1C,MAAMC,mBAAmB,GAAG,YAAY;AACxC,MAAMC,WAAW,GAAG,aAAa;AACjC,SAASC,WAAWA,CAACC,GAAG,EAAEC,MAAM,EAAE;EAC9B,MAAMC,IAAI,GAAGb,KAAK,CAACW,GAAG,EAAEC,MAAM,EAAE,IAAIE,IAAI,CAAC,CAAC,CAAC;EAC3C,OAAOb,OAAO,CAACY,IAAI,CAAC;AACxB;AACAf,QAAQ,CAACiB,MAAM,CAACjB,QAAQ,CAACkB,UAAU,CAACC,QAAQ,EAAE;EAC1CjB,KAAK,EAAE,SAAAA,CAAUkB,KAAK,EAAEC,OAAO,EAAE;IAC7B,IAAI,CAACD,KAAK,EAAE;MACR,OAAO,KAAK;IAChB;IACA,IAAI,CAACX,UAAU,CAACa,IAAI,CAACF,KAAK,CAAC,EAAE;MACzB,OAAO,IAAI;IACf;IACA,OAAO,CAACR,WAAW,CAACQ,KAAK,EAAEC,OAAO,CAACP,MAAM,IAAIJ,mBAAmB,CAAC;EACrE,CAAC;EACDI,MAAM,EAAE,SAAAA,CAAUM,KAAK,EAAE;IACrB,OAAOA,KAAK;EAChB;AACJ,CAAC,CAAC;AACFpB,QAAQ,CAACkB,UAAU,CAACK,YAAY,GAAG,CAACH,KAAK,EAAEC,OAAO,KAAK;EACnD,IAAI,CAACD,KAAK,EAAE;IACR;EACJ;EACA,IAAI;IACA,MAAM;MAAEI;IAAQ,CAAC,GAAGH,OAAO;IAC3B,MAAMI,UAAU,GAAGD,OAAO,CAACE,QAAQ,CAAC,MAAM,CAAC;IAC3C,MAAMC,UAAU,GAAGH,OAAO,CACrBI,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CACpBA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CACpBA,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;IAC5B,MAAMC,MAAM,GAAG5B,OAAO,CAAC0B,UAAU,EAAEF,UAAU,GAAG,GAAG,GAAGK,SAAS,CAAC;IAChE,MAAMC,OAAO,GAAGV,OAAO,CAACU,OAAO,IAAIpB,WAAW;IAC9C,IAAIkB,MAAM,CAACP,IAAI,CAACF,KAAK,CAAC,EAAE;MACpB;IACJ;IACA,OAAOW,OAAO;EAClB,CAAC,CACD,OAAOC,GAAG,EAAE;IACR;EAAA;AAER,CAAC;AACD,SAASC,aAAaA,CAACC,KAAK,EAAE;EAC1B,OAAO5B,SAAS,CAAC6B,aAAa,CAACD,KAAK,CAAC,KAAK1B,eAAe,CAAC4B,MAAM;AACpE;AACApC,QAAQ,CAACkB,UAAU,CAACgB,KAAK,GAAG,CAACd,KAAK,EAAE;EAAEW,OAAO;EAAEM,OAAO,EAAEC,kBAAkB,GAAG,EAAE;EAAEC,MAAM,GAAG,IAAI;EAAEC,MAAM,GAAG,IAAI;EAAEC,qBAAqB,GAAGA,CAAA,KAAM;AAAM,CAAC,EAAEC,IAAI,EAAEC,UAAU,KAAK;EACvK,IAAI,CAACvB,KAAK,IAAI,CAACqB,qBAAqB,CAACrB,KAAK,EAAEuB,UAAU,CAAC,EAAE;IACrD;EACJ;EACA,MAAMC,SAAS,GAAGC,KAAK,CAACC,OAAO,CAACR,kBAAkB,CAAC,GAC7CA,kBAAkB,GAClB,IAAIO,KAAK,CAACP,kBAAkB,CAAC;EACnC,IAAI;IACA,MAAMS,GAAG,GAAGzC,SAAS,CAACJ,KAAK,CAACkB,KAAK,EAAEwB,SAAS,CAAC,CAAC,CAAC,CAAC;IAChD,IAAI,CAACJ,MAAM,EAAE;MACT,IAAIlC,SAAS,CAAC0C,gBAAgB,CAACD,GAAG,CAAC,EAC/B;MACJ,OAAOhB,OAAO,IAAIpB,WAAW;IACjC;IACA,MAAMsC,YAAY,GAAGL,SAAS,CAACM,MAAM,KAAK,CAAC,GACrC5C,SAAS,CAAC6C,aAAa,CAACJ,GAAG,CAAC,GAC5BH,SAAS,CAACQ,IAAI,CAAEf,OAAO,IAAK/B,SAAS,CAAC+C,sBAAsB,CAACN,GAAG,EAAEV,OAAO,CAAC,CAAC;IACjF,IAAIY,YAAY,EAAE;MACd,IAAIV,MAAM,IAAI,CAACN,aAAa,CAACc,GAAG,CAAC,EAAE;QAC/B,OAAOhB,OAAO,IAAI,wBAAwB;MAC9C;MACA;IACJ;EACJ,CAAC,CACD,OAAOC,GAAG,EAAE;IACR,OAAOD,OAAO,IAAIpB,WAAW;EACjC;EACA,OAAOoB,OAAO,IAAIpB,WAAW;AACjC,CAAC;AACD,eAAeX,QAAQ"},"metadata":{},"sourceType":"module"}