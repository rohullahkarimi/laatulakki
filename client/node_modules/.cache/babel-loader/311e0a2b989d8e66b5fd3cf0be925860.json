{"ast":null,"code":"\"use strict\";\n\nvar _sliceInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\");\nvar _Array$from = require(\"@babel/runtime-corejs3/core-js-stable/array/from\");\nvar _Symbol = require(\"@babel/runtime-corejs3/core-js-stable/symbol\");\nvar _getIteratorMethod = require(\"@babel/runtime-corejs3/core-js/get-iterator-method\");\nvar _Array$isArray = require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\");\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/slicedToArray\"));\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof _Symbol !== \"undefined\" && _getIteratorMethod(o) || o[\"@@iterator\"];\n  if (!it) {\n    if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  var _context4;\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = _sliceInstanceProperty(_context4 = Object.prototype.toString.call(o)).call(_context4, 8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return _Array$from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\n\n/*!\n * XRegExp Unicode Base 5.1.1\n * <xregexp.com>\n * Steven Levithan (c) 2008-present MIT License\n */\nvar _default = function _default(XRegExp) {\n  /**\n   * Adds base support for Unicode matching:\n   * - Adds syntax `\\p{..}` for matching Unicode tokens. Tokens can be inverted using `\\P{..}` or\n   *   `\\p{^..}`. Token names ignore case, spaces, hyphens, and underscores. You can omit the\n   *   braces for token names that are a single letter (e.g. `\\pL` or `PL`).\n   * - Adds flag A (astral), which enables 21-bit Unicode support.\n   * - Adds the `XRegExp.addUnicodeData` method used by other addons to provide character data.\n   *\n   * Unicode Base relies on externally provided Unicode character data. Official addons are\n   * available to provide data for Unicode categories, scripts, and properties.\n   *\n   * @requires XRegExp\n   */\n  // ==--------------------------==\n  // Private stuff\n  // ==--------------------------==\n  // Storage for Unicode data\n  var unicode = {};\n  var unicodeTypes = {}; // Reuse utils\n\n  var dec = XRegExp._dec;\n  var hex = XRegExp._hex;\n  var pad4 = XRegExp._pad4; // Generates a token lookup name: lowercase, with hyphens, spaces, and underscores removed\n\n  function normalize(name) {\n    return name.replace(/[- _]+/g, '').toLowerCase();\n  } // Gets the decimal code of a literal code unit, \\xHH, \\uHHHH, or a backslash-escaped literal\n\n  function charCode(chr) {\n    var esc = /^\\\\[xu](.+)/.exec(chr);\n    return esc ? dec(esc[1]) : chr.charCodeAt(chr[0] === '\\\\' ? 1 : 0);\n  } // Inverts a list of ordered BMP characters and ranges\n\n  function invertBmp(range) {\n    var output = '';\n    var lastEnd = -1;\n    (0, _forEach[\"default\"])(XRegExp).call(XRegExp, range, /(\\\\x..|\\\\u....|\\\\?[\\s\\S])(?:-(\\\\x..|\\\\u....|\\\\?[\\s\\S]))?/, function (m) {\n      var start = charCode(m[1]);\n      if (start > lastEnd + 1) {\n        output += \"\\\\u\".concat(pad4(hex(lastEnd + 1)));\n        if (start > lastEnd + 2) {\n          output += \"-\\\\u\".concat(pad4(hex(start - 1)));\n        }\n      }\n      lastEnd = charCode(m[2] || m[1]);\n    });\n    if (lastEnd < 0xFFFF) {\n      output += \"\\\\u\".concat(pad4(hex(lastEnd + 1)));\n      if (lastEnd < 0xFFFE) {\n        output += '-\\\\uFFFF';\n      }\n    }\n    return output;\n  } // Generates an inverted BMP range on first use\n\n  function cacheInvertedBmp(slug) {\n    var prop = 'b!';\n    return unicode[slug][prop] || (unicode[slug][prop] = invertBmp(unicode[slug].bmp));\n  } // Combines and optionally negates BMP and astral data\n\n  function buildAstral(slug, isNegated) {\n    var item = unicode[slug];\n    var combined = '';\n    if (item.bmp && !item.isBmpLast) {\n      var _context;\n      combined = (0, _concat[\"default\"])(_context = \"[\".concat(item.bmp, \"]\")).call(_context, item.astral ? '|' : '');\n    }\n    if (item.astral) {\n      combined += item.astral;\n    }\n    if (item.isBmpLast && item.bmp) {\n      var _context2;\n      combined += (0, _concat[\"default\"])(_context2 = \"\".concat(item.astral ? '|' : '', \"[\")).call(_context2, item.bmp, \"]\");\n    } // Astral Unicode tokens always match a code point, never a code unit\n\n    return isNegated ? \"(?:(?!\".concat(combined, \")(?:[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\0-\\uFFFF]))\") : \"(?:\".concat(combined, \")\");\n  } // Builds a complete astral pattern on first use\n\n  function cacheAstral(slug, isNegated) {\n    var prop = isNegated ? 'a!' : 'a=';\n    return unicode[slug][prop] || (unicode[slug][prop] = buildAstral(slug, isNegated));\n  } // ==--------------------------==\n  // Core functionality\n  // ==--------------------------==\n\n  /*\n   * Add astral mode (flag A) and Unicode token syntax: `\\p{..}`, `\\P{..}`, `\\p{^..}`, `\\pC`.\n   */\n\n  XRegExp.addToken(\n  // Use `*` instead of `+` to avoid capturing `^` as the token name in `\\p{^}`\n  /\\\\([pP])(?:{(\\^?)(?:(\\w+)=)?([^}]*)}|([A-Za-z]))/, function (match, scope, flags) {\n    var ERR_DOUBLE_NEG = 'Invalid double negation ';\n    var ERR_UNKNOWN_NAME = 'Unknown Unicode token ';\n    var ERR_UNKNOWN_REF = 'Unicode token missing data ';\n    var ERR_ASTRAL_ONLY = 'Astral mode required for Unicode token ';\n    var ERR_ASTRAL_IN_CLASS = 'Astral mode does not support Unicode tokens within character classes';\n    var _match = (0, _slicedToArray2[\"default\"])(match, 6),\n      fullToken = _match[0],\n      pPrefix = _match[1],\n      caretNegation = _match[2],\n      typePrefix = _match[3],\n      tokenName = _match[4],\n      tokenSingleCharName = _match[5]; // Negated via \\P{..} or \\p{^..}\n\n    var isNegated = pPrefix === 'P' || !!caretNegation; // Switch from BMP (0-FFFF) to astral (0-10FFFF) mode via flag A\n\n    var isAstralMode = (0, _indexOf[\"default\"])(flags).call(flags, 'A') !== -1; // Token lookup name. Check `tokenSingleCharName` first to avoid passing `undefined`\n    // via `\\p{}`\n\n    var slug = normalize(tokenSingleCharName || tokenName); // Token data object\n\n    var item = unicode[slug];\n    if (pPrefix === 'P' && caretNegation) {\n      throw new SyntaxError(ERR_DOUBLE_NEG + fullToken);\n    }\n    if (!unicode.hasOwnProperty(slug)) {\n      throw new SyntaxError(ERR_UNKNOWN_NAME + fullToken);\n    }\n    if (typePrefix) {\n      if (!(unicodeTypes[typePrefix] && unicodeTypes[typePrefix][slug])) {\n        throw new SyntaxError(ERR_UNKNOWN_NAME + fullToken);\n      }\n    } // Switch to the negated form of the referenced Unicode token\n\n    if (item.inverseOf) {\n      slug = normalize(item.inverseOf);\n      if (!unicode.hasOwnProperty(slug)) {\n        var _context3;\n        throw new ReferenceError((0, _concat[\"default\"])(_context3 = \"\".concat(ERR_UNKNOWN_REF + fullToken, \" -> \")).call(_context3, item.inverseOf));\n      }\n      item = unicode[slug];\n      isNegated = !isNegated;\n    }\n    if (!(item.bmp || isAstralMode)) {\n      throw new SyntaxError(ERR_ASTRAL_ONLY + fullToken);\n    }\n    if (isAstralMode) {\n      if (scope === 'class') {\n        throw new SyntaxError(ERR_ASTRAL_IN_CLASS);\n      }\n      return cacheAstral(slug, isNegated);\n    }\n    return scope === 'class' ? isNegated ? cacheInvertedBmp(slug) : item.bmp : \"\".concat((isNegated ? '[^' : '[') + item.bmp, \"]\");\n  }, {\n    scope: 'all',\n    optionalFlags: 'A',\n    leadChar: '\\\\'\n  });\n  /**\n   * Adds to the list of Unicode tokens that XRegExp regexes can match via `\\p` or `\\P`.\n   *\n   * @memberOf XRegExp\n   * @param {Array} data Objects with named character ranges. Each object may have properties\n   *   `name`, `alias`, `isBmpLast`, `inverseOf`, `bmp`, and `astral`. All but `name` are\n   *   optional, although one of `bmp` or `astral` is required (unless `inverseOf` is set). If\n   *   `astral` is absent, the `bmp` data is used for BMP and astral modes. If `bmp` is absent,\n   *   the name errors in BMP mode but works in astral mode. If both `bmp` and `astral` are\n   *   provided, the `bmp` data only is used in BMP mode, and the combination of `bmp` and\n   *   `astral` data is used in astral mode. `isBmpLast` is needed when a token matches orphan\n   *   high surrogates *and* uses surrogate pairs to match astral code points. The `bmp` and\n   *   `astral` data should be a combination of literal characters and `\\xHH` or `\\uHHHH` escape\n   *   sequences, with hyphens to create ranges. Any regex metacharacters in the data should be\n   *   escaped, apart from range-creating hyphens. The `astral` data can additionally use\n   *   character classes and alternation, and should use surrogate pairs to represent astral code\n   *   points. `inverseOf` can be used to avoid duplicating character data if a Unicode token is\n   *   defined as the exact inverse of another token.\n   * @param {String} [typePrefix] Enables optionally using this type as a prefix for all of the\n   *   provided Unicode tokens, e.g. if given `'Type'`, then `\\p{TokenName}` can also be written\n   *   as `\\p{Type=TokenName}`.\n   * @example\n   *\n   * // Basic use\n   * XRegExp.addUnicodeData([{\n   *   name: 'XDigit',\n   *   alias: 'Hexadecimal',\n   *   bmp: '0-9A-Fa-f'\n   * }]);\n   * XRegExp('\\\\p{XDigit}:\\\\p{Hexadecimal}+').test('0:3D'); // -> true\n   */\n\n  XRegExp.addUnicodeData = function (data, typePrefix) {\n    var ERR_NO_NAME = 'Unicode token requires name';\n    var ERR_NO_DATA = 'Unicode token has no character data ';\n    if (typePrefix) {\n      // Case sensitive to match ES2018\n      unicodeTypes[typePrefix] = {};\n    }\n    var _iterator = _createForOfIteratorHelper(data),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var item = _step.value;\n        if (!item.name) {\n          throw new Error(ERR_NO_NAME);\n        }\n        if (!(item.inverseOf || item.bmp || item.astral)) {\n          throw new Error(ERR_NO_DATA + item.name);\n        }\n        var normalizedName = normalize(item.name);\n        unicode[normalizedName] = item;\n        if (typePrefix) {\n          unicodeTypes[typePrefix][normalizedName] = true;\n        }\n        if (item.alias) {\n          var normalizedAlias = normalize(item.alias);\n          unicode[normalizedAlias] = item;\n          if (typePrefix) {\n            unicodeTypes[typePrefix][normalizedAlias] = true;\n          }\n        }\n      } // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and\n      // flags might now produce different results\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    XRegExp.cache.flush('patterns');\n  };\n  /**\n   * @ignore\n   *\n   * Return a reference to the internal Unicode definition structure for the given Unicode\n   * Property if the given name is a legal Unicode Property for use in XRegExp `\\p` or `\\P` regex\n   * constructs.\n   *\n   * @memberOf XRegExp\n   * @param {String} name Name by which the Unicode Property may be recognized (case-insensitive),\n   *   e.g. `'N'` or `'Number'`. The given name is matched against all registered Unicode\n   *   Properties and Property Aliases.\n   * @returns {Object} Reference to definition structure when the name matches a Unicode Property.\n   *\n   * @note\n   * For more info on Unicode Properties, see also http://unicode.org/reports/tr18/#Categories.\n   *\n   * @note\n   * This method is *not* part of the officially documented API and may change or be removed in\n   * the future. It is meant for userland code that wishes to reuse the (large) internal Unicode\n   * structures set up by XRegExp.\n   */\n\n  XRegExp._getUnicodeProperty = function (name) {\n    var slug = normalize(name);\n    return unicode[slug];\n  };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_sliceInstanceProperty","require","_Array$from","_Symbol","_getIteratorMethod","_Array$isArray","_Object$defineProperty","_interopRequireDefault","exports","value","_slicedToArray2","_forEach","_concat","_indexOf","_createForOfIteratorHelper","o","allowArrayLike","it","_unsupportedIterableToArray","length","i","F","s","n","done","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","minLen","_context4","_arrayLikeToArray","Object","prototype","toString","constructor","name","test","arr","len","arr2","Array","_default","XRegExp","unicode","unicodeTypes","dec","_dec","hex","_hex","pad4","_pad4","normalize","replace","toLowerCase","charCode","chr","esc","exec","charCodeAt","invertBmp","range","output","lastEnd","m","start","concat","cacheInvertedBmp","slug","prop","bmp","buildAstral","isNegated","item","combined","isBmpLast","_context","astral","_context2","cacheAstral","addToken","match","scope","flags","ERR_DOUBLE_NEG","ERR_UNKNOWN_NAME","ERR_UNKNOWN_REF","ERR_ASTRAL_ONLY","ERR_ASTRAL_IN_CLASS","_match","fullToken","pPrefix","caretNegation","typePrefix","tokenName","tokenSingleCharName","isAstralMode","SyntaxError","hasOwnProperty","inverseOf","_context3","ReferenceError","optionalFlags","leadChar","addUnicodeData","data","ERR_NO_NAME","ERR_NO_DATA","_iterator","_step","Error","normalizedName","alias","normalizedAlias","cache","flush","_getUnicodeProperty","module","default"],"sources":["/Users/rohullahkarimi/Local/laatuLakki_main/client/node_modules/xregexp/lib/addons/unicode-base.js"],"sourcesContent":["\"use strict\";\n\nvar _sliceInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\");\n\nvar _Array$from = require(\"@babel/runtime-corejs3/core-js-stable/array/from\");\n\nvar _Symbol = require(\"@babel/runtime-corejs3/core-js-stable/symbol\");\n\nvar _getIteratorMethod = require(\"@babel/runtime-corejs3/core-js/get-iterator-method\");\n\nvar _Array$isArray = require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports[\"default\"] = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/slicedToArray\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof _Symbol !== \"undefined\" && _getIteratorMethod(o) || o[\"@@iterator\"]; if (!it) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { var _context4; if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = _sliceInstanceProperty(_context4 = Object.prototype.toString.call(o)).call(_context4, 8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return _Array$from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*!\n * XRegExp Unicode Base 5.1.1\n * <xregexp.com>\n * Steven Levithan (c) 2008-present MIT License\n */\nvar _default = function _default(XRegExp) {\n  /**\n   * Adds base support for Unicode matching:\n   * - Adds syntax `\\p{..}` for matching Unicode tokens. Tokens can be inverted using `\\P{..}` or\n   *   `\\p{^..}`. Token names ignore case, spaces, hyphens, and underscores. You can omit the\n   *   braces for token names that are a single letter (e.g. `\\pL` or `PL`).\n   * - Adds flag A (astral), which enables 21-bit Unicode support.\n   * - Adds the `XRegExp.addUnicodeData` method used by other addons to provide character data.\n   *\n   * Unicode Base relies on externally provided Unicode character data. Official addons are\n   * available to provide data for Unicode categories, scripts, and properties.\n   *\n   * @requires XRegExp\n   */\n  // ==--------------------------==\n  // Private stuff\n  // ==--------------------------==\n  // Storage for Unicode data\n  var unicode = {};\n  var unicodeTypes = {}; // Reuse utils\n\n  var dec = XRegExp._dec;\n  var hex = XRegExp._hex;\n  var pad4 = XRegExp._pad4; // Generates a token lookup name: lowercase, with hyphens, spaces, and underscores removed\n\n  function normalize(name) {\n    return name.replace(/[- _]+/g, '').toLowerCase();\n  } // Gets the decimal code of a literal code unit, \\xHH, \\uHHHH, or a backslash-escaped literal\n\n\n  function charCode(chr) {\n    var esc = /^\\\\[xu](.+)/.exec(chr);\n    return esc ? dec(esc[1]) : chr.charCodeAt(chr[0] === '\\\\' ? 1 : 0);\n  } // Inverts a list of ordered BMP characters and ranges\n\n\n  function invertBmp(range) {\n    var output = '';\n    var lastEnd = -1;\n    (0, _forEach[\"default\"])(XRegExp).call(XRegExp, range, /(\\\\x..|\\\\u....|\\\\?[\\s\\S])(?:-(\\\\x..|\\\\u....|\\\\?[\\s\\S]))?/, function (m) {\n      var start = charCode(m[1]);\n\n      if (start > lastEnd + 1) {\n        output += \"\\\\u\".concat(pad4(hex(lastEnd + 1)));\n\n        if (start > lastEnd + 2) {\n          output += \"-\\\\u\".concat(pad4(hex(start - 1)));\n        }\n      }\n\n      lastEnd = charCode(m[2] || m[1]);\n    });\n\n    if (lastEnd < 0xFFFF) {\n      output += \"\\\\u\".concat(pad4(hex(lastEnd + 1)));\n\n      if (lastEnd < 0xFFFE) {\n        output += '-\\\\uFFFF';\n      }\n    }\n\n    return output;\n  } // Generates an inverted BMP range on first use\n\n\n  function cacheInvertedBmp(slug) {\n    var prop = 'b!';\n    return unicode[slug][prop] || (unicode[slug][prop] = invertBmp(unicode[slug].bmp));\n  } // Combines and optionally negates BMP and astral data\n\n\n  function buildAstral(slug, isNegated) {\n    var item = unicode[slug];\n    var combined = '';\n\n    if (item.bmp && !item.isBmpLast) {\n      var _context;\n\n      combined = (0, _concat[\"default\"])(_context = \"[\".concat(item.bmp, \"]\")).call(_context, item.astral ? '|' : '');\n    }\n\n    if (item.astral) {\n      combined += item.astral;\n    }\n\n    if (item.isBmpLast && item.bmp) {\n      var _context2;\n\n      combined += (0, _concat[\"default\"])(_context2 = \"\".concat(item.astral ? '|' : '', \"[\")).call(_context2, item.bmp, \"]\");\n    } // Astral Unicode tokens always match a code point, never a code unit\n\n\n    return isNegated ? \"(?:(?!\".concat(combined, \")(?:[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\0-\\uFFFF]))\") : \"(?:\".concat(combined, \")\");\n  } // Builds a complete astral pattern on first use\n\n\n  function cacheAstral(slug, isNegated) {\n    var prop = isNegated ? 'a!' : 'a=';\n    return unicode[slug][prop] || (unicode[slug][prop] = buildAstral(slug, isNegated));\n  } // ==--------------------------==\n  // Core functionality\n  // ==--------------------------==\n\n  /*\n   * Add astral mode (flag A) and Unicode token syntax: `\\p{..}`, `\\P{..}`, `\\p{^..}`, `\\pC`.\n   */\n\n\n  XRegExp.addToken( // Use `*` instead of `+` to avoid capturing `^` as the token name in `\\p{^}`\n  /\\\\([pP])(?:{(\\^?)(?:(\\w+)=)?([^}]*)}|([A-Za-z]))/, function (match, scope, flags) {\n    var ERR_DOUBLE_NEG = 'Invalid double negation ';\n    var ERR_UNKNOWN_NAME = 'Unknown Unicode token ';\n    var ERR_UNKNOWN_REF = 'Unicode token missing data ';\n    var ERR_ASTRAL_ONLY = 'Astral mode required for Unicode token ';\n    var ERR_ASTRAL_IN_CLASS = 'Astral mode does not support Unicode tokens within character classes';\n\n    var _match = (0, _slicedToArray2[\"default\"])(match, 6),\n        fullToken = _match[0],\n        pPrefix = _match[1],\n        caretNegation = _match[2],\n        typePrefix = _match[3],\n        tokenName = _match[4],\n        tokenSingleCharName = _match[5]; // Negated via \\P{..} or \\p{^..}\n\n\n    var isNegated = pPrefix === 'P' || !!caretNegation; // Switch from BMP (0-FFFF) to astral (0-10FFFF) mode via flag A\n\n    var isAstralMode = (0, _indexOf[\"default\"])(flags).call(flags, 'A') !== -1; // Token lookup name. Check `tokenSingleCharName` first to avoid passing `undefined`\n    // via `\\p{}`\n\n    var slug = normalize(tokenSingleCharName || tokenName); // Token data object\n\n    var item = unicode[slug];\n\n    if (pPrefix === 'P' && caretNegation) {\n      throw new SyntaxError(ERR_DOUBLE_NEG + fullToken);\n    }\n\n    if (!unicode.hasOwnProperty(slug)) {\n      throw new SyntaxError(ERR_UNKNOWN_NAME + fullToken);\n    }\n\n    if (typePrefix) {\n      if (!(unicodeTypes[typePrefix] && unicodeTypes[typePrefix][slug])) {\n        throw new SyntaxError(ERR_UNKNOWN_NAME + fullToken);\n      }\n    } // Switch to the negated form of the referenced Unicode token\n\n\n    if (item.inverseOf) {\n      slug = normalize(item.inverseOf);\n\n      if (!unicode.hasOwnProperty(slug)) {\n        var _context3;\n\n        throw new ReferenceError((0, _concat[\"default\"])(_context3 = \"\".concat(ERR_UNKNOWN_REF + fullToken, \" -> \")).call(_context3, item.inverseOf));\n      }\n\n      item = unicode[slug];\n      isNegated = !isNegated;\n    }\n\n    if (!(item.bmp || isAstralMode)) {\n      throw new SyntaxError(ERR_ASTRAL_ONLY + fullToken);\n    }\n\n    if (isAstralMode) {\n      if (scope === 'class') {\n        throw new SyntaxError(ERR_ASTRAL_IN_CLASS);\n      }\n\n      return cacheAstral(slug, isNegated);\n    }\n\n    return scope === 'class' ? isNegated ? cacheInvertedBmp(slug) : item.bmp : \"\".concat((isNegated ? '[^' : '[') + item.bmp, \"]\");\n  }, {\n    scope: 'all',\n    optionalFlags: 'A',\n    leadChar: '\\\\'\n  });\n  /**\n   * Adds to the list of Unicode tokens that XRegExp regexes can match via `\\p` or `\\P`.\n   *\n   * @memberOf XRegExp\n   * @param {Array} data Objects with named character ranges. Each object may have properties\n   *   `name`, `alias`, `isBmpLast`, `inverseOf`, `bmp`, and `astral`. All but `name` are\n   *   optional, although one of `bmp` or `astral` is required (unless `inverseOf` is set). If\n   *   `astral` is absent, the `bmp` data is used for BMP and astral modes. If `bmp` is absent,\n   *   the name errors in BMP mode but works in astral mode. If both `bmp` and `astral` are\n   *   provided, the `bmp` data only is used in BMP mode, and the combination of `bmp` and\n   *   `astral` data is used in astral mode. `isBmpLast` is needed when a token matches orphan\n   *   high surrogates *and* uses surrogate pairs to match astral code points. The `bmp` and\n   *   `astral` data should be a combination of literal characters and `\\xHH` or `\\uHHHH` escape\n   *   sequences, with hyphens to create ranges. Any regex metacharacters in the data should be\n   *   escaped, apart from range-creating hyphens. The `astral` data can additionally use\n   *   character classes and alternation, and should use surrogate pairs to represent astral code\n   *   points. `inverseOf` can be used to avoid duplicating character data if a Unicode token is\n   *   defined as the exact inverse of another token.\n   * @param {String} [typePrefix] Enables optionally using this type as a prefix for all of the\n   *   provided Unicode tokens, e.g. if given `'Type'`, then `\\p{TokenName}` can also be written\n   *   as `\\p{Type=TokenName}`.\n   * @example\n   *\n   * // Basic use\n   * XRegExp.addUnicodeData([{\n   *   name: 'XDigit',\n   *   alias: 'Hexadecimal',\n   *   bmp: '0-9A-Fa-f'\n   * }]);\n   * XRegExp('\\\\p{XDigit}:\\\\p{Hexadecimal}+').test('0:3D'); // -> true\n   */\n\n  XRegExp.addUnicodeData = function (data, typePrefix) {\n    var ERR_NO_NAME = 'Unicode token requires name';\n    var ERR_NO_DATA = 'Unicode token has no character data ';\n\n    if (typePrefix) {\n      // Case sensitive to match ES2018\n      unicodeTypes[typePrefix] = {};\n    }\n\n    var _iterator = _createForOfIteratorHelper(data),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var item = _step.value;\n\n        if (!item.name) {\n          throw new Error(ERR_NO_NAME);\n        }\n\n        if (!(item.inverseOf || item.bmp || item.astral)) {\n          throw new Error(ERR_NO_DATA + item.name);\n        }\n\n        var normalizedName = normalize(item.name);\n        unicode[normalizedName] = item;\n\n        if (typePrefix) {\n          unicodeTypes[typePrefix][normalizedName] = true;\n        }\n\n        if (item.alias) {\n          var normalizedAlias = normalize(item.alias);\n          unicode[normalizedAlias] = item;\n\n          if (typePrefix) {\n            unicodeTypes[typePrefix][normalizedAlias] = true;\n          }\n        }\n      } // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and\n      // flags might now produce different results\n\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    XRegExp.cache.flush('patterns');\n  };\n  /**\n   * @ignore\n   *\n   * Return a reference to the internal Unicode definition structure for the given Unicode\n   * Property if the given name is a legal Unicode Property for use in XRegExp `\\p` or `\\P` regex\n   * constructs.\n   *\n   * @memberOf XRegExp\n   * @param {String} name Name by which the Unicode Property may be recognized (case-insensitive),\n   *   e.g. `'N'` or `'Number'`. The given name is matched against all registered Unicode\n   *   Properties and Property Aliases.\n   * @returns {Object} Reference to definition structure when the name matches a Unicode Property.\n   *\n   * @note\n   * For more info on Unicode Properties, see also http://unicode.org/reports/tr18/#Categories.\n   *\n   * @note\n   * This method is *not* part of the officially documented API and may change or be removed in\n   * the future. It is meant for userland code that wishes to reuse the (large) internal Unicode\n   * structures set up by XRegExp.\n   */\n\n\n  XRegExp._getUnicodeProperty = function (name) {\n    var slug = normalize(name);\n    return unicode[slug];\n  };\n};\n\nexports[\"default\"] = _default;\nmodule.exports = exports.default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}