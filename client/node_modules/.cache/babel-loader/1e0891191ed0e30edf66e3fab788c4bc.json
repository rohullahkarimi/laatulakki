{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Loader, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter } from \"three\";\nconst _taskCache = /* @__PURE__ */new WeakMap();\nconst _BasisTextureLoader = class extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = \"\";\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = \"\";\n    this.workerConfig = null;\n  }\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_astc\"),\n      etc1Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc1\"),\n      etc2Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc\"),\n      dxtSupported: renderer.extensions.has(\"WEBGL_compressed_texture_s3tc\"),\n      bptcSupported: renderer.extensions.has(\"EXT_texture_compression_bptc\"),\n      pvrtcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_pvrtc\") || renderer.extensions.has(\"WEBKIT_WEBGL_compressed_texture_pvrtc\")\n    };\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setWithCredentials(this.withCredentials);\n    const texture = new CompressedTexture();\n    loader.load(url, buffer => {\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n      this._createTexture([buffer]).then(function (_texture) {\n        texture.copy(_texture);\n        texture.needsUpdate = true;\n        if (onLoad) onLoad(texture);\n      }).catch(onError);\n    }, onProgress, onError);\n    return texture;\n  }\n  /** Low-level transcoding API, exposed for use by KTX2Loader. */\n  parseInternalAsync(options) {\n    const {\n      levels\n    } = options;\n    const buffers = /* @__PURE__ */new Set();\n    for (let i = 0; i < levels.length; i++) {\n      buffers.add(levels[i].data.buffer);\n    }\n    return this._createTexture(Array.from(buffers), {\n      ...options,\n      lowLevel: true\n    });\n  }\n  /**\n   * @param {ArrayBuffer[]} buffers\n   * @param {object?} config\n   * @return {Promise<CompressedTexture>}\n   */\n  _createTexture(buffers, config = {}) {\n    let worker;\n    let taskID;\n    const taskConfig = config;\n    let taskCost = 0;\n    for (let i = 0; i < buffers.length; i++) {\n      taskCost += buffers[i].byteLength;\n    }\n    const texturePending = this._allocateWorker(taskCost).then(_worker => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = {\n          resolve,\n          reject\n        };\n        worker.postMessage({\n          type: \"transcode\",\n          id: taskID,\n          buffers,\n          taskConfig\n        }, buffers);\n      });\n    }).then(message => {\n      const {\n        mipmaps,\n        width,\n        height,\n        format\n      } = message;\n      const texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n      texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.needsUpdate = true;\n      return texture;\n    });\n    texturePending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        worker._taskLoad -= taskCost;\n        delete worker._callbacks[taskID];\n      }\n    });\n    _taskCache.set(buffers[0], {\n      promise: texturePending\n    });\n    return texturePending;\n  }\n  _initTranscoder() {\n    if (!this.transcoderPending) {\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = new Promise((resolve, reject) => {\n        jsLoader.load(\"basis_transcoder.js\", resolve, void 0, reject);\n      });\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType(\"arraybuffer\");\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load(\"basis_transcoder.wasm\", resolve, void 0, reject);\n      });\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent2, binaryContent2]) => {\n        const fn = _BasisTextureLoader.BasisWorker.toString();\n        const body = [\"/* constants */\", \"let _EngineFormat = \" + JSON.stringify(_BasisTextureLoader.EngineFormat), \"let _TranscoderFormat = \" + JSON.stringify(_BasisTextureLoader.TranscoderFormat), \"let _BasisFormat = \" + JSON.stringify(_BasisTextureLoader.BasisFormat), \"/* basis_transcoder.js */\", jsContent2, \"/* worker */\", fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))].join(\"\\n\");\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent2;\n      });\n    }\n    return this.transcoderPending;\n  }\n  _allocateWorker(taskCost) {\n    return this._initTranscoder().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker2 = new Worker(this.workerSourceURL);\n        worker2._callbacks = {};\n        worker2._taskLoad = 0;\n        worker2.postMessage({\n          type: \"init\",\n          config: this.workerConfig,\n          transcoderBinary: this.transcoderBinary\n        });\n        worker2.onmessage = function (e) {\n          const message = e.data;\n          switch (message.type) {\n            case \"transcode\":\n              worker2._callbacks[message.id].resolve(message);\n              break;\n            case \"error\":\n              worker2._callbacks[message.id].reject(message);\n              break;\n            default:\n              console.error('THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n        this.workerPool.push(worker2);\n      } else {\n        this.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; i++) {\n      this.workerPool[i].terminate();\n    }\n    this.workerPool.length = 0;\n    return this;\n  }\n};\nlet BasisTextureLoader = _BasisTextureLoader;\n/* CONSTANTS */\n__publicField(BasisTextureLoader, \"BasisFormat\", {\n  ETC1S: 0,\n  UASTC_4x4: 1\n});\n__publicField(BasisTextureLoader, \"TranscoderFormat\", {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n});\n__publicField(BasisTextureLoader, \"EngineFormat\", {\n  RGBAFormat,\n  RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format,\n  RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format\n});\n/* WEB WORKER */\n__publicField(BasisTextureLoader, \"BasisWorker\", function () {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat;\n  const TranscoderFormat = _TranscoderFormat;\n  const BasisFormat = _BasisFormat;\n  onmessage = function (e) {\n    const message = e.data;\n    switch (message.type) {\n      case \"init\":\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n      case \"transcode\":\n        transcoderPending.then(() => {\n          try {\n            const {\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format\n            } = message.taskConfig.lowLevel ? transcodeLowLevel(message.taskConfig) : transcode(message.buffers[0]);\n            const buffers = [];\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n            self.postMessage({\n              type: \"transcode\",\n              id: message.id,\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: \"error\",\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  };\n  function init(wasmBinary) {\n    transcoderPending = new Promise(resolve => {\n      BasisModule = {\n        wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule);\n    }).then(() => {\n      BasisModule.initializeBasis();\n    });\n  }\n  function transcodeLowLevel(taskConfig) {\n    const {\n      basisFormat,\n      width,\n      height,\n      hasAlpha\n    } = taskConfig;\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    const blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    assert(BasisModule.isFormatSupported(transcoderFormat), \"THREE.BasisTextureLoader: Unsupported format.\");\n    const mipmaps = [];\n    if (basisFormat === BasisFormat.ETC1S) {\n      const transcoder = new BasisModule.LowLevelETC1SImageTranscoder();\n      const {\n        endpointCount,\n        endpointsData,\n        selectorCount,\n        selectorsData,\n        tablesData\n      } = taskConfig.globalData;\n      try {\n        let ok;\n        ok = transcoder.decodePalettes(endpointCount, endpointsData, selectorCount, selectorsData);\n        assert(ok, \"THREE.BasisTextureLoader: decodePalettes() failed.\");\n        ok = transcoder.decodeTables(tablesData);\n        assert(ok, \"THREE.BasisTextureLoader: decodeTables() failed.\");\n        for (let i = 0; i < taskConfig.levels.length; i++) {\n          const level = taskConfig.levels[i];\n          const imageDesc = taskConfig.globalData.imageDescs[i];\n          const dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n          const dst = new Uint8Array(dstByteLength);\n          ok = transcoder.transcodeImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, imageDesc.rgbSliceByteOffset, imageDesc.rgbSliceByteLength, imageDesc.alphaSliceByteOffset, imageDesc.alphaSliceByteLength, imageDesc.imageFlags, hasAlpha, false, 0, 0);\n          assert(ok, \"THREE.BasisTextureLoader: transcodeImage() failed for level \" + level.index + \".\");\n          mipmaps.push({\n            data: dst,\n            width: level.width,\n            height: level.height\n          });\n        }\n      } finally {\n        transcoder.delete();\n      }\n    } else {\n      for (let i = 0; i < taskConfig.levels.length; i++) {\n        const level = taskConfig.levels[i];\n        const dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n        const dst = new Uint8Array(dstByteLength);\n        const ok = BasisModule.transcodeUASTCImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, 0, level.data.byteLength, 0, hasAlpha, false, 0, 0, -1, -1);\n        assert(ok, \"THREE.BasisTextureLoader: transcodeUASTCImage() failed for level \" + level.index + \".\");\n        mipmaps.push({\n          data: dst,\n          width: level.width,\n          height: level.height\n        });\n      }\n    }\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat\n    };\n  }\n  function transcode(buffer) {\n    const basisFile = new BasisModule.BasisFile(new Uint8Array(buffer));\n    const basisFormat = basisFile.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = basisFile.getImageWidth(0, 0);\n    const height = basisFile.getImageHeight(0, 0);\n    const levels = basisFile.getNumLevels(0);\n    const hasAlpha = basisFile.getHasAlpha();\n    function cleanup() {\n      basisFile.close();\n      basisFile.delete();\n    }\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error(\"THREE.BasisTextureLoader:\tInvalid texture\");\n    }\n    if (!basisFile.startTranscoding()) {\n      cleanup();\n      throw new Error(\"THREE.BasisTextureLoader: .startTranscoding failed\");\n    }\n    const mipmaps = [];\n    for (let mip = 0; mip < levels; mip++) {\n      const mipWidth = basisFile.getImageWidth(0, mip);\n      const mipHeight = basisFile.getImageHeight(0, mip);\n      const dst = new Uint8Array(basisFile.getImageTranscodedSizeInBytes(0, mip, transcoderFormat));\n      const status = basisFile.transcodeImage(dst, 0, mip, transcoderFormat, 0, hasAlpha);\n      if (!status) {\n        cleanup();\n        throw new Error(\"THREE.BasisTextureLoader: .transcodeImage failed.\");\n      }\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n    cleanup();\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat\n    };\n  }\n  const FORMAT_OPTIONS = [{\n    if: \"astcSupported\",\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: \"bptcSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: \"dxtSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: \"etc2Supported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: \"etc1Supported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format, EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: \"pvrtcSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat,\n        engineFormat\n      };\n    }\n    console.warn(\"THREE.BasisTextureLoader: No suitable compressed texture format found. Decoding to RGBA32.\");\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat,\n      engineFormat\n    };\n  }\n  function assert(ok, message) {\n    if (!ok) throw new Error(message);\n  }\n  function getWidthInBlocks(transcoderFormat, width) {\n    return Math.ceil(width / BasisModule.getFormatBlockWidth(transcoderFormat));\n  }\n  function getHeightInBlocks(transcoderFormat, height) {\n    return Math.ceil(height / BasisModule.getFormatBlockHeight(transcoderFormat));\n  }\n  function getTranscodedImageByteLength(transcoderFormat, width, height) {\n    const blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    if (BasisModule.formatIsUncompressed(transcoderFormat)) {\n      return width * height * blockByteLength;\n    }\n    if (transcoderFormat === TranscoderFormat.PVRTC1_4_RGB || transcoderFormat === TranscoderFormat.PVRTC1_4_RGBA) {\n      const paddedWidth = width + 3 & ~3;\n      const paddedHeight = height + 3 & ~3;\n      return (Math.max(8, paddedWidth) * Math.max(8, paddedHeight) * 4 + 7) / 8;\n    }\n    return getWidthInBlocks(transcoderFormat, width) * getHeightInBlocks(transcoderFormat, height) * blockByteLength;\n  }\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n});\nexport { BasisTextureLoader };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Loader","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","FileLoader","CompressedTexture","UnsignedByteType","LinearFilter","LinearMipmapLinearFilter","_taskCache","WeakMap","_BasisTextureLoader","constructor","manager","transcoderPath","transcoderBinary","transcoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","workerConfig","setTranscoderPath","path","setWorkerLimit","detectSupport","renderer","astcSupported","extensions","has","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","load","url","onLoad","onProgress","onError","loader","setResponseType","setWithCredentials","withCredentials","texture","buffer","cachedTask","get","promise","then","catch","_createTexture","_texture","copy","needsUpdate","parseInternalAsync","options","levels","buffers","Set","i","length","add","data","Array","from","lowLevel","config","worker","taskID","taskConfig","taskCost","byteLength","texturePending","_allocateWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","type","id","message","mipmaps","width","height","format","minFilter","magFilter","generateMipmaps","_taskLoad","set","_initTranscoder","jsLoader","setPath","jsContent","binaryLoader","binaryContent","all","jsContent2","binaryContent2","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","worker2","Worker","onmessage","e","console","error","push","sort","a","b","dispose","terminate","BasisTextureLoader","ETC1S","UASTC_4x4","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","BasisModule","_EngineFormat","_TranscoderFormat","_BasisFormat","init","hasAlpha","transcodeLowLevel","transcode","self","wasmBinary","onRuntimeInitialized","BASIS","initializeBasis","basisFormat","transcoderFormat","engineFormat","getTranscoderFormat","blockByteLength","getBytesPerBlockOrPixel","assert","isFormatSupported","transcoder","LowLevelETC1SImageTranscoder","endpointCount","endpointsData","selectorCount","selectorsData","tablesData","globalData","ok","decodePalettes","decodeTables","level","imageDesc","imageDescs","dstByteLength","getTranscodedImageByteLength","dst","Uint8Array","transcodeImage","getWidthInBlocks","getHeightInBlocks","index","rgbSliceByteOffset","rgbSliceByteLength","alphaSliceByteOffset","alphaSliceByteLength","imageFlags","delete","transcodeUASTCImage","basisFile","BasisFile","isUASTC","getImageWidth","getImageHeight","getNumLevels","getHasAlpha","cleanup","close","Error","startTranscoding","mip","mipWidth","mipHeight","getImageTranscodedSizeInBytes","status","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","needsPowerOfTwo","ETC1S_OPTIONS","UASTC_OPTIONS","opt","includes","isPowerOfTwo","warn","Math","ceil","getFormatBlockWidth","getFormatBlockHeight","formatIsUncompressed","paddedWidth","paddedHeight","max"],"sources":["/Users/rohullahkarimi/Local/laatuLakki_main/client/node_modules/three-stdlib/loaders/BasisTextureLoader.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Loader, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter } from \"three\";\nconst _taskCache = /* @__PURE__ */ new WeakMap();\nconst _BasisTextureLoader = class extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = \"\";\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = \"\";\n    this.workerConfig = null;\n  }\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_astc\"),\n      etc1Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc1\"),\n      etc2Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc\"),\n      dxtSupported: renderer.extensions.has(\"WEBGL_compressed_texture_s3tc\"),\n      bptcSupported: renderer.extensions.has(\"EXT_texture_compression_bptc\"),\n      pvrtcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_pvrtc\") || renderer.extensions.has(\"WEBKIT_WEBGL_compressed_texture_pvrtc\")\n    };\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setWithCredentials(this.withCredentials);\n    const texture = new CompressedTexture();\n    loader.load(\n      url,\n      (buffer) => {\n        if (_taskCache.has(buffer)) {\n          const cachedTask = _taskCache.get(buffer);\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n        this._createTexture([buffer]).then(function(_texture) {\n          texture.copy(_texture);\n          texture.needsUpdate = true;\n          if (onLoad)\n            onLoad(texture);\n        }).catch(onError);\n      },\n      onProgress,\n      onError\n    );\n    return texture;\n  }\n  /** Low-level transcoding API, exposed for use by KTX2Loader. */\n  parseInternalAsync(options) {\n    const { levels } = options;\n    const buffers = /* @__PURE__ */ new Set();\n    for (let i = 0; i < levels.length; i++) {\n      buffers.add(levels[i].data.buffer);\n    }\n    return this._createTexture(Array.from(buffers), { ...options, lowLevel: true });\n  }\n  /**\n   * @param {ArrayBuffer[]} buffers\n   * @param {object?} config\n   * @return {Promise<CompressedTexture>}\n   */\n  _createTexture(buffers, config = {}) {\n    let worker;\n    let taskID;\n    const taskConfig = config;\n    let taskCost = 0;\n    for (let i = 0; i < buffers.length; i++) {\n      taskCost += buffers[i].byteLength;\n    }\n    const texturePending = this._allocateWorker(taskCost).then((_worker) => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = { resolve, reject };\n        worker.postMessage({ type: \"transcode\", id: taskID, buffers, taskConfig }, buffers);\n      });\n    }).then((message) => {\n      const { mipmaps, width, height, format } = message;\n      const texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n      texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.needsUpdate = true;\n      return texture;\n    });\n    texturePending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        worker._taskLoad -= taskCost;\n        delete worker._callbacks[taskID];\n      }\n    });\n    _taskCache.set(buffers[0], { promise: texturePending });\n    return texturePending;\n  }\n  _initTranscoder() {\n    if (!this.transcoderPending) {\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = new Promise((resolve, reject) => {\n        jsLoader.load(\"basis_transcoder.js\", resolve, void 0, reject);\n      });\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType(\"arraybuffer\");\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load(\"basis_transcoder.wasm\", resolve, void 0, reject);\n      });\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent2, binaryContent2]) => {\n        const fn = _BasisTextureLoader.BasisWorker.toString();\n        const body = [\n          \"/* constants */\",\n          \"let _EngineFormat = \" + JSON.stringify(_BasisTextureLoader.EngineFormat),\n          \"let _TranscoderFormat = \" + JSON.stringify(_BasisTextureLoader.TranscoderFormat),\n          \"let _BasisFormat = \" + JSON.stringify(_BasisTextureLoader.BasisFormat),\n          \"/* basis_transcoder.js */\",\n          jsContent2,\n          \"/* worker */\",\n          fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))\n        ].join(\"\\n\");\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent2;\n      });\n    }\n    return this.transcoderPending;\n  }\n  _allocateWorker(taskCost) {\n    return this._initTranscoder().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker2 = new Worker(this.workerSourceURL);\n        worker2._callbacks = {};\n        worker2._taskLoad = 0;\n        worker2.postMessage({\n          type: \"init\",\n          config: this.workerConfig,\n          transcoderBinary: this.transcoderBinary\n        });\n        worker2.onmessage = function(e) {\n          const message = e.data;\n          switch (message.type) {\n            case \"transcode\":\n              worker2._callbacks[message.id].resolve(message);\n              break;\n            case \"error\":\n              worker2._callbacks[message.id].reject(message);\n              break;\n            default:\n              console.error('THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n        this.workerPool.push(worker2);\n      } else {\n        this.workerPool.sort(function(a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; i++) {\n      this.workerPool[i].terminate();\n    }\n    this.workerPool.length = 0;\n    return this;\n  }\n};\nlet BasisTextureLoader = _BasisTextureLoader;\n/* CONSTANTS */\n__publicField(BasisTextureLoader, \"BasisFormat\", {\n  ETC1S: 0,\n  UASTC_4x4: 1\n});\n__publicField(BasisTextureLoader, \"TranscoderFormat\", {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n});\n__publicField(BasisTextureLoader, \"EngineFormat\", {\n  RGBAFormat,\n  RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format,\n  RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format\n});\n/* WEB WORKER */\n__publicField(BasisTextureLoader, \"BasisWorker\", function() {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat;\n  const TranscoderFormat = _TranscoderFormat;\n  const BasisFormat = _BasisFormat;\n  onmessage = function(e) {\n    const message = e.data;\n    switch (message.type) {\n      case \"init\":\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n      case \"transcode\":\n        transcoderPending.then(() => {\n          try {\n            const { width, height, hasAlpha, mipmaps, format } = message.taskConfig.lowLevel ? transcodeLowLevel(message.taskConfig) : transcode(message.buffers[0]);\n            const buffers = [];\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n            self.postMessage({ type: \"transcode\", id: message.id, width, height, hasAlpha, mipmaps, format }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({ type: \"error\", id: message.id, error: error.message });\n          }\n        });\n        break;\n    }\n  };\n  function init(wasmBinary) {\n    transcoderPending = new Promise((resolve) => {\n      BasisModule = { wasmBinary, onRuntimeInitialized: resolve };\n      BASIS(BasisModule);\n    }).then(() => {\n      BasisModule.initializeBasis();\n    });\n  }\n  function transcodeLowLevel(taskConfig) {\n    const { basisFormat, width, height, hasAlpha } = taskConfig;\n    const { transcoderFormat, engineFormat } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    const blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    assert(BasisModule.isFormatSupported(transcoderFormat), \"THREE.BasisTextureLoader: Unsupported format.\");\n    const mipmaps = [];\n    if (basisFormat === BasisFormat.ETC1S) {\n      const transcoder = new BasisModule.LowLevelETC1SImageTranscoder();\n      const { endpointCount, endpointsData, selectorCount, selectorsData, tablesData } = taskConfig.globalData;\n      try {\n        let ok;\n        ok = transcoder.decodePalettes(endpointCount, endpointsData, selectorCount, selectorsData);\n        assert(ok, \"THREE.BasisTextureLoader: decodePalettes() failed.\");\n        ok = transcoder.decodeTables(tablesData);\n        assert(ok, \"THREE.BasisTextureLoader: decodeTables() failed.\");\n        for (let i = 0; i < taskConfig.levels.length; i++) {\n          const level = taskConfig.levels[i];\n          const imageDesc = taskConfig.globalData.imageDescs[i];\n          const dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n          const dst = new Uint8Array(dstByteLength);\n          ok = transcoder.transcodeImage(\n            transcoderFormat,\n            dst,\n            dstByteLength / blockByteLength,\n            level.data,\n            getWidthInBlocks(transcoderFormat, level.width),\n            getHeightInBlocks(transcoderFormat, level.height),\n            level.width,\n            level.height,\n            level.index,\n            imageDesc.rgbSliceByteOffset,\n            imageDesc.rgbSliceByteLength,\n            imageDesc.alphaSliceByteOffset,\n            imageDesc.alphaSliceByteLength,\n            imageDesc.imageFlags,\n            hasAlpha,\n            false,\n            0,\n            0\n          );\n          assert(ok, \"THREE.BasisTextureLoader: transcodeImage() failed for level \" + level.index + \".\");\n          mipmaps.push({ data: dst, width: level.width, height: level.height });\n        }\n      } finally {\n        transcoder.delete();\n      }\n    } else {\n      for (let i = 0; i < taskConfig.levels.length; i++) {\n        const level = taskConfig.levels[i];\n        const dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n        const dst = new Uint8Array(dstByteLength);\n        const ok = BasisModule.transcodeUASTCImage(\n          transcoderFormat,\n          dst,\n          dstByteLength / blockByteLength,\n          level.data,\n          getWidthInBlocks(transcoderFormat, level.width),\n          getHeightInBlocks(transcoderFormat, level.height),\n          level.width,\n          level.height,\n          level.index,\n          0,\n          level.data.byteLength,\n          0,\n          hasAlpha,\n          false,\n          0,\n          0,\n          -1,\n          -1\n        );\n        assert(ok, \"THREE.BasisTextureLoader: transcodeUASTCImage() failed for level \" + level.index + \".\");\n        mipmaps.push({ data: dst, width: level.width, height: level.height });\n      }\n    }\n    return { width, height, hasAlpha, mipmaps, format: engineFormat };\n  }\n  function transcode(buffer) {\n    const basisFile = new BasisModule.BasisFile(new Uint8Array(buffer));\n    const basisFormat = basisFile.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = basisFile.getImageWidth(0, 0);\n    const height = basisFile.getImageHeight(0, 0);\n    const levels = basisFile.getNumLevels(0);\n    const hasAlpha = basisFile.getHasAlpha();\n    function cleanup() {\n      basisFile.close();\n      basisFile.delete();\n    }\n    const { transcoderFormat, engineFormat } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error(\"THREE.BasisTextureLoader:\tInvalid texture\");\n    }\n    if (!basisFile.startTranscoding()) {\n      cleanup();\n      throw new Error(\"THREE.BasisTextureLoader: .startTranscoding failed\");\n    }\n    const mipmaps = [];\n    for (let mip = 0; mip < levels; mip++) {\n      const mipWidth = basisFile.getImageWidth(0, mip);\n      const mipHeight = basisFile.getImageHeight(0, mip);\n      const dst = new Uint8Array(basisFile.getImageTranscodedSizeInBytes(0, mip, transcoderFormat));\n      const status = basisFile.transcodeImage(dst, 0, mip, transcoderFormat, 0, hasAlpha);\n      if (!status) {\n        cleanup();\n        throw new Error(\"THREE.BasisTextureLoader: .transcodeImage failed.\");\n      }\n      mipmaps.push({ data: dst, width: mipWidth, height: mipHeight });\n    }\n    cleanup();\n    return { width, height, hasAlpha, mipmaps, format: engineFormat };\n  }\n  const FORMAT_OPTIONS = [\n    {\n      if: \"astcSupported\",\n      basisFormat: [BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n      engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n      priorityETC1S: Infinity,\n      priorityUASTC: 1,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"bptcSupported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n      engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n      priorityETC1S: 3,\n      priorityUASTC: 2,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"dxtSupported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n      engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n      priorityETC1S: 4,\n      priorityUASTC: 5,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"etc2Supported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n      engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n      priorityETC1S: 1,\n      priorityUASTC: 3,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"etc1Supported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC1],\n      engineFormat: [EngineFormat.RGB_ETC1_Format, EngineFormat.RGB_ETC1_Format],\n      priorityETC1S: 2,\n      priorityUASTC: 4,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"pvrtcSupported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n      engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n      priorityETC1S: 5,\n      priorityUASTC: 6,\n      needsPowerOfTwo: true\n    }\n  ];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function(a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function(a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if])\n        continue;\n      if (!opt.basisFormat.includes(basisFormat))\n        continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height)))\n        continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return { transcoderFormat, engineFormat };\n    }\n    console.warn(\"THREE.BasisTextureLoader: No suitable compressed texture format found. Decoding to RGBA32.\");\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return { transcoderFormat, engineFormat };\n  }\n  function assert(ok, message) {\n    if (!ok)\n      throw new Error(message);\n  }\n  function getWidthInBlocks(transcoderFormat, width) {\n    return Math.ceil(width / BasisModule.getFormatBlockWidth(transcoderFormat));\n  }\n  function getHeightInBlocks(transcoderFormat, height) {\n    return Math.ceil(height / BasisModule.getFormatBlockHeight(transcoderFormat));\n  }\n  function getTranscodedImageByteLength(transcoderFormat, width, height) {\n    const blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    if (BasisModule.formatIsUncompressed(transcoderFormat)) {\n      return width * height * blockByteLength;\n    }\n    if (transcoderFormat === TranscoderFormat.PVRTC1_4_RGB || transcoderFormat === TranscoderFormat.PVRTC1_4_RGBA) {\n      const paddedWidth = width + 3 & ~3;\n      const paddedHeight = height + 3 & ~3;\n      return (Math.max(8, paddedWidth) * Math.max(8, paddedHeight) * 4 + 7) / 8;\n    }\n    return getWidthInBlocks(transcoderFormat, width) * getHeightInBlocks(transcoderFormat, height) * blockByteLength;\n  }\n  function isPowerOfTwo(value) {\n    if (value <= 2)\n      return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n});\nexport {\n  BasisTextureLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}