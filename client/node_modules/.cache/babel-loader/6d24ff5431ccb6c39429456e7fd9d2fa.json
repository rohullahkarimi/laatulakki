{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { BufferGeometry, Mesh, Points } from \"three\";\nconst _DRACOExporter = class {\n  parse(object, options = {\n    decodeSpeed: 5,\n    encodeSpeed: 5,\n    encoderMethod: _DRACOExporter.MESH_EDGEBREAKER_ENCODING,\n    quantization: [16, 8, 8, 8, 8],\n    exportUvs: true,\n    exportNormals: true,\n    exportColor: false\n  }) {\n    if (object instanceof BufferGeometry && object.isBufferGeometry) {\n      throw new Error(\"DRACOExporter: The first parameter of parse() is now an instance of Mesh or Points.\");\n    }\n    if (DracoEncoderModule === void 0) {\n      throw new Error(\"THREE.DRACOExporter: required the draco_encoder to work.\");\n    }\n    const geometry = object.geometry;\n    const dracoEncoder = DracoEncoderModule();\n    const encoder = new dracoEncoder.Encoder();\n    let builder;\n    let dracoObject;\n    if (!geometry.isBufferGeometry) {\n      throw new Error(\"THREE.DRACOExporter.parse(geometry, options): geometry is not a THREE.BufferGeometry instance.\");\n    }\n    if (object instanceof Mesh && object.isMesh) {\n      builder = new dracoEncoder.MeshBuilder();\n      dracoObject = new dracoEncoder.Mesh();\n      const vertices = geometry.getAttribute(\"position\");\n      builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n      const faces = geometry.getIndex();\n      if (faces !== null) {\n        builder.AddFacesToMesh(dracoObject, faces.count / 3, faces.array);\n      } else {\n        const faces2 = new (vertices.count > 65535 ? Uint32Array : Uint16Array)(vertices.count);\n        for (let i = 0; i < faces2.length; i++) {\n          faces2[i] = i;\n        }\n        builder.AddFacesToMesh(dracoObject, vertices.count, faces2);\n      }\n      if (options.exportNormals) {\n        const normals = geometry.getAttribute(\"normal\");\n        if (normals !== void 0) {\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.NORMAL, normals.count, normals.itemSize, normals.array);\n        }\n      }\n      if (options.exportUvs) {\n        const uvs = geometry.getAttribute(\"uv\");\n        if (uvs !== void 0) {\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.TEX_COORD, uvs.count, uvs.itemSize, uvs.array);\n        }\n      }\n      if (options.exportColor) {\n        const colors = geometry.getAttribute(\"color\");\n        if (colors !== void 0) {\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n        }\n      }\n    } else if (object instanceof Points && object.isPoints) {\n      builder = new dracoEncoder.PointCloudBuilder();\n      dracoObject = new dracoEncoder.PointCloud();\n      const vertices = geometry.getAttribute(\"position\");\n      builder.AddFloatAttribute(dracoObject, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n      if (options.exportColor) {\n        const colors = geometry.getAttribute(\"color\");\n        if (colors !== void 0) {\n          builder.AddFloatAttribute(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n        }\n      }\n    } else {\n      throw new Error(\"DRACOExporter: Unsupported object type.\");\n    }\n    const encodedData = new dracoEncoder.DracoInt8Array();\n    const encodeSpeed = options.encodeSpeed !== void 0 ? options.encodeSpeed : 5;\n    const decodeSpeed = options.decodeSpeed !== void 0 ? options.decodeSpeed : 5;\n    encoder.SetSpeedOptions(encodeSpeed, decodeSpeed);\n    if (options.encoderMethod !== void 0) {\n      encoder.SetEncodingMethod(options.encoderMethod);\n    }\n    if (options.quantization !== void 0) {\n      for (let i = 0; i < 5; i++) {\n        if (options.quantization[i] !== void 0) {\n          encoder.SetAttributeQuantization(i, options.quantization[i]);\n        }\n      }\n    }\n    let length;\n    if (object instanceof Mesh && object.isMesh) {\n      length = encoder.EncodeMeshToDracoBuffer(dracoObject, encodedData);\n    } else {\n      length = encoder.EncodePointCloudToDracoBuffer(dracoObject, true, encodedData);\n    }\n    dracoEncoder.destroy(dracoObject);\n    if (length === 0) {\n      throw new Error(\"THREE.DRACOExporter: Draco encoding failed.\");\n    }\n    const outputData = new Int8Array(new ArrayBuffer(length));\n    for (let i = 0; i < length; i++) {\n      outputData[i] = encodedData.GetValue(i);\n    }\n    dracoEncoder.destroy(encodedData);\n    dracoEncoder.destroy(encoder);\n    dracoEncoder.destroy(builder);\n    return outputData;\n  }\n};\nlet DRACOExporter = _DRACOExporter;\n// Encoder methods\n__publicField(DRACOExporter, \"MESH_EDGEBREAKER_ENCODING\", 1);\n__publicField(DRACOExporter, \"MESH_SEQUENTIAL_ENCODING\", 0);\n// Geometry type\n__publicField(DRACOExporter, \"POINT_CLOUD\", 0);\n__publicField(DRACOExporter, \"TRIANGULAR_MESH\", 1);\n// Attribute type\n__publicField(DRACOExporter, \"INVALID\", -1);\n__publicField(DRACOExporter, \"POSITION\", 0);\n__publicField(DRACOExporter, \"NORMAL\", 1);\n__publicField(DRACOExporter, \"COLOR\", 2);\n__publicField(DRACOExporter, \"TEX_COORD\", 3);\n__publicField(DRACOExporter, \"GENERIC\", 4);\nexport { DRACOExporter };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","BufferGeometry","Mesh","Points","_DRACOExporter","parse","object","options","decodeSpeed","encodeSpeed","encoderMethod","MESH_EDGEBREAKER_ENCODING","quantization","exportUvs","exportNormals","exportColor","isBufferGeometry","Error","DracoEncoderModule","geometry","dracoEncoder","encoder","Encoder","builder","dracoObject","isMesh","MeshBuilder","vertices","getAttribute","AddFloatAttributeToMesh","POSITION","count","itemSize","array","faces","getIndex","AddFacesToMesh","faces2","Uint32Array","Uint16Array","i","length","normals","NORMAL","uvs","TEX_COORD","colors","COLOR","isPoints","PointCloudBuilder","PointCloud","AddFloatAttribute","encodedData","DracoInt8Array","SetSpeedOptions","SetEncodingMethod","SetAttributeQuantization","EncodeMeshToDracoBuffer","EncodePointCloudToDracoBuffer","destroy","outputData","Int8Array","ArrayBuffer","GetValue","DRACOExporter"],"sources":["/Users/rohullahkarimi/Local/laatuLakki_main/client/node_modules/three-stdlib/exporters/DRACOExporter.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { BufferGeometry, Mesh, Points } from \"three\";\nconst _DRACOExporter = class {\n  parse(object, options = {\n    decodeSpeed: 5,\n    encodeSpeed: 5,\n    encoderMethod: _DRACOExporter.MESH_EDGEBREAKER_ENCODING,\n    quantization: [16, 8, 8, 8, 8],\n    exportUvs: true,\n    exportNormals: true,\n    exportColor: false\n  }) {\n    if (object instanceof BufferGeometry && object.isBufferGeometry) {\n      throw new Error(\"DRACOExporter: The first parameter of parse() is now an instance of Mesh or Points.\");\n    }\n    if (DracoEncoderModule === void 0) {\n      throw new Error(\"THREE.DRACOExporter: required the draco_encoder to work.\");\n    }\n    const geometry = object.geometry;\n    const dracoEncoder = DracoEncoderModule();\n    const encoder = new dracoEncoder.Encoder();\n    let builder;\n    let dracoObject;\n    if (!geometry.isBufferGeometry) {\n      throw new Error(\"THREE.DRACOExporter.parse(geometry, options): geometry is not a THREE.BufferGeometry instance.\");\n    }\n    if (object instanceof Mesh && object.isMesh) {\n      builder = new dracoEncoder.MeshBuilder();\n      dracoObject = new dracoEncoder.Mesh();\n      const vertices = geometry.getAttribute(\"position\");\n      builder.AddFloatAttributeToMesh(\n        dracoObject,\n        dracoEncoder.POSITION,\n        vertices.count,\n        vertices.itemSize,\n        vertices.array\n      );\n      const faces = geometry.getIndex();\n      if (faces !== null) {\n        builder.AddFacesToMesh(dracoObject, faces.count / 3, faces.array);\n      } else {\n        const faces2 = new (vertices.count > 65535 ? Uint32Array : Uint16Array)(vertices.count);\n        for (let i = 0; i < faces2.length; i++) {\n          faces2[i] = i;\n        }\n        builder.AddFacesToMesh(dracoObject, vertices.count, faces2);\n      }\n      if (options.exportNormals) {\n        const normals = geometry.getAttribute(\"normal\");\n        if (normals !== void 0) {\n          builder.AddFloatAttributeToMesh(\n            dracoObject,\n            dracoEncoder.NORMAL,\n            normals.count,\n            normals.itemSize,\n            normals.array\n          );\n        }\n      }\n      if (options.exportUvs) {\n        const uvs = geometry.getAttribute(\"uv\");\n        if (uvs !== void 0) {\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.TEX_COORD, uvs.count, uvs.itemSize, uvs.array);\n        }\n      }\n      if (options.exportColor) {\n        const colors = geometry.getAttribute(\"color\");\n        if (colors !== void 0) {\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n        }\n      }\n    } else if (object instanceof Points && object.isPoints) {\n      builder = new dracoEncoder.PointCloudBuilder();\n      dracoObject = new dracoEncoder.PointCloud();\n      const vertices = geometry.getAttribute(\"position\");\n      builder.AddFloatAttribute(dracoObject, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n      if (options.exportColor) {\n        const colors = geometry.getAttribute(\"color\");\n        if (colors !== void 0) {\n          builder.AddFloatAttribute(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n        }\n      }\n    } else {\n      throw new Error(\"DRACOExporter: Unsupported object type.\");\n    }\n    const encodedData = new dracoEncoder.DracoInt8Array();\n    const encodeSpeed = options.encodeSpeed !== void 0 ? options.encodeSpeed : 5;\n    const decodeSpeed = options.decodeSpeed !== void 0 ? options.decodeSpeed : 5;\n    encoder.SetSpeedOptions(encodeSpeed, decodeSpeed);\n    if (options.encoderMethod !== void 0) {\n      encoder.SetEncodingMethod(options.encoderMethod);\n    }\n    if (options.quantization !== void 0) {\n      for (let i = 0; i < 5; i++) {\n        if (options.quantization[i] !== void 0) {\n          encoder.SetAttributeQuantization(i, options.quantization[i]);\n        }\n      }\n    }\n    let length;\n    if (object instanceof Mesh && object.isMesh) {\n      length = encoder.EncodeMeshToDracoBuffer(dracoObject, encodedData);\n    } else {\n      length = encoder.EncodePointCloudToDracoBuffer(dracoObject, true, encodedData);\n    }\n    dracoEncoder.destroy(dracoObject);\n    if (length === 0) {\n      throw new Error(\"THREE.DRACOExporter: Draco encoding failed.\");\n    }\n    const outputData = new Int8Array(new ArrayBuffer(length));\n    for (let i = 0; i < length; i++) {\n      outputData[i] = encodedData.GetValue(i);\n    }\n    dracoEncoder.destroy(encodedData);\n    dracoEncoder.destroy(encoder);\n    dracoEncoder.destroy(builder);\n    return outputData;\n  }\n};\nlet DRACOExporter = _DRACOExporter;\n// Encoder methods\n__publicField(DRACOExporter, \"MESH_EDGEBREAKER_ENCODING\", 1);\n__publicField(DRACOExporter, \"MESH_SEQUENTIAL_ENCODING\", 0);\n// Geometry type\n__publicField(DRACOExporter, \"POINT_CLOUD\", 0);\n__publicField(DRACOExporter, \"TRIANGULAR_MESH\", 1);\n// Attribute type\n__publicField(DRACOExporter, \"INVALID\", -1);\n__publicField(DRACOExporter, \"POSITION\", 0);\n__publicField(DRACOExporter, \"NORMAL\", 1);\n__publicField(DRACOExporter, \"COLOR\", 2);\n__publicField(DRACOExporter, \"TEX_COORD\", 3);\n__publicField(DRACOExporter, \"GENERIC\", 4);\nexport {\n  DRACOExporter\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}