{"ast":null,"code":"import { Quaternion, Vector3, Matrix4, Object3D, SphereGeometry, MeshBasicMaterial, Color, LineBasicMaterial, BufferGeometry, BufferAttribute, Mesh, Line } from \"three\";\nconst _q = /* @__PURE__ */new Quaternion();\nconst _targetPos = /* @__PURE__ */new Vector3();\nconst _targetVec = /* @__PURE__ */new Vector3();\nconst _effectorPos = /* @__PURE__ */new Vector3();\nconst _effectorVec = /* @__PURE__ */new Vector3();\nconst _linkPos = /* @__PURE__ */new Vector3();\nconst _invLinkQ = /* @__PURE__ */new Quaternion();\nconst _linkScale = /* @__PURE__ */new Vector3();\nconst _axis = /* @__PURE__ */new Vector3();\nconst _vector = /* @__PURE__ */new Vector3();\nconst _matrix = /* @__PURE__ */new Matrix4();\nclass CCDIKSolver {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Array<Object>} iks\n   */\n  constructor(mesh, iks = []) {\n    this.mesh = mesh;\n    this.iks = iks;\n    this._valid();\n  }\n  /**\n   * Update all IK bones.\n   *\n   * @return {CCDIKSolver}\n   */\n  update() {\n    const iks = this.iks;\n    for (let i = 0, il = iks.length; i < il; i++) {\n      this.updateOne(iks[i]);\n    }\n    return this;\n  }\n  /**\n   * Update one IK bone\n   *\n   * @param {Object} ik parameter\n   * @return {CCDIKSolver}\n   */\n  updateOne(ik) {\n    const bones = this.mesh.skeleton.bones;\n    const math = Math;\n    const effector = bones[ik.effector];\n    const target = bones[ik.target];\n    _targetPos.setFromMatrixPosition(target.matrixWorld);\n    const links = ik.links;\n    const iteration = ik.iteration !== void 0 ? ik.iteration : 1;\n    for (let i = 0; i < iteration; i++) {\n      let rotated = false;\n      for (let j = 0, jl = links.length; j < jl; j++) {\n        const link = bones[links[j].index];\n        if (links[j].enabled === false) break;\n        const limitation = links[j].limitation;\n        const rotationMin = links[j].rotationMin;\n        const rotationMax = links[j].rotationMax;\n        link.matrixWorld.decompose(_linkPos, _invLinkQ, _linkScale);\n        _invLinkQ.invert();\n        _effectorPos.setFromMatrixPosition(effector.matrixWorld);\n        _effectorVec.subVectors(_effectorPos, _linkPos);\n        _effectorVec.applyQuaternion(_invLinkQ);\n        _effectorVec.normalize();\n        _targetVec.subVectors(_targetPos, _linkPos);\n        _targetVec.applyQuaternion(_invLinkQ);\n        _targetVec.normalize();\n        let angle = _targetVec.dot(_effectorVec);\n        if (angle > 1) {\n          angle = 1;\n        } else if (angle < -1) {\n          angle = -1;\n        }\n        angle = math.acos(angle);\n        if (angle < 1e-5) continue;\n        if (ik.minAngle !== void 0 && angle < ik.minAngle) {\n          angle = ik.minAngle;\n        }\n        if (ik.maxAngle !== void 0 && angle > ik.maxAngle) {\n          angle = ik.maxAngle;\n        }\n        _axis.crossVectors(_effectorVec, _targetVec);\n        _axis.normalize();\n        _q.setFromAxisAngle(_axis, angle);\n        link.quaternion.multiply(_q);\n        if (limitation !== void 0) {\n          let c = link.quaternion.w;\n          if (c > 1) c = 1;\n          const c2 = math.sqrt(1 - c * c);\n          link.quaternion.set(limitation.x * c2, limitation.y * c2, limitation.z * c2, c);\n        }\n        if (rotationMin !== void 0) {\n          link.rotation.setFromVector3(_vector.setFromEuler(link.rotation).max(rotationMin));\n        }\n        if (rotationMax !== void 0) {\n          link.rotation.setFromVector3(_vector.setFromEuler(link.rotation).min(rotationMax));\n        }\n        link.updateMatrixWorld(true);\n        rotated = true;\n      }\n      if (!rotated) break;\n    }\n    return this;\n  }\n  /**\n   * Creates Helper\n   *\n   * @return {CCDIKHelper}\n   */\n  createHelper() {\n    return new CCDIKHelper(this.mesh, this.iks);\n  }\n  // private methods\n  _valid() {\n    const iks = this.iks;\n    const bones = this.mesh.skeleton.bones;\n    for (let i = 0, il = iks.length; i < il; i++) {\n      const ik = iks[i];\n      const effector = bones[ik.effector];\n      const links = ik.links;\n      let link0, link1;\n      link0 = effector;\n      for (let j = 0, jl = links.length; j < jl; j++) {\n        link1 = bones[links[j].index];\n        if (link0.parent !== link1) {\n          console.warn(\"THREE.CCDIKSolver: bone \" + link0.name + \" is not the child of bone \" + link1.name);\n        }\n        link0 = link1;\n      }\n    }\n  }\n}\nfunction getPosition(bone, matrixWorldInv) {\n  return _vector.setFromMatrixPosition(bone.matrixWorld).applyMatrix4(matrixWorldInv);\n}\nfunction setPositionOfBoneToAttributeArray(array, index, bone, matrixWorldInv) {\n  const v = getPosition(bone, matrixWorldInv);\n  array[index * 3 + 0] = v.x;\n  array[index * 3 + 1] = v.y;\n  array[index * 3 + 2] = v.z;\n}\nclass CCDIKHelper extends Object3D {\n  constructor(mesh, iks = [], sphereSize = 0.25) {\n    super();\n    this.root = mesh;\n    this.iks = iks;\n    this.matrix.copy(mesh.matrixWorld);\n    this.matrixAutoUpdate = false;\n    this.sphereGeometry = new SphereGeometry(sphereSize, 16, 8);\n    this.targetSphereMaterial = new MeshBasicMaterial({\n      color: new Color(16746632),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.effectorSphereMaterial = new MeshBasicMaterial({\n      color: new Color(8978312),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.linkSphereMaterial = new MeshBasicMaterial({\n      color: new Color(8947967),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.lineMaterial = new LineBasicMaterial({\n      color: new Color(16711680),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this._init();\n  }\n  /**\n   * Updates IK bones visualization.\n   */\n  updateMatrixWorld(force) {\n    const mesh = this.root;\n    if (this.visible) {\n      let offset = 0;\n      const iks = this.iks;\n      const bones = mesh.skeleton.bones;\n      _matrix.copy(mesh.matrixWorld).invert();\n      for (let i = 0, il = iks.length; i < il; i++) {\n        const ik = iks[i];\n        const targetBone = bones[ik.target];\n        const effectorBone = bones[ik.effector];\n        const targetMesh = this.children[offset++];\n        const effectorMesh = this.children[offset++];\n        targetMesh.position.copy(getPosition(targetBone, _matrix));\n        effectorMesh.position.copy(getPosition(effectorBone, _matrix));\n        for (let j = 0, jl = ik.links.length; j < jl; j++) {\n          const link = ik.links[j];\n          const linkBone = bones[link.index];\n          const linkMesh = this.children[offset++];\n          linkMesh.position.copy(getPosition(linkBone, _matrix));\n        }\n        const line = this.children[offset++];\n        const array = line.geometry.attributes.position.array;\n        setPositionOfBoneToAttributeArray(array, 0, targetBone, _matrix);\n        setPositionOfBoneToAttributeArray(array, 1, effectorBone, _matrix);\n        for (let j = 0, jl = ik.links.length; j < jl; j++) {\n          const link = ik.links[j];\n          const linkBone = bones[link.index];\n          setPositionOfBoneToAttributeArray(array, j + 2, linkBone, _matrix);\n        }\n        line.geometry.attributes.position.needsUpdate = true;\n      }\n    }\n    this.matrix.copy(mesh.matrixWorld);\n    super.updateMatrixWorld(force);\n  }\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.sphereGeometry.dispose();\n    this.targetSphereMaterial.dispose();\n    this.effectorSphereMaterial.dispose();\n    this.linkSphereMaterial.dispose();\n    this.lineMaterial.dispose();\n    const children = this.children;\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      if (child.isLine) child.geometry.dispose();\n    }\n  }\n  // private method\n  _init() {\n    const scope = this;\n    const iks = this.iks;\n    function createLineGeometry(ik) {\n      const geometry = new BufferGeometry();\n      const vertices = new Float32Array((2 + ik.links.length) * 3);\n      geometry.setAttribute(\"position\", new BufferAttribute(vertices, 3));\n      return geometry;\n    }\n    function createTargetMesh() {\n      return new Mesh(scope.sphereGeometry, scope.targetSphereMaterial);\n    }\n    function createEffectorMesh() {\n      return new Mesh(scope.sphereGeometry, scope.effectorSphereMaterial);\n    }\n    function createLinkMesh() {\n      return new Mesh(scope.sphereGeometry, scope.linkSphereMaterial);\n    }\n    function createLine(ik) {\n      return new Line(createLineGeometry(ik), scope.lineMaterial);\n    }\n    for (let i = 0, il = iks.length; i < il; i++) {\n      const ik = iks[i];\n      this.add(createTargetMesh());\n      this.add(createEffectorMesh());\n      for (let j = 0, jl = ik.links.length; j < jl; j++) {\n        this.add(createLinkMesh());\n      }\n      this.add(createLine(ik));\n    }\n  }\n}\nexport { CCDIKHelper, CCDIKSolver };","map":{"version":3,"names":["Quaternion","Vector3","Matrix4","Object3D","SphereGeometry","MeshBasicMaterial","Color","LineBasicMaterial","BufferGeometry","BufferAttribute","Mesh","Line","_q","_targetPos","_targetVec","_effectorPos","_effectorVec","_linkPos","_invLinkQ","_linkScale","_axis","_vector","_matrix","CCDIKSolver","constructor","mesh","iks","_valid","update","i","il","length","updateOne","ik","bones","skeleton","math","Math","effector","target","setFromMatrixPosition","matrixWorld","links","iteration","rotated","j","jl","link","index","enabled","limitation","rotationMin","rotationMax","decompose","invert","subVectors","applyQuaternion","normalize","angle","dot","acos","minAngle","maxAngle","crossVectors","setFromAxisAngle","quaternion","multiply","c","w","c2","sqrt","set","x","y","z","rotation","setFromVector3","setFromEuler","max","min","updateMatrixWorld","createHelper","CCDIKHelper","link0","link1","parent","console","warn","name","getPosition","bone","matrixWorldInv","applyMatrix4","setPositionOfBoneToAttributeArray","array","v","sphereSize","root","matrix","copy","matrixAutoUpdate","sphereGeometry","targetSphereMaterial","color","depthTest","depthWrite","transparent","effectorSphereMaterial","linkSphereMaterial","lineMaterial","_init","force","visible","offset","targetBone","effectorBone","targetMesh","children","effectorMesh","position","linkBone","linkMesh","line","geometry","attributes","needsUpdate","dispose","child","isLine","scope","createLineGeometry","vertices","Float32Array","setAttribute","createTargetMesh","createEffectorMesh","createLinkMesh","createLine","add"],"sources":["/Users/rohullahkarimi/Local/laatuLakki_main/client/node_modules/three-stdlib/animation/CCDIKSolver.js"],"sourcesContent":["import { Quaternion, Vector3, Matrix4, Object3D, SphereGeometry, MeshBasicMaterial, Color, LineBasicMaterial, BufferGeometry, BufferAttribute, Mesh, Line } from \"three\";\nconst _q = /* @__PURE__ */ new Quaternion();\nconst _targetPos = /* @__PURE__ */ new Vector3();\nconst _targetVec = /* @__PURE__ */ new Vector3();\nconst _effectorPos = /* @__PURE__ */ new Vector3();\nconst _effectorVec = /* @__PURE__ */ new Vector3();\nconst _linkPos = /* @__PURE__ */ new Vector3();\nconst _invLinkQ = /* @__PURE__ */ new Quaternion();\nconst _linkScale = /* @__PURE__ */ new Vector3();\nconst _axis = /* @__PURE__ */ new Vector3();\nconst _vector = /* @__PURE__ */ new Vector3();\nconst _matrix = /* @__PURE__ */ new Matrix4();\nclass CCDIKSolver {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Array<Object>} iks\n   */\n  constructor(mesh, iks = []) {\n    this.mesh = mesh;\n    this.iks = iks;\n    this._valid();\n  }\n  /**\n   * Update all IK bones.\n   *\n   * @return {CCDIKSolver}\n   */\n  update() {\n    const iks = this.iks;\n    for (let i = 0, il = iks.length; i < il; i++) {\n      this.updateOne(iks[i]);\n    }\n    return this;\n  }\n  /**\n   * Update one IK bone\n   *\n   * @param {Object} ik parameter\n   * @return {CCDIKSolver}\n   */\n  updateOne(ik) {\n    const bones = this.mesh.skeleton.bones;\n    const math = Math;\n    const effector = bones[ik.effector];\n    const target = bones[ik.target];\n    _targetPos.setFromMatrixPosition(target.matrixWorld);\n    const links = ik.links;\n    const iteration = ik.iteration !== void 0 ? ik.iteration : 1;\n    for (let i = 0; i < iteration; i++) {\n      let rotated = false;\n      for (let j = 0, jl = links.length; j < jl; j++) {\n        const link = bones[links[j].index];\n        if (links[j].enabled === false)\n          break;\n        const limitation = links[j].limitation;\n        const rotationMin = links[j].rotationMin;\n        const rotationMax = links[j].rotationMax;\n        link.matrixWorld.decompose(_linkPos, _invLinkQ, _linkScale);\n        _invLinkQ.invert();\n        _effectorPos.setFromMatrixPosition(effector.matrixWorld);\n        _effectorVec.subVectors(_effectorPos, _linkPos);\n        _effectorVec.applyQuaternion(_invLinkQ);\n        _effectorVec.normalize();\n        _targetVec.subVectors(_targetPos, _linkPos);\n        _targetVec.applyQuaternion(_invLinkQ);\n        _targetVec.normalize();\n        let angle = _targetVec.dot(_effectorVec);\n        if (angle > 1) {\n          angle = 1;\n        } else if (angle < -1) {\n          angle = -1;\n        }\n        angle = math.acos(angle);\n        if (angle < 1e-5)\n          continue;\n        if (ik.minAngle !== void 0 && angle < ik.minAngle) {\n          angle = ik.minAngle;\n        }\n        if (ik.maxAngle !== void 0 && angle > ik.maxAngle) {\n          angle = ik.maxAngle;\n        }\n        _axis.crossVectors(_effectorVec, _targetVec);\n        _axis.normalize();\n        _q.setFromAxisAngle(_axis, angle);\n        link.quaternion.multiply(_q);\n        if (limitation !== void 0) {\n          let c = link.quaternion.w;\n          if (c > 1)\n            c = 1;\n          const c2 = math.sqrt(1 - c * c);\n          link.quaternion.set(limitation.x * c2, limitation.y * c2, limitation.z * c2, c);\n        }\n        if (rotationMin !== void 0) {\n          link.rotation.setFromVector3(_vector.setFromEuler(link.rotation).max(rotationMin));\n        }\n        if (rotationMax !== void 0) {\n          link.rotation.setFromVector3(_vector.setFromEuler(link.rotation).min(rotationMax));\n        }\n        link.updateMatrixWorld(true);\n        rotated = true;\n      }\n      if (!rotated)\n        break;\n    }\n    return this;\n  }\n  /**\n   * Creates Helper\n   *\n   * @return {CCDIKHelper}\n   */\n  createHelper() {\n    return new CCDIKHelper(this.mesh, this.iks);\n  }\n  // private methods\n  _valid() {\n    const iks = this.iks;\n    const bones = this.mesh.skeleton.bones;\n    for (let i = 0, il = iks.length; i < il; i++) {\n      const ik = iks[i];\n      const effector = bones[ik.effector];\n      const links = ik.links;\n      let link0, link1;\n      link0 = effector;\n      for (let j = 0, jl = links.length; j < jl; j++) {\n        link1 = bones[links[j].index];\n        if (link0.parent !== link1) {\n          console.warn(\"THREE.CCDIKSolver: bone \" + link0.name + \" is not the child of bone \" + link1.name);\n        }\n        link0 = link1;\n      }\n    }\n  }\n}\nfunction getPosition(bone, matrixWorldInv) {\n  return _vector.setFromMatrixPosition(bone.matrixWorld).applyMatrix4(matrixWorldInv);\n}\nfunction setPositionOfBoneToAttributeArray(array, index, bone, matrixWorldInv) {\n  const v = getPosition(bone, matrixWorldInv);\n  array[index * 3 + 0] = v.x;\n  array[index * 3 + 1] = v.y;\n  array[index * 3 + 2] = v.z;\n}\nclass CCDIKHelper extends Object3D {\n  constructor(mesh, iks = [], sphereSize = 0.25) {\n    super();\n    this.root = mesh;\n    this.iks = iks;\n    this.matrix.copy(mesh.matrixWorld);\n    this.matrixAutoUpdate = false;\n    this.sphereGeometry = new SphereGeometry(sphereSize, 16, 8);\n    this.targetSphereMaterial = new MeshBasicMaterial({\n      color: new Color(16746632),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.effectorSphereMaterial = new MeshBasicMaterial({\n      color: new Color(8978312),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.linkSphereMaterial = new MeshBasicMaterial({\n      color: new Color(8947967),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.lineMaterial = new LineBasicMaterial({\n      color: new Color(16711680),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this._init();\n  }\n  /**\n   * Updates IK bones visualization.\n   */\n  updateMatrixWorld(force) {\n    const mesh = this.root;\n    if (this.visible) {\n      let offset = 0;\n      const iks = this.iks;\n      const bones = mesh.skeleton.bones;\n      _matrix.copy(mesh.matrixWorld).invert();\n      for (let i = 0, il = iks.length; i < il; i++) {\n        const ik = iks[i];\n        const targetBone = bones[ik.target];\n        const effectorBone = bones[ik.effector];\n        const targetMesh = this.children[offset++];\n        const effectorMesh = this.children[offset++];\n        targetMesh.position.copy(getPosition(targetBone, _matrix));\n        effectorMesh.position.copy(getPosition(effectorBone, _matrix));\n        for (let j = 0, jl = ik.links.length; j < jl; j++) {\n          const link = ik.links[j];\n          const linkBone = bones[link.index];\n          const linkMesh = this.children[offset++];\n          linkMesh.position.copy(getPosition(linkBone, _matrix));\n        }\n        const line = this.children[offset++];\n        const array = line.geometry.attributes.position.array;\n        setPositionOfBoneToAttributeArray(array, 0, targetBone, _matrix);\n        setPositionOfBoneToAttributeArray(array, 1, effectorBone, _matrix);\n        for (let j = 0, jl = ik.links.length; j < jl; j++) {\n          const link = ik.links[j];\n          const linkBone = bones[link.index];\n          setPositionOfBoneToAttributeArray(array, j + 2, linkBone, _matrix);\n        }\n        line.geometry.attributes.position.needsUpdate = true;\n      }\n    }\n    this.matrix.copy(mesh.matrixWorld);\n    super.updateMatrixWorld(force);\n  }\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.sphereGeometry.dispose();\n    this.targetSphereMaterial.dispose();\n    this.effectorSphereMaterial.dispose();\n    this.linkSphereMaterial.dispose();\n    this.lineMaterial.dispose();\n    const children = this.children;\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      if (child.isLine)\n        child.geometry.dispose();\n    }\n  }\n  // private method\n  _init() {\n    const scope = this;\n    const iks = this.iks;\n    function createLineGeometry(ik) {\n      const geometry = new BufferGeometry();\n      const vertices = new Float32Array((2 + ik.links.length) * 3);\n      geometry.setAttribute(\"position\", new BufferAttribute(vertices, 3));\n      return geometry;\n    }\n    function createTargetMesh() {\n      return new Mesh(scope.sphereGeometry, scope.targetSphereMaterial);\n    }\n    function createEffectorMesh() {\n      return new Mesh(scope.sphereGeometry, scope.effectorSphereMaterial);\n    }\n    function createLinkMesh() {\n      return new Mesh(scope.sphereGeometry, scope.linkSphereMaterial);\n    }\n    function createLine(ik) {\n      return new Line(createLineGeometry(ik), scope.lineMaterial);\n    }\n    for (let i = 0, il = iks.length; i < il; i++) {\n      const ik = iks[i];\n      this.add(createTargetMesh());\n      this.add(createEffectorMesh());\n      for (let j = 0, jl = ik.links.length; j < jl; j++) {\n        this.add(createLinkMesh());\n      }\n      this.add(createLine(ik));\n    }\n  }\n}\nexport {\n  CCDIKHelper,\n  CCDIKSolver\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}