{"ast":null,"code":"import { ShaderLib, Mesh, BoxGeometry, ShaderMaterial, UniformsUtils, BackSide, Scene, PerspectiveCamera } from \"three\";\nimport { Pass } from \"./Pass.js\";\nclass CubeTexturePass extends Pass {\n  constructor(camera, tCube, opacity = 1) {\n    super();\n    this.camera = camera;\n    this.needsSwap = false;\n    this.cubeShader = ShaderLib[\"cube\"];\n    this.cubeMesh = new Mesh(new BoxGeometry(10, 10, 10), new ShaderMaterial({\n      uniforms: UniformsUtils.clone(this.cubeShader.uniforms),\n      vertexShader: this.cubeShader.vertexShader,\n      fragmentShader: this.cubeShader.fragmentShader,\n      depthTest: false,\n      depthWrite: false,\n      side: BackSide\n    }));\n    Object.defineProperty(this.cubeMesh.material, \"envMap\", {\n      get: function () {\n        return this.uniforms.tCube.value;\n      }\n    });\n    this.tCube = tCube;\n    this.opacity = opacity;\n    this.cubeScene = new Scene();\n    this.cubeCamera = new PerspectiveCamera();\n    this.cubeScene.add(this.cubeMesh);\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    this.cubeCamera.projectionMatrix.copy(this.camera.projectionMatrix);\n    this.cubeCamera.quaternion.setFromRotationMatrix(this.camera.matrixWorld);\n    this.cubeMesh.material.uniforms.tCube.value = this.tCube;\n    this.cubeMesh.material.uniforms.tFlip.value = this.tCube.isCubeTexture && this.tCube.isRenderTargetTexture === false ? -1 : 1;\n    this.cubeMesh.material.uniforms.opacity.value = this.opacity;\n    this.cubeMesh.material.transparent = this.opacity < 1;\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n    if (this.clear) renderer.clear();\n    renderer.render(this.cubeScene, this.cubeCamera);\n    renderer.autoClear = oldAutoClear;\n  }\n  dispose() {\n    this.cubeMesh.geometry.dispose();\n    this.cubeMesh.material.dispose();\n  }\n}\nexport { CubeTexturePass };","map":{"version":3,"names":["ShaderLib","Mesh","BoxGeometry","ShaderMaterial","UniformsUtils","BackSide","Scene","PerspectiveCamera","Pass","CubeTexturePass","constructor","camera","tCube","opacity","needsSwap","cubeShader","cubeMesh","uniforms","clone","vertexShader","fragmentShader","depthTest","depthWrite","side","Object","defineProperty","material","get","value","cubeScene","cubeCamera","add","render","renderer","writeBuffer","readBuffer","oldAutoClear","autoClear","projectionMatrix","copy","quaternion","setFromRotationMatrix","matrixWorld","tFlip","isCubeTexture","isRenderTargetTexture","transparent","setRenderTarget","renderToScreen","clear","dispose","geometry"],"sources":["/Users/rohullahkarimi/Local/laatuLakki_main/client/node_modules/three-stdlib/postprocessing/CubeTexturePass.js"],"sourcesContent":["import { ShaderLib, Mesh, BoxGeometry, ShaderMaterial, UniformsUtils, BackSide, Scene, PerspectiveCamera } from \"three\";\nimport { Pass } from \"./Pass.js\";\nclass CubeTexturePass extends Pass {\n  constructor(camera, tCube, opacity = 1) {\n    super();\n    this.camera = camera;\n    this.needsSwap = false;\n    this.cubeShader = ShaderLib[\"cube\"];\n    this.cubeMesh = new Mesh(\n      new BoxGeometry(10, 10, 10),\n      new ShaderMaterial({\n        uniforms: UniformsUtils.clone(this.cubeShader.uniforms),\n        vertexShader: this.cubeShader.vertexShader,\n        fragmentShader: this.cubeShader.fragmentShader,\n        depthTest: false,\n        depthWrite: false,\n        side: BackSide\n      })\n    );\n    Object.defineProperty(this.cubeMesh.material, \"envMap\", {\n      get: function() {\n        return this.uniforms.tCube.value;\n      }\n    });\n    this.tCube = tCube;\n    this.opacity = opacity;\n    this.cubeScene = new Scene();\n    this.cubeCamera = new PerspectiveCamera();\n    this.cubeScene.add(this.cubeMesh);\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    this.cubeCamera.projectionMatrix.copy(this.camera.projectionMatrix);\n    this.cubeCamera.quaternion.setFromRotationMatrix(this.camera.matrixWorld);\n    this.cubeMesh.material.uniforms.tCube.value = this.tCube;\n    this.cubeMesh.material.uniforms.tFlip.value = this.tCube.isCubeTexture && this.tCube.isRenderTargetTexture === false ? -1 : 1;\n    this.cubeMesh.material.uniforms.opacity.value = this.opacity;\n    this.cubeMesh.material.transparent = this.opacity < 1;\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n    if (this.clear)\n      renderer.clear();\n    renderer.render(this.cubeScene, this.cubeCamera);\n    renderer.autoClear = oldAutoClear;\n  }\n  dispose() {\n    this.cubeMesh.geometry.dispose();\n    this.cubeMesh.material.dispose();\n  }\n}\nexport {\n  CubeTexturePass\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}