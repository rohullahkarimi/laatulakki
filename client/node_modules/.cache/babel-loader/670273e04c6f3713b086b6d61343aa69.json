{"ast":null,"code":"import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport cartReducer from \"./cartRedux\";\nimport userReducer from \"./userRedux\";\nimport { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport createMigrate from \"redux-persist/es/createMigrate\";\nconst migrations = {\n  1: ({\n    _persist\n  }) => {\n    return {\n      _persist\n    }; // reset all state, except version\n  }\n};\n\nconst persistConfig = {\n  key: \"root\",\n  version: 2,\n  storage,\n  migrate: createMigrate(migrations)\n};\nconst rootReducer = combineReducers({\n  user: userReducer,\n  cart: cartReducer\n});\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  })\n});\nexport let persistor = persistStore(store);","map":{"version":3,"names":["configureStore","combineReducers","cartReducer","userReducer","persistStore","persistReducer","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","storage","createMigrate","migrations","_persist","persistConfig","key","version","migrate","rootReducer","user","cart","persistedReducer","store","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistor"],"sources":["/Users/rohullahkarimi/Local/laatuLakki_main/client/src/redux/store.js"],"sourcesContent":["import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport cartReducer from \"./cartRedux\";\nimport userReducer from \"./userRedux\";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport createMigrate from \"redux-persist/es/createMigrate\";\n\nconst migrations = {\n  1: ({_persist}) => {\n    return {_persist}; // reset all state, except version\n  }\n}\n\nconst persistConfig = {\n  key: \"root\",\n  version: 2,\n  storage,\n  migrate: createMigrate(migrations),\n};\n\nconst rootReducer = combineReducers({ user: userReducer, cart: cartReducer });\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n});\n\nexport let persistor = persistStore(store);"],"mappings":"AAAA,SAASA,cAAc,EAAEC,eAAe,QAAQ,kBAAkB;AAClE,OAAOC,WAAW,MAAM,aAAa;AACrC,OAAOC,WAAW,MAAM,aAAa;AACrC,SACEC,YAAY,EACZC,cAAc,EACdC,KAAK,EACLC,SAAS,EACTC,KAAK,EACLC,OAAO,EACPC,KAAK,EACLC,QAAQ,QACH,eAAe;AACtB,OAAOC,OAAO,MAAM,2BAA2B;AAC/C,OAAOC,aAAa,MAAM,gCAAgC;AAE1D,MAAMC,UAAU,GAAG;EACjB,CAAC,EAAE,CAAC;IAACC;EAAQ,CAAC,KAAK;IACjB,OAAO;MAACA;IAAQ,CAAC,CAAC,CAAC;EACrB;AACF,CAAC;;AAED,MAAMC,aAAa,GAAG;EACpBC,GAAG,EAAE,MAAM;EACXC,OAAO,EAAE,CAAC;EACVN,OAAO;EACPO,OAAO,EAAEN,aAAa,CAACC,UAAU;AACnC,CAAC;AAED,MAAMM,WAAW,GAAGnB,eAAe,CAAC;EAAEoB,IAAI,EAAElB,WAAW;EAAEmB,IAAI,EAAEpB;AAAY,CAAC,CAAC;AAC7E,MAAMqB,gBAAgB,GAAGlB,cAAc,CAACW,aAAa,EAAEI,WAAW,CAAC;AAEnE,OAAO,MAAMI,KAAK,GAAGxB,cAAc,CAAC;EAClCyB,OAAO,EAAEF,gBAAgB;EACzBG,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC;IACnBC,iBAAiB,EAAE;MACjBC,cAAc,EAAE,CAACvB,KAAK,EAAEC,SAAS,EAAEC,KAAK,EAAEC,OAAO,EAAEC,KAAK,EAAEC,QAAQ;IACpE;EACF,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,IAAImB,SAAS,GAAG1B,YAAY,CAACoB,KAAK,CAAC"},"metadata":{},"sourceType":"module"}