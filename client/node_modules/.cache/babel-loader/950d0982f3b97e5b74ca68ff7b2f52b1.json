{"ast":null,"code":"import Panel from \"./panel.js\";\nclass Stats {\n  constructor({\n    logsPerSecond = 20,\n    samplesLog = 100,\n    samplesGraph = 10,\n    precision = 2,\n    minimal = false,\n    horizontal = true,\n    mode = 0\n  } = {}) {\n    this.mode = mode;\n    this.horizontal = horizontal;\n    this.container = document.createElement(\"div\");\n    this.container.style.cssText = \"position:fixed;top:0;left:0;opacity:0.9;z-index:10000;\";\n    if (minimal) {\n      this.container.style.cssText += \"cursor:pointer\";\n    }\n    this.canvasGpu = null;\n    this.gl = null;\n    this.query = null;\n    this.minimal = minimal;\n    this.beginTime = (performance || Date).now();\n    this.prevTime = this.beginTime;\n    this.prevCpuTime = this.beginTime;\n    this.frames = 0;\n    this.averageCpu = {\n      logs: [],\n      graph: []\n    };\n    this.averageGpu = {\n      logs: [],\n      graph: []\n    };\n    this.queryCreated = false;\n    this.fpsPanel = this.addPanel(new Stats.Panel(\"FPS\", \"#0ff\", \"#002\"), 0);\n    this.msPanel = this.addPanel(new Stats.Panel(\"CPU\", \"#0f0\", \"#020\"), 1);\n    this.gpuPanel = null;\n    this.samplesLog = samplesLog;\n    this.samplesGraph = samplesGraph;\n    this.precision = precision;\n    this.logsPerSecond = logsPerSecond;\n    if (this.minimal) {\n      this.container.addEventListener(\"click\", event => {\n        event.preventDefault();\n        this.showPanel(++this.mode % this.container.children.length);\n      }, false);\n      this.mode = mode;\n      this.showPanel(this.mode);\n    } else {\n      window.addEventListener(\"resize\", () => {\n        this.resizePanel(this.fpsPanel, 0);\n        this.resizePanel(this.msPanel, 1);\n        if (this.gpuPanel) {\n          this.resizePanel(this.gpuPanel, 2);\n        }\n      });\n    }\n  }\n  resizePanel(panel, offset) {\n    panel.canvas.style.position = \"absolute\";\n    if (this.minimal) {\n      panel.canvas.style.display = \"none\";\n    } else {\n      panel.canvas.style.display = \"block\";\n      if (this.horizontal) {\n        panel.canvas.style.top = \"0px\";\n        panel.canvas.style.left = offset * panel.WIDTH / panel.PR + \"px\";\n      } else {\n        panel.canvas.style.left = \"0px\";\n        panel.canvas.style.top = offset * panel.HEIGHT / panel.PR + \"px\";\n      }\n    }\n  }\n  addPanel(panel, offset) {\n    if (panel.canvas) {\n      this.container.appendChild(panel.canvas);\n      this.resizePanel(panel, offset);\n    }\n    return panel;\n  }\n  showPanel(id) {\n    for (let i = 0; i < this.container.children.length; i++) {\n      const child = this.container.children[i];\n      child.style.display = i === id ? \"block\" : \"none\";\n    }\n    this.mode = id;\n  }\n  init(canvas) {\n    this.canvasGpu = canvas;\n    if (!this.canvasGpu) return;\n    this.gl = this.canvasGpu.getContext(\"webgl2\");\n    this.ext = this.gl ? this.gl.getExtension(\"EXT_disjoint_timer_query_webgl2\") : null;\n    if (this.ext) {\n      this.gpuPanel = this.addPanel(new Stats.Panel(\"GPU\", \"#ff0\", \"#220\"), 2);\n    }\n  }\n  begin() {\n    this.beginProfiling(\"cpu-started\");\n    if (!this.gl || !this.ext) return;\n    if (this.query) {\n      const available = this.gl.getQueryParameter(this.query, this.gl.QUERY_RESULT_AVAILABLE);\n      this.disjoint = this.gl.getParameter(this.ext.GPU_DISJOINT_EXT);\n      if (available && !this.disjoint) {\n        this.ns = this.gl.getQueryParameter(this.query, this.gl.QUERY_RESULT);\n        const ms = this.ns * 1e-6;\n        if (available || this.disjoint) {\n          this.gl.deleteQuery(this.query);\n          this.query = null;\n        }\n        if (available) {\n          this.addToAverage(ms, this.averageGpu);\n        }\n      }\n    }\n    if (!this.query) {\n      this.queryCreated = true;\n      this.query = this.gl.createQuery();\n      if (this.query) {\n        this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT, this.query);\n      }\n    }\n  }\n  end() {\n    this.beginTime = this.endInternal();\n    this.endProfiling(\"cpu-started\", \"cpu-finished\", \"cpu-duration\", this.averageCpu);\n    if (!this.gl || !this.ext) return;\n    if (this.queryCreated && this.gl.getQuery(this.ext.TIME_ELAPSED_EXT, this.gl.CURRENT_QUERY)) {\n      this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);\n    }\n  }\n  endInternal() {\n    this.frames++;\n    const time = (performance || Date).now();\n    if (time >= this.prevCpuTime + 1e3 / this.logsPerSecond) {\n      this.updatePanel(this.msPanel, this.averageCpu);\n      this.updatePanel(this.gpuPanel, this.averageGpu);\n      this.prevCpuTime = time;\n    }\n    if (time >= this.prevTime + 1e3) {\n      const fps = this.frames * 1e3 / (time - this.prevTime);\n      this.fpsPanel.update(fps, fps, 100, 100, 0);\n      this.prevTime = time;\n      this.frames = 0;\n    }\n    return time;\n  }\n  addToAverage(value, averageArray) {\n    averageArray.logs.push(value);\n    if (averageArray.logs.length > this.samplesLog) {\n      averageArray.logs.shift();\n    }\n    averageArray.graph.push(value);\n    if (averageArray.graph.length > this.samplesGraph) {\n      averageArray.graph.shift();\n    }\n  }\n  beginProfiling(marker) {\n    if (window.performance) {\n      window.performance.mark(marker);\n    }\n  }\n  endProfiling(startMarker, endMarker, measureName, averageArray) {\n    if (window.performance && endMarker) {\n      window.performance.mark(endMarker);\n      const cpuMeasure = performance.measure(measureName, startMarker, endMarker);\n      this.addToAverage(cpuMeasure.duration, averageArray);\n    }\n  }\n  updatePanel(panel, averageArray) {\n    if (averageArray.logs.length > 0) {\n      let sumLog = 0;\n      let max = 0.01;\n      for (let i = 0; i < averageArray.logs.length; i++) {\n        sumLog += averageArray.logs[i];\n        if (averageArray.logs[i] > max) {\n          max = averageArray.logs[i];\n        }\n      }\n      let sumGraph = 0;\n      let maxGraph = 0.01;\n      for (let i = 0; i < averageArray.graph.length; i++) {\n        sumGraph += averageArray.graph[i];\n        if (averageArray.graph[i] > maxGraph) {\n          maxGraph = averageArray.graph[i];\n        }\n      }\n      if (panel) {\n        panel.update(sumLog / Math.min(averageArray.logs.length, this.samplesLog), sumGraph / Math.min(averageArray.graph.length, this.samplesGraph), max, maxGraph, this.precision);\n      }\n    }\n  }\n}\nStats.Panel = Panel;\nexport { Stats as default };","map":{"version":3,"names":["Stats","constructor","logsPerSecond","samplesLog","samplesGraph","precision","minimal","horizontal","mode","container","document","createElement","style","cssText","canvasGpu","gl","query","beginTime","performance","Date","now","prevTime","prevCpuTime","frames","averageCpu","logs","graph","averageGpu","queryCreated","fpsPanel","addPanel","Panel","msPanel","gpuPanel","addEventListener","event","preventDefault","showPanel","children","length","window","resizePanel","panel","offset","canvas","position","display","top","left","WIDTH","PR","HEIGHT","appendChild","id","i","child","init","getContext","ext","getExtension","begin","beginProfiling","available","getQueryParameter","QUERY_RESULT_AVAILABLE","disjoint","getParameter","GPU_DISJOINT_EXT","ns","QUERY_RESULT","ms","deleteQuery","addToAverage","createQuery","beginQuery","TIME_ELAPSED_EXT","end","endInternal","endProfiling","getQuery","CURRENT_QUERY","endQuery","time","updatePanel","fps","update","value","averageArray","push","shift","marker","mark","startMarker","endMarker","measureName","cpuMeasure","measure","duration","sumLog","max","sumGraph","maxGraph","Math","min"],"sources":["../lib/main.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module"}