{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector3, Color, Vector2, BufferGeometry, Float32BufferAttribute } from \"three\";\nclass TessellateModifier {\n  constructor(maxEdgeLength = 0.1, maxIterations = 6) {\n    __publicField(this, \"maxEdgeLength\");\n    __publicField(this, \"maxIterations\");\n    __publicField(this, \"modify\", geometry => {\n      if (geometry.index !== null) {\n        geometry = geometry.toNonIndexed();\n      }\n      const maxIterations = this.maxIterations;\n      const maxEdgeLengthSquared = this.maxEdgeLength * this.maxEdgeLength;\n      const va = new Vector3();\n      const vb = new Vector3();\n      const vc = new Vector3();\n      const vm = new Vector3();\n      const vs = [va, vb, vc, vm];\n      const na = new Vector3();\n      const nb = new Vector3();\n      const nc = new Vector3();\n      const nm = new Vector3();\n      const ns = [na, nb, nc, nm];\n      const ca = new Color();\n      const cb = new Color();\n      const cc = new Color();\n      const cm = new Color();\n      const cs = [ca, cb, cc, cm];\n      const ua = new Vector2();\n      const ub = new Vector2();\n      const uc = new Vector2();\n      const um = new Vector2();\n      const us = [ua, ub, uc, um];\n      const u2a = new Vector2();\n      const u2b = new Vector2();\n      const u2c = new Vector2();\n      const u2m = new Vector2();\n      const u2s = [u2a, u2b, u2c, u2m];\n      const attributes = geometry.attributes;\n      const hasNormals = attributes.normal !== void 0;\n      const hasColors = attributes.color !== void 0;\n      const hasUVs = attributes.uv !== void 0;\n      const hasUV2s = attributes.uv2 !== void 0;\n      let positions = attributes.position.array;\n      let normals = hasNormals ? attributes.normal.array : null;\n      let colors = hasColors ? attributes.color.array : null;\n      let uvs = hasUVs ? attributes.uv.array : null;\n      let uv2s = hasUV2s ? attributes.uv2.array : null;\n      let positions2 = positions;\n      let normals2 = normals;\n      let colors2 = colors;\n      let uvs2 = uvs;\n      let uv2s2 = uv2s;\n      let iteration = 0;\n      let tessellating = true;\n      function addTriangle(a, b, c) {\n        const v1 = vs[a];\n        const v2 = vs[b];\n        const v3 = vs[c];\n        positions2.push(v1.x, v1.y, v1.z);\n        positions2.push(v2.x, v2.y, v2.z);\n        positions2.push(v3.x, v3.y, v3.z);\n        if (hasNormals) {\n          const n1 = ns[a];\n          const n2 = ns[b];\n          const n3 = ns[c];\n          normals2.push(n1.x, n1.y, n1.z);\n          normals2.push(n2.x, n2.y, n2.z);\n          normals2.push(n3.x, n3.y, n3.z);\n        }\n        if (hasColors) {\n          const c1 = cs[a];\n          const c2 = cs[b];\n          const c3 = cs[c];\n          colors2.push(c1.r, c1.g, c1.b);\n          colors2.push(c2.r, c2.g, c2.b);\n          colors2.push(c3.r, c3.g, c3.b);\n        }\n        if (hasUVs) {\n          const u1 = us[a];\n          const u2 = us[b];\n          const u3 = us[c];\n          uvs2.push(u1.x, u1.y);\n          uvs2.push(u2.x, u2.y);\n          uvs2.push(u3.x, u3.y);\n        }\n        if (hasUV2s) {\n          const u21 = u2s[a];\n          const u22 = u2s[b];\n          const u23 = u2s[c];\n          uv2s2.push(u21.x, u21.y);\n          uv2s2.push(u22.x, u22.y);\n          uv2s2.push(u23.x, u23.y);\n        }\n      }\n      while (tessellating && iteration < maxIterations) {\n        iteration++;\n        tessellating = false;\n        positions = positions2;\n        positions2 = [];\n        if (hasNormals) {\n          normals = normals2;\n          normals2 = [];\n        }\n        if (hasColors) {\n          colors = colors2;\n          colors2 = [];\n        }\n        if (hasUVs) {\n          uvs = uvs2;\n          uvs2 = [];\n        }\n        if (hasUV2s) {\n          uv2s = uv2s2;\n          uv2s2 = [];\n        }\n        for (let i = 0, i2 = 0, il = positions.length; i < il; i += 9, i2 += 6) {\n          va.fromArray(positions, i + 0);\n          vb.fromArray(positions, i + 3);\n          vc.fromArray(positions, i + 6);\n          if (hasNormals && normals) {\n            na.fromArray(normals, i + 0);\n            nb.fromArray(normals, i + 3);\n            nc.fromArray(normals, i + 6);\n          }\n          if (hasColors && colors) {\n            ca.fromArray(colors, i + 0);\n            cb.fromArray(colors, i + 3);\n            cc.fromArray(colors, i + 6);\n          }\n          if (hasUVs && uvs) {\n            ua.fromArray(uvs, i2 + 0);\n            ub.fromArray(uvs, i2 + 2);\n            uc.fromArray(uvs, i2 + 4);\n          }\n          if (hasUV2s && uv2s) {\n            u2a.fromArray(uv2s, i2 + 0);\n            u2b.fromArray(uv2s, i2 + 2);\n            u2c.fromArray(uv2s, i2 + 4);\n          }\n          const dab = va.distanceToSquared(vb);\n          const dbc = vb.distanceToSquared(vc);\n          const dac = va.distanceToSquared(vc);\n          if (dab > maxEdgeLengthSquared || dbc > maxEdgeLengthSquared || dac > maxEdgeLengthSquared) {\n            tessellating = true;\n            if (dab >= dbc && dab >= dac) {\n              vm.lerpVectors(va, vb, 0.5);\n              if (hasNormals) nm.lerpVectors(na, nb, 0.5);\n              if (hasColors) cm.lerpColors(ca, cb, 0.5);\n              if (hasUVs) um.lerpVectors(ua, ub, 0.5);\n              if (hasUV2s) u2m.lerpVectors(u2a, u2b, 0.5);\n              addTriangle(0, 3, 2);\n              addTriangle(3, 1, 2);\n            } else if (dbc >= dab && dbc >= dac) {\n              vm.lerpVectors(vb, vc, 0.5);\n              if (hasNormals) nm.lerpVectors(nb, nc, 0.5);\n              if (hasColors) cm.lerpColors(cb, cc, 0.5);\n              if (hasUVs) um.lerpVectors(ub, uc, 0.5);\n              if (hasUV2s) u2m.lerpVectors(u2b, u2c, 0.5);\n              addTriangle(0, 1, 3);\n              addTriangle(3, 2, 0);\n            } else {\n              vm.lerpVectors(va, vc, 0.5);\n              if (hasNormals) nm.lerpVectors(na, nc, 0.5);\n              if (hasColors) cm.lerpColors(ca, cc, 0.5);\n              if (hasUVs) um.lerpVectors(ua, uc, 0.5);\n              if (hasUV2s) u2m.lerpVectors(u2a, u2c, 0.5);\n              addTriangle(0, 1, 3);\n              addTriangle(3, 1, 2);\n            }\n          } else {\n            addTriangle(0, 1, 2);\n          }\n        }\n      }\n      const geometry2 = new BufferGeometry();\n      geometry2.setAttribute(\"position\", new Float32BufferAttribute(positions2, 3));\n      if (hasNormals) {\n        geometry2.setAttribute(\"normal\", new Float32BufferAttribute(normals2, 3));\n      }\n      if (hasColors) {\n        geometry2.setAttribute(\"color\", new Float32BufferAttribute(colors2, 3));\n      }\n      if (hasUVs) {\n        geometry2.setAttribute(\"uv\", new Float32BufferAttribute(uvs2, 2));\n      }\n      if (hasUV2s) {\n        geometry2.setAttribute(\"uv2\", new Float32BufferAttribute(uv2s2, 2));\n      }\n      return geometry2;\n    });\n    this.maxEdgeLength = maxEdgeLength;\n    this.maxIterations = maxIterations;\n  }\n}\nexport { TessellateModifier };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Vector3","Color","Vector2","BufferGeometry","Float32BufferAttribute","TessellateModifier","constructor","maxEdgeLength","maxIterations","geometry","index","toNonIndexed","maxEdgeLengthSquared","va","vb","vc","vm","vs","na","nb","nc","nm","ns","ca","cb","cc","cm","cs","ua","ub","uc","um","us","u2a","u2b","u2c","u2m","u2s","attributes","hasNormals","normal","hasColors","color","hasUVs","uv","hasUV2s","uv2","positions","position","array","normals","colors","uvs","uv2s","positions2","normals2","colors2","uvs2","uv2s2","iteration","tessellating","addTriangle","a","b","c","v1","v2","v3","push","x","y","z","n1","n2","n3","c1","c2","c3","r","g","u1","u2","u3","u21","u22","u23","i","i2","il","length","fromArray","dab","distanceToSquared","dbc","dac","lerpVectors","lerpColors","geometry2","setAttribute"],"sources":["/Users/rohullahkarimi/Local/laatuLakki_main/client/node_modules/three-stdlib/modifiers/TessellateModifier.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector3, Color, Vector2, BufferGeometry, Float32BufferAttribute } from \"three\";\nclass TessellateModifier {\n  constructor(maxEdgeLength = 0.1, maxIterations = 6) {\n    __publicField(this, \"maxEdgeLength\");\n    __publicField(this, \"maxIterations\");\n    __publicField(this, \"modify\", (geometry) => {\n      if (geometry.index !== null) {\n        geometry = geometry.toNonIndexed();\n      }\n      const maxIterations = this.maxIterations;\n      const maxEdgeLengthSquared = this.maxEdgeLength * this.maxEdgeLength;\n      const va = new Vector3();\n      const vb = new Vector3();\n      const vc = new Vector3();\n      const vm = new Vector3();\n      const vs = [va, vb, vc, vm];\n      const na = new Vector3();\n      const nb = new Vector3();\n      const nc = new Vector3();\n      const nm = new Vector3();\n      const ns = [na, nb, nc, nm];\n      const ca = new Color();\n      const cb = new Color();\n      const cc = new Color();\n      const cm = new Color();\n      const cs = [ca, cb, cc, cm];\n      const ua = new Vector2();\n      const ub = new Vector2();\n      const uc = new Vector2();\n      const um = new Vector2();\n      const us = [ua, ub, uc, um];\n      const u2a = new Vector2();\n      const u2b = new Vector2();\n      const u2c = new Vector2();\n      const u2m = new Vector2();\n      const u2s = [u2a, u2b, u2c, u2m];\n      const attributes = geometry.attributes;\n      const hasNormals = attributes.normal !== void 0;\n      const hasColors = attributes.color !== void 0;\n      const hasUVs = attributes.uv !== void 0;\n      const hasUV2s = attributes.uv2 !== void 0;\n      let positions = attributes.position.array;\n      let normals = hasNormals ? attributes.normal.array : null;\n      let colors = hasColors ? attributes.color.array : null;\n      let uvs = hasUVs ? attributes.uv.array : null;\n      let uv2s = hasUV2s ? attributes.uv2.array : null;\n      let positions2 = positions;\n      let normals2 = normals;\n      let colors2 = colors;\n      let uvs2 = uvs;\n      let uv2s2 = uv2s;\n      let iteration = 0;\n      let tessellating = true;\n      function addTriangle(a, b, c) {\n        const v1 = vs[a];\n        const v2 = vs[b];\n        const v3 = vs[c];\n        positions2.push(v1.x, v1.y, v1.z);\n        positions2.push(v2.x, v2.y, v2.z);\n        positions2.push(v3.x, v3.y, v3.z);\n        if (hasNormals) {\n          const n1 = ns[a];\n          const n2 = ns[b];\n          const n3 = ns[c];\n          normals2.push(n1.x, n1.y, n1.z);\n          normals2.push(n2.x, n2.y, n2.z);\n          normals2.push(n3.x, n3.y, n3.z);\n        }\n        if (hasColors) {\n          const c1 = cs[a];\n          const c2 = cs[b];\n          const c3 = cs[c];\n          colors2.push(c1.r, c1.g, c1.b);\n          colors2.push(c2.r, c2.g, c2.b);\n          colors2.push(c3.r, c3.g, c3.b);\n        }\n        if (hasUVs) {\n          const u1 = us[a];\n          const u2 = us[b];\n          const u3 = us[c];\n          uvs2.push(u1.x, u1.y);\n          uvs2.push(u2.x, u2.y);\n          uvs2.push(u3.x, u3.y);\n        }\n        if (hasUV2s) {\n          const u21 = u2s[a];\n          const u22 = u2s[b];\n          const u23 = u2s[c];\n          uv2s2.push(u21.x, u21.y);\n          uv2s2.push(u22.x, u22.y);\n          uv2s2.push(u23.x, u23.y);\n        }\n      }\n      while (tessellating && iteration < maxIterations) {\n        iteration++;\n        tessellating = false;\n        positions = positions2;\n        positions2 = [];\n        if (hasNormals) {\n          normals = normals2;\n          normals2 = [];\n        }\n        if (hasColors) {\n          colors = colors2;\n          colors2 = [];\n        }\n        if (hasUVs) {\n          uvs = uvs2;\n          uvs2 = [];\n        }\n        if (hasUV2s) {\n          uv2s = uv2s2;\n          uv2s2 = [];\n        }\n        for (let i = 0, i2 = 0, il = positions.length; i < il; i += 9, i2 += 6) {\n          va.fromArray(positions, i + 0);\n          vb.fromArray(positions, i + 3);\n          vc.fromArray(positions, i + 6);\n          if (hasNormals && normals) {\n            na.fromArray(normals, i + 0);\n            nb.fromArray(normals, i + 3);\n            nc.fromArray(normals, i + 6);\n          }\n          if (hasColors && colors) {\n            ca.fromArray(colors, i + 0);\n            cb.fromArray(colors, i + 3);\n            cc.fromArray(colors, i + 6);\n          }\n          if (hasUVs && uvs) {\n            ua.fromArray(uvs, i2 + 0);\n            ub.fromArray(uvs, i2 + 2);\n            uc.fromArray(uvs, i2 + 4);\n          }\n          if (hasUV2s && uv2s) {\n            u2a.fromArray(uv2s, i2 + 0);\n            u2b.fromArray(uv2s, i2 + 2);\n            u2c.fromArray(uv2s, i2 + 4);\n          }\n          const dab = va.distanceToSquared(vb);\n          const dbc = vb.distanceToSquared(vc);\n          const dac = va.distanceToSquared(vc);\n          if (dab > maxEdgeLengthSquared || dbc > maxEdgeLengthSquared || dac > maxEdgeLengthSquared) {\n            tessellating = true;\n            if (dab >= dbc && dab >= dac) {\n              vm.lerpVectors(va, vb, 0.5);\n              if (hasNormals)\n                nm.lerpVectors(na, nb, 0.5);\n              if (hasColors)\n                cm.lerpColors(ca, cb, 0.5);\n              if (hasUVs)\n                um.lerpVectors(ua, ub, 0.5);\n              if (hasUV2s)\n                u2m.lerpVectors(u2a, u2b, 0.5);\n              addTriangle(0, 3, 2);\n              addTriangle(3, 1, 2);\n            } else if (dbc >= dab && dbc >= dac) {\n              vm.lerpVectors(vb, vc, 0.5);\n              if (hasNormals)\n                nm.lerpVectors(nb, nc, 0.5);\n              if (hasColors)\n                cm.lerpColors(cb, cc, 0.5);\n              if (hasUVs)\n                um.lerpVectors(ub, uc, 0.5);\n              if (hasUV2s)\n                u2m.lerpVectors(u2b, u2c, 0.5);\n              addTriangle(0, 1, 3);\n              addTriangle(3, 2, 0);\n            } else {\n              vm.lerpVectors(va, vc, 0.5);\n              if (hasNormals)\n                nm.lerpVectors(na, nc, 0.5);\n              if (hasColors)\n                cm.lerpColors(ca, cc, 0.5);\n              if (hasUVs)\n                um.lerpVectors(ua, uc, 0.5);\n              if (hasUV2s)\n                u2m.lerpVectors(u2a, u2c, 0.5);\n              addTriangle(0, 1, 3);\n              addTriangle(3, 1, 2);\n            }\n          } else {\n            addTriangle(0, 1, 2);\n          }\n        }\n      }\n      const geometry2 = new BufferGeometry();\n      geometry2.setAttribute(\"position\", new Float32BufferAttribute(positions2, 3));\n      if (hasNormals) {\n        geometry2.setAttribute(\"normal\", new Float32BufferAttribute(normals2, 3));\n      }\n      if (hasColors) {\n        geometry2.setAttribute(\"color\", new Float32BufferAttribute(colors2, 3));\n      }\n      if (hasUVs) {\n        geometry2.setAttribute(\"uv\", new Float32BufferAttribute(uvs2, 2));\n      }\n      if (hasUV2s) {\n        geometry2.setAttribute(\"uv2\", new Float32BufferAttribute(uv2s2, 2));\n      }\n      return geometry2;\n    });\n    this.maxEdgeLength = maxEdgeLength;\n    this.maxIterations = maxIterations;\n  }\n}\nexport {\n  TessellateModifier\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}