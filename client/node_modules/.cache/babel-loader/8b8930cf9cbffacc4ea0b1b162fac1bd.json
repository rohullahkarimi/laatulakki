{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Color, Vector2, WebGLRenderTarget, HalfFloatType, NearestFilter, DepthTexture, UnsignedShortType, MeshDepthMaterial, RGBADepthPacking, NoBlending, MeshNormalMaterial, ShaderMaterial, UniformsUtils, CustomBlending, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SAOShader } from \"../shaders/SAOShader.js\";\nimport { DepthLimitedBlurShader, BlurShaderUtils } from \"../shaders/DepthLimitedBlurShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { UnpackDepthRGBAShader } from \"../shaders/UnpackDepthRGBAShader.js\";\nclass SAOPass extends Pass {\n  constructor(scene, camera, useDepthTexture = false, useNormals = false, resolution = new Vector2(256, 256)) {\n    super();\n    this.scene = scene;\n    this.camera = camera;\n    this.clear = true;\n    this.needsSwap = false;\n    this.supportsDepthTextureExtension = useDepthTexture;\n    this.supportsNormalTexture = useNormals;\n    this.originalClearColor = new Color();\n    this._oldClearColor = new Color();\n    this.oldClearAlpha = 1;\n    this.params = {\n      output: 0,\n      saoBias: 0.5,\n      saoIntensity: 0.18,\n      saoScale: 1,\n      saoKernelRadius: 100,\n      saoMinResolution: 0,\n      saoBlur: true,\n      saoBlurRadius: 8,\n      saoBlurStdDev: 4,\n      saoBlurDepthCutoff: 0.01\n    };\n    this.resolution = new Vector2(resolution.x, resolution.y);\n    this.saoRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n      type: HalfFloatType\n    });\n    this.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\n    this.beautyRenderTarget = this.saoRenderTarget.clone();\n    this.normalRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.depthRenderTarget = this.normalRenderTarget.clone();\n    let depthTexture;\n    if (this.supportsDepthTextureExtension) {\n      depthTexture = new DepthTexture();\n      depthTexture.type = UnsignedShortType;\n      this.beautyRenderTarget.depthTexture = depthTexture;\n      this.beautyRenderTarget.depthBuffer = true;\n    }\n    this.depthMaterial = new MeshDepthMaterial();\n    this.depthMaterial.depthPacking = RGBADepthPacking;\n    this.depthMaterial.blending = NoBlending;\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.saoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SAOShader.defines),\n      fragmentShader: SAOShader.fragmentShader,\n      vertexShader: SAOShader.vertexShader,\n      uniforms: UniformsUtils.clone(SAOShader.uniforms)\n    });\n    this.saoMaterial.extensions.derivatives = true;\n    this.saoMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n    this.saoMaterial.defines[\"NORMAL_TEXTURE\"] = this.supportsNormalTexture ? 1 : 0;\n    this.saoMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.saoMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n    this.saoMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n    this.saoMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n    this.saoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.saoMaterial.uniforms[\"cameraProjectionMatrix\"].value = this.camera.projectionMatrix;\n    this.saoMaterial.blending = NoBlending;\n    this.vBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader\n    });\n    this.vBlurMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n    this.vBlurMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.vBlurMaterial.uniforms[\"tDiffuse\"].value = this.saoRenderTarget.texture;\n    this.vBlurMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n    this.vBlurMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n    this.vBlurMaterial.blending = NoBlending;\n    this.hBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader\n    });\n    this.hBlurMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n    this.hBlurMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.hBlurMaterial.uniforms[\"tDiffuse\"].value = this.blurIntermediateRenderTarget.texture;\n    this.hBlurMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n    this.hBlurMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n    this.hBlurMaterial.blending = NoBlending;\n    this.materialCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.materialCopy.transparent = true;\n    this.materialCopy.depthTest = false;\n    this.materialCopy.depthWrite = false;\n    this.materialCopy.blending = CustomBlending;\n    this.materialCopy.blendSrc = DstColorFactor;\n    this.materialCopy.blendDst = ZeroFactor;\n    this.materialCopy.blendEquation = AddEquation;\n    this.materialCopy.blendSrcAlpha = DstAlphaFactor;\n    this.materialCopy.blendDstAlpha = ZeroFactor;\n    this.materialCopy.blendEquationAlpha = AddEquation;\n    this.depthCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(UnpackDepthRGBAShader.uniforms),\n      vertexShader: UnpackDepthRGBAShader.vertexShader,\n      fragmentShader: UnpackDepthRGBAShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.fsQuad = new FullScreenQuad(null);\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    if (this.renderToScreen) {\n      this.materialCopy.blending = NoBlending;\n      this.materialCopy.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n      this.materialCopy.needsUpdate = true;\n      this.renderPass(renderer, this.materialCopy, null);\n    }\n    if (this.params.output === 1) {\n      return;\n    }\n    renderer.getClearColor(this._oldClearColor);\n    this.oldClearAlpha = renderer.getClearAlpha();\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setRenderTarget(this.depthRenderTarget);\n    renderer.clear();\n    this.saoMaterial.uniforms[\"bias\"].value = this.params.saoBias;\n    this.saoMaterial.uniforms[\"intensity\"].value = this.params.saoIntensity;\n    this.saoMaterial.uniforms[\"scale\"].value = this.params.saoScale;\n    this.saoMaterial.uniforms[\"kernelRadius\"].value = this.params.saoKernelRadius;\n    this.saoMaterial.uniforms[\"minResolution\"].value = this.params.saoMinResolution;\n    this.saoMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.saoMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    const depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near);\n    this.vBlurMaterial.uniforms[\"depthCutoff\"].value = depthCutoff;\n    this.hBlurMaterial.uniforms[\"depthCutoff\"].value = depthCutoff;\n    this.vBlurMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.vBlurMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.hBlurMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.hBlurMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius);\n    if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\n      BlurShaderUtils.configure(this.vBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(0, 1));\n      BlurShaderUtils.configure(this.hBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(1, 0));\n      this.prevStdDev = this.params.saoBlurStdDev;\n      this.prevNumSamples = this.params.saoBlurRadius;\n    }\n    renderer.setClearColor(0);\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera);\n    if (!this.supportsDepthTextureExtension) {\n      this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0, 1);\n    }\n    if (this.supportsNormalTexture) {\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n    }\n    this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 16777215, 1);\n    if (this.params.saoBlur) {\n      this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 16777215, 1);\n      this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 16777215, 1);\n    }\n    let outputMaterial = this.materialCopy;\n    if (this.params.output === 3) {\n      if (this.supportsDepthTextureExtension) {\n        this.materialCopy.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.depthTexture;\n        this.materialCopy.needsUpdate = true;\n      } else {\n        this.depthCopy.uniforms[\"tDiffuse\"].value = this.depthRenderTarget.texture;\n        this.depthCopy.needsUpdate = true;\n        outputMaterial = this.depthCopy;\n      }\n    } else if (this.params.output === 4) {\n      this.materialCopy.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    } else {\n      this.materialCopy.uniforms[\"tDiffuse\"].value = this.saoRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    }\n    if (this.params.output === 0) {\n      outputMaterial.blending = CustomBlending;\n    } else {\n      outputMaterial.blending = NoBlending;\n    }\n    this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer);\n    renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  }\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  setSize(width, height) {\n    this.beautyRenderTarget.setSize(width, height);\n    this.saoRenderTarget.setSize(width, height);\n    this.blurIntermediateRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.depthRenderTarget.setSize(width, height);\n    this.saoMaterial.uniforms[\"size\"].value.set(width, height);\n    this.saoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.saoMaterial.uniforms[\"cameraProjectionMatrix\"].value = this.camera.projectionMatrix;\n    this.saoMaterial.needsUpdate = true;\n    this.vBlurMaterial.uniforms[\"size\"].value.set(width, height);\n    this.vBlurMaterial.needsUpdate = true;\n    this.hBlurMaterial.uniforms[\"size\"].value.set(width, height);\n    this.hBlurMaterial.needsUpdate = true;\n  }\n  dispose() {\n    this.saoRenderTarget.dispose();\n    this.blurIntermediateRenderTarget.dispose();\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.depthRenderTarget.dispose();\n    this.depthMaterial.dispose();\n    this.normalMaterial.dispose();\n    this.saoMaterial.dispose();\n    this.vBlurMaterial.dispose();\n    this.hBlurMaterial.dispose();\n    this.materialCopy.dispose();\n    this.depthCopy.dispose();\n    this.fsQuad.dispose();\n  }\n}\n__publicField(SAOPass, \"OUTPUT\", {\n  Beauty: 1,\n  Default: 0,\n  SAO: 2,\n  Depth: 3,\n  Normal: 4\n});\nexport { SAOPass };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Color","Vector2","WebGLRenderTarget","HalfFloatType","NearestFilter","DepthTexture","UnsignedShortType","MeshDepthMaterial","RGBADepthPacking","NoBlending","MeshNormalMaterial","ShaderMaterial","UniformsUtils","CustomBlending","DstColorFactor","ZeroFactor","AddEquation","DstAlphaFactor","Pass","FullScreenQuad","SAOShader","DepthLimitedBlurShader","BlurShaderUtils","CopyShader","UnpackDepthRGBAShader","SAOPass","constructor","scene","camera","useDepthTexture","useNormals","resolution","clear","needsSwap","supportsDepthTextureExtension","supportsNormalTexture","originalClearColor","_oldClearColor","oldClearAlpha","params","output","saoBias","saoIntensity","saoScale","saoKernelRadius","saoMinResolution","saoBlur","saoBlurRadius","saoBlurStdDev","saoBlurDepthCutoff","x","y","saoRenderTarget","type","blurIntermediateRenderTarget","clone","beautyRenderTarget","normalRenderTarget","minFilter","magFilter","depthRenderTarget","depthTexture","depthBuffer","depthMaterial","depthPacking","blending","normalMaterial","saoMaterial","defines","assign","fragmentShader","vertexShader","uniforms","extensions","derivatives","isPerspectiveCamera","texture","set","copy","projectionMatrixInverse","projectionMatrix","vBlurMaterial","hBlurMaterial","materialCopy","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthCopy","fsQuad","render","renderer","writeBuffer","readBuffer","renderToScreen","needsUpdate","renderPass","getClearColor","getClearAlpha","oldAutoClear","autoClear","setRenderTarget","near","far","depthCutoff","Math","floor","prevStdDev","prevNumSamples","configure","setClearColor","renderOverride","outputMaterial","passMaterial","renderTarget","clearColor","clearAlpha","originalClearAlpha","originalAutoClear","setClearAlpha","material","overrideMaterial","setSize","width","height","dispose","Beauty","Default","SAO","Depth","Normal"],"sources":["/Users/rohullahkarimi/Local/laatuLakki_main/client/node_modules/three-stdlib/postprocessing/SAOPass.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Color, Vector2, WebGLRenderTarget, HalfFloatType, NearestFilter, DepthTexture, UnsignedShortType, MeshDepthMaterial, RGBADepthPacking, NoBlending, MeshNormalMaterial, ShaderMaterial, UniformsUtils, CustomBlending, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SAOShader } from \"../shaders/SAOShader.js\";\nimport { DepthLimitedBlurShader, BlurShaderUtils } from \"../shaders/DepthLimitedBlurShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { UnpackDepthRGBAShader } from \"../shaders/UnpackDepthRGBAShader.js\";\nclass SAOPass extends Pass {\n  constructor(scene, camera, useDepthTexture = false, useNormals = false, resolution = new Vector2(256, 256)) {\n    super();\n    this.scene = scene;\n    this.camera = camera;\n    this.clear = true;\n    this.needsSwap = false;\n    this.supportsDepthTextureExtension = useDepthTexture;\n    this.supportsNormalTexture = useNormals;\n    this.originalClearColor = new Color();\n    this._oldClearColor = new Color();\n    this.oldClearAlpha = 1;\n    this.params = {\n      output: 0,\n      saoBias: 0.5,\n      saoIntensity: 0.18,\n      saoScale: 1,\n      saoKernelRadius: 100,\n      saoMinResolution: 0,\n      saoBlur: true,\n      saoBlurRadius: 8,\n      saoBlurStdDev: 4,\n      saoBlurDepthCutoff: 0.01\n    };\n    this.resolution = new Vector2(resolution.x, resolution.y);\n    this.saoRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, { type: HalfFloatType });\n    this.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\n    this.beautyRenderTarget = this.saoRenderTarget.clone();\n    this.normalRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.depthRenderTarget = this.normalRenderTarget.clone();\n    let depthTexture;\n    if (this.supportsDepthTextureExtension) {\n      depthTexture = new DepthTexture();\n      depthTexture.type = UnsignedShortType;\n      this.beautyRenderTarget.depthTexture = depthTexture;\n      this.beautyRenderTarget.depthBuffer = true;\n    }\n    this.depthMaterial = new MeshDepthMaterial();\n    this.depthMaterial.depthPacking = RGBADepthPacking;\n    this.depthMaterial.blending = NoBlending;\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.saoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SAOShader.defines),\n      fragmentShader: SAOShader.fragmentShader,\n      vertexShader: SAOShader.vertexShader,\n      uniforms: UniformsUtils.clone(SAOShader.uniforms)\n    });\n    this.saoMaterial.extensions.derivatives = true;\n    this.saoMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n    this.saoMaterial.defines[\"NORMAL_TEXTURE\"] = this.supportsNormalTexture ? 1 : 0;\n    this.saoMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.saoMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n    this.saoMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n    this.saoMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n    this.saoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.saoMaterial.uniforms[\"cameraProjectionMatrix\"].value = this.camera.projectionMatrix;\n    this.saoMaterial.blending = NoBlending;\n    this.vBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader\n    });\n    this.vBlurMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n    this.vBlurMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.vBlurMaterial.uniforms[\"tDiffuse\"].value = this.saoRenderTarget.texture;\n    this.vBlurMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n    this.vBlurMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n    this.vBlurMaterial.blending = NoBlending;\n    this.hBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader\n    });\n    this.hBlurMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n    this.hBlurMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.hBlurMaterial.uniforms[\"tDiffuse\"].value = this.blurIntermediateRenderTarget.texture;\n    this.hBlurMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n    this.hBlurMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n    this.hBlurMaterial.blending = NoBlending;\n    this.materialCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.materialCopy.transparent = true;\n    this.materialCopy.depthTest = false;\n    this.materialCopy.depthWrite = false;\n    this.materialCopy.blending = CustomBlending;\n    this.materialCopy.blendSrc = DstColorFactor;\n    this.materialCopy.blendDst = ZeroFactor;\n    this.materialCopy.blendEquation = AddEquation;\n    this.materialCopy.blendSrcAlpha = DstAlphaFactor;\n    this.materialCopy.blendDstAlpha = ZeroFactor;\n    this.materialCopy.blendEquationAlpha = AddEquation;\n    this.depthCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(UnpackDepthRGBAShader.uniforms),\n      vertexShader: UnpackDepthRGBAShader.vertexShader,\n      fragmentShader: UnpackDepthRGBAShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.fsQuad = new FullScreenQuad(null);\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    if (this.renderToScreen) {\n      this.materialCopy.blending = NoBlending;\n      this.materialCopy.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n      this.materialCopy.needsUpdate = true;\n      this.renderPass(renderer, this.materialCopy, null);\n    }\n    if (this.params.output === 1) {\n      return;\n    }\n    renderer.getClearColor(this._oldClearColor);\n    this.oldClearAlpha = renderer.getClearAlpha();\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setRenderTarget(this.depthRenderTarget);\n    renderer.clear();\n    this.saoMaterial.uniforms[\"bias\"].value = this.params.saoBias;\n    this.saoMaterial.uniforms[\"intensity\"].value = this.params.saoIntensity;\n    this.saoMaterial.uniforms[\"scale\"].value = this.params.saoScale;\n    this.saoMaterial.uniforms[\"kernelRadius\"].value = this.params.saoKernelRadius;\n    this.saoMaterial.uniforms[\"minResolution\"].value = this.params.saoMinResolution;\n    this.saoMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.saoMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    const depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near);\n    this.vBlurMaterial.uniforms[\"depthCutoff\"].value = depthCutoff;\n    this.hBlurMaterial.uniforms[\"depthCutoff\"].value = depthCutoff;\n    this.vBlurMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.vBlurMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.hBlurMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.hBlurMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius);\n    if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\n      BlurShaderUtils.configure(\n        this.vBlurMaterial,\n        this.params.saoBlurRadius,\n        this.params.saoBlurStdDev,\n        new Vector2(0, 1)\n      );\n      BlurShaderUtils.configure(\n        this.hBlurMaterial,\n        this.params.saoBlurRadius,\n        this.params.saoBlurStdDev,\n        new Vector2(1, 0)\n      );\n      this.prevStdDev = this.params.saoBlurStdDev;\n      this.prevNumSamples = this.params.saoBlurRadius;\n    }\n    renderer.setClearColor(0);\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera);\n    if (!this.supportsDepthTextureExtension) {\n      this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0, 1);\n    }\n    if (this.supportsNormalTexture) {\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n    }\n    this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 16777215, 1);\n    if (this.params.saoBlur) {\n      this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 16777215, 1);\n      this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 16777215, 1);\n    }\n    let outputMaterial = this.materialCopy;\n    if (this.params.output === 3) {\n      if (this.supportsDepthTextureExtension) {\n        this.materialCopy.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.depthTexture;\n        this.materialCopy.needsUpdate = true;\n      } else {\n        this.depthCopy.uniforms[\"tDiffuse\"].value = this.depthRenderTarget.texture;\n        this.depthCopy.needsUpdate = true;\n        outputMaterial = this.depthCopy;\n      }\n    } else if (this.params.output === 4) {\n      this.materialCopy.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    } else {\n      this.materialCopy.uniforms[\"tDiffuse\"].value = this.saoRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    }\n    if (this.params.output === 0) {\n      outputMaterial.blending = CustomBlending;\n    } else {\n      outputMaterial.blending = NoBlending;\n    }\n    this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer);\n    renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  }\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  setSize(width, height) {\n    this.beautyRenderTarget.setSize(width, height);\n    this.saoRenderTarget.setSize(width, height);\n    this.blurIntermediateRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.depthRenderTarget.setSize(width, height);\n    this.saoMaterial.uniforms[\"size\"].value.set(width, height);\n    this.saoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.saoMaterial.uniforms[\"cameraProjectionMatrix\"].value = this.camera.projectionMatrix;\n    this.saoMaterial.needsUpdate = true;\n    this.vBlurMaterial.uniforms[\"size\"].value.set(width, height);\n    this.vBlurMaterial.needsUpdate = true;\n    this.hBlurMaterial.uniforms[\"size\"].value.set(width, height);\n    this.hBlurMaterial.needsUpdate = true;\n  }\n  dispose() {\n    this.saoRenderTarget.dispose();\n    this.blurIntermediateRenderTarget.dispose();\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.depthRenderTarget.dispose();\n    this.depthMaterial.dispose();\n    this.normalMaterial.dispose();\n    this.saoMaterial.dispose();\n    this.vBlurMaterial.dispose();\n    this.hBlurMaterial.dispose();\n    this.materialCopy.dispose();\n    this.depthCopy.dispose();\n    this.fsQuad.dispose();\n  }\n}\n__publicField(SAOPass, \"OUTPUT\", {\n  Beauty: 1,\n  Default: 0,\n  SAO: 2,\n  Depth: 3,\n  Normal: 4\n});\nexport {\n  SAOPass\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}