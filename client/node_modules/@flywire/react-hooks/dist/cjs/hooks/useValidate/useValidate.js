"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const validate_1 = __importDefault(require("./validate"));
const lodash_isequalwith_1 = __importDefault(require("lodash.isequalwith"));
const types_1 = require("./types");
function noop() {
    // do nothin
}
function customizer(value, other) {
    if (typeof value === 'function' || typeof other === 'function') {
        return true;
    }
}
function useValidate(data = {}, constraints = {}, { onError = noop, onSuccess = noop } = {}) {
    const [state, dispatch] = (0, react_1.useReducer)((state, action) => {
        switch (action.type) {
            case types_1.actionTypes.VALIDATION_SUCCESS:
                return Object.assign(Object.assign({}, state), { errors: {}, isValid: true });
            case types_1.actionTypes.VALIDATION_ERROR:
                return Object.assign(Object.assign({}, state), { errors: action.errors, isValid: false });
            default:
                return state;
        }
    }, {
        errors: {},
        isValid: false,
    });
    function perform() {
        const errors = validate_1.default.validate(data, constraints);
        if (errors) {
            dispatch({ type: types_1.actionTypes.VALIDATION_ERROR, errors });
            onError(errors);
            return false;
        }
        dispatch({ type: types_1.actionTypes.VALIDATION_SUCCESS });
        onSuccess();
        return true;
    }
    (0, react_1.useEffect)(() => {
        if ((0, lodash_isequalwith_1.default)(previousInputs.current, [data, constraints], customizer)) {
            return;
        }
        perform();
    });
    const previousInputs = (0, react_1.useRef)();
    (0, react_1.useEffect)(() => {
        previousInputs.current = [data, constraints];
    });
    return Object.assign(Object.assign({}, state), { validate: perform });
}
exports.default = useValidate;
