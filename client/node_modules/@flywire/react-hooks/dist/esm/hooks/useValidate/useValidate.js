import { useEffect, useReducer, useRef } from 'react';
import validate from './validate';
import isEqualWith from 'lodash.isequalwith';
import { actionTypes, } from './types';
function noop() {
    // do nothin
}
function customizer(value, other) {
    if (typeof value === 'function' || typeof other === 'function') {
        return true;
    }
}
function useValidate(data = {}, constraints = {}, { onError = noop, onSuccess = noop } = {}) {
    const [state, dispatch] = useReducer((state, action) => {
        switch (action.type) {
            case actionTypes.VALIDATION_SUCCESS:
                return { ...state, errors: {}, isValid: true };
            case actionTypes.VALIDATION_ERROR:
                return { ...state, errors: action.errors, isValid: false };
            default:
                return state;
        }
    }, {
        errors: {},
        isValid: false,
    });
    function perform() {
        const errors = validate.validate(data, constraints);
        if (errors) {
            dispatch({ type: actionTypes.VALIDATION_ERROR, errors });
            onError(errors);
            return false;
        }
        dispatch({ type: actionTypes.VALIDATION_SUCCESS });
        onSuccess();
        return true;
    }
    useEffect(() => {
        if (isEqualWith(previousInputs.current, [data, constraints], customizer)) {
            return;
        }
        perform();
    });
    const previousInputs = useRef();
    useEffect(() => {
        previousInputs.current = [data, constraints];
    });
    return { ...state, validate: perform };
}
export default useValidate;
