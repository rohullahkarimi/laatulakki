import validate from 'validate.js';
import XRegExp from 'xregexp';
import { parse, isValid } from 'date-fns';
import { PhoneNumberUtil, PhoneNumberType } from 'google-libphonenumber';
const phoneUtil = PhoneNumberUtil.getInstance();
const phoneNumberType = PhoneNumberType;
const dateRegExp = /^\d{2}\/\d{2}\/\d{4}$/;
const DEFAULT_DATE_FORMAT = 'MM/dd/yyyy';
const INVALID_MSG = '^is invalid';
function isValidDate(str, format) {
    const date = parse(str, format, new Date());
    return isValid(date);
}
validate.extend(validate.validators.datetime, {
    parse: function (value, options) {
        if (!value) {
            return false;
        }
        if (!dateRegExp.test(value)) {
            return true;
        }
        return !isValidDate(value, options.format || DEFAULT_DATE_FORMAT);
    },
    format: function (value) {
        return value;
    },
});
validate.validators.customFormat = (value, options) => {
    if (!value) {
        return;
    }
    try {
        const { pattern } = options;
        const ignoreCase = pattern.includes('(?i)');
        const patternStr = pattern
            .replace(/\\A/i, '^')
            .replace(/\\Z/i, '$')
            .replace(/\(\?i\)/g, '');
        const regExp = XRegExp(patternStr, ignoreCase ? 'i' : undefined);
        const message = options.message || INVALID_MSG;
        if (regExp.test(value)) {
            return;
        }
        return message;
    }
    catch (err) {
        // does nothing
    }
};
function isMobilePhone(phone) {
    return phoneUtil.getNumberType(phone) === phoneNumberType.MOBILE;
}
validate.validators.phone = (value, { message, country: countryOrCountries = [], mobile = true, strict = true, shouldApplyValidation = () => true, }, _key, attributes) => {
    if (!value || !shouldApplyValidation(value, attributes)) {
        return;
    }
    const countries = Array.isArray(countryOrCountries)
        ? countryOrCountries
        : new Array(countryOrCountries);
    try {
        const num = phoneUtil.parse(value, countries[0]);
        if (!strict) {
            if (phoneUtil.isPossibleNumber(num))
                return;
            return message || INVALID_MSG;
        }
        const isValidPhone = countries.length === 0
            ? phoneUtil.isValidNumber(num)
            : countries.some((country) => phoneUtil.isValidNumberForRegion(num, country));
        if (isValidPhone) {
            if (mobile && !isMobilePhone(num)) {
                return message || '^is not a mobile phone';
            }
            return;
        }
    }
    catch (err) {
        return message || INVALID_MSG;
    }
    return message || INVALID_MSG;
};
export default validate;
