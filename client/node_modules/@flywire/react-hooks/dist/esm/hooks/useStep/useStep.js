import { useState, useCallback } from 'react';
const FIRST_STEP = 0;
function useStep({ steps, initialStep = FIRST_STEP, }) {
    const [completed, setCompleted] = useState([]);
    const [index, setIndex] = useState(initialStep);
    const step = steps[index];
    const inRange = useCallback((index) => {
        if (typeof index === 'number') {
            if (index < FIRST_STEP)
                return FIRST_STEP;
            if (index >= steps.length)
                return steps.length - 1;
            return index;
        }
        return steps.findIndex((step) => step.id === index) || FIRST_STEP;
    }, [steps]);
    const go = useCallback((nextStep) => setIndex(inRange(nextStep)), [inRange]);
    const next = useCallback(() => go(index + 1), [go, index]);
    const prev = useCallback(() => go(index - 1), [go, index]);
    const complete = useCallback((completeStep = index) => {
        const completeStepIndex = inRange(completeStep);
        const id = steps[completeStepIndex].id;
        setCompleted([...Array.from(new Set([...completed, id]))]);
    }, [completed, inRange, index, steps]);
    const uncomplete = useCallback((uncompleteStep = index) => {
        const uncompleteStepIndex = inRange(uncompleteStep);
        const stepId = steps[uncompleteStepIndex].id;
        setCompleted(completed.filter((id) => id !== stepId));
    }, [completed, inRange, index, steps]);
    const reset = useCallback((resetStep = initialStep) => {
        setIndex(resetStep);
        setCompleted([]);
    }, [initialStep]);
    return {
        complete,
        completed,
        index,
        navigation: { next, prev, go },
        step,
        uncomplete,
        reset,
    };
}
export default useStep;
