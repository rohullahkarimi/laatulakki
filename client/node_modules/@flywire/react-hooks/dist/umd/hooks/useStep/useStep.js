(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "react"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const react_1 = require("react");
    const FIRST_STEP = 0;
    function useStep({ steps, initialStep = FIRST_STEP, }) {
        const [completed, setCompleted] = (0, react_1.useState)([]);
        const [index, setIndex] = (0, react_1.useState)(initialStep);
        const step = steps[index];
        const inRange = (0, react_1.useCallback)((index) => {
            if (typeof index === 'number') {
                if (index < FIRST_STEP)
                    return FIRST_STEP;
                if (index >= steps.length)
                    return steps.length - 1;
                return index;
            }
            return steps.findIndex((step) => step.id === index) || FIRST_STEP;
        }, [steps]);
        const go = (0, react_1.useCallback)((nextStep) => setIndex(inRange(nextStep)), [inRange]);
        const next = (0, react_1.useCallback)(() => go(index + 1), [go, index]);
        const prev = (0, react_1.useCallback)(() => go(index - 1), [go, index]);
        const complete = (0, react_1.useCallback)((completeStep = index) => {
            const completeStepIndex = inRange(completeStep);
            const id = steps[completeStepIndex].id;
            setCompleted([...Array.from(new Set([...completed, id]))]);
        }, [completed, inRange, index, steps]);
        const uncomplete = (0, react_1.useCallback)((uncompleteStep = index) => {
            const uncompleteStepIndex = inRange(uncompleteStep);
            const stepId = steps[uncompleteStepIndex].id;
            setCompleted(completed.filter((id) => id !== stepId));
        }, [completed, inRange, index, steps]);
        const reset = (0, react_1.useCallback)((resetStep = initialStep) => {
            setIndex(resetStep);
            setCompleted([]);
        }, [initialStep]);
        return {
            complete,
            completed,
            index,
            navigation: { next, prev, go },
            step,
            uncomplete,
            reset,
        };
    }
    exports.default = useStep;
});
