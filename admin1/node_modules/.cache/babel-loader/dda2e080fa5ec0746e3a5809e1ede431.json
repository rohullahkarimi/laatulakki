{"ast":null,"code":"import { publicRequest, userRequest } from \"../requestMethods\";\nimport { getProductFailure, getProductStart, getProductSuccess, deleteProductStart, deleteProductSuccess, deleteProductFailure } from \"./productRedux\";\nimport { loginFailure, loginStart, loginSuccess } from \"./userRedux\";\nexport const login = async (dispatch, user) => {\n  dispatch(loginStart());\n\n  try {\n    const res = await publicRequest.post(\"/auth/login\", user);\n    dispatch(loginSuccess(res.data));\n  } catch (err) {\n    dispatch(loginFailure());\n  }\n};\nexport const getProducts = async dispatch => {\n  dispatch(getProductStart());\n\n  try {\n    const res = await publicRequest.get(\"/products\");\n    dispatch(getProductSuccess(res.data));\n  } catch (err) {\n    dispatch(getProductFailure());\n  }\n};\nexport const deleteProduct = async (id, dispatch) => {\n  dispatch(deleteProductStart());\n\n  try {\n    //const res = await userRequest.delete(`/products/${id}`);\n    dispatch(deleteProductSuccess(id));\n  } catch (err) {\n    dispatch(deleteProductFailure());\n  }\n};\nexport const updateProduct = async (id, product, dispatch) => {\n  dispatch(updateProductStart());\n\n  try {\n    // update\n    dispatch(updateProductSuccess({\n      id,\n      product\n    }));\n  } catch (err) {\n    dispatch(updateProductFailure());\n  }\n};\nexport const addProduct = async (product, dispatch) => {\n  dispatch(addProductStart());\n\n  try {\n    const res = await userRequest.post(`/products`, product);\n    dispatch(addProductSuccess(res.data));\n  } catch (err) {\n    dispatch(addProductFailure());\n  }\n};","map":{"version":3,"sources":["/Users/rohullahkarimi/Local/laatuLakki_main/admin/src/redux/apiCalls.js"],"names":["publicRequest","userRequest","getProductFailure","getProductStart","getProductSuccess","deleteProductStart","deleteProductSuccess","deleteProductFailure","loginFailure","loginStart","loginSuccess","login","dispatch","user","res","post","data","err","getProducts","get","deleteProduct","id","updateProduct","product","updateProductStart","updateProductSuccess","updateProductFailure","addProduct","addProductStart","addProductSuccess","addProductFailure"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,WAAxB,QAA2C,mBAA3C;AACA,SAASC,iBAAT,EAA4BC,eAA5B,EAA6CC,iBAA7C,EAAgEC,kBAAhE,EAAoFC,oBAApF,EAA0GC,oBAA1G,QAAsI,gBAAtI;AACA,SACIC,YADJ,EAEIC,UAFJ,EAGIC,YAHJ,QAIO,aAJP;AAMA,OAAO,MAAMC,KAAK,GAAG,OAAOC,QAAP,EAAiBC,IAAjB,KAA0B;AAC3CD,EAAAA,QAAQ,CAACH,UAAU,EAAX,CAAR;;AACA,MAAG;AACC,UAAMK,GAAG,GAAG,MAAMd,aAAa,CAACe,IAAd,CAAmB,aAAnB,EAAkCF,IAAlC,CAAlB;AACAD,IAAAA,QAAQ,CAACF,YAAY,CAACI,GAAG,CAACE,IAAL,CAAb,CAAR;AACH,GAHD,CAGC,OAAMC,GAAN,EAAU;AACPL,IAAAA,QAAQ,CAACJ,YAAY,EAAb,CAAR;AACH;AACJ,CARM;AAUP,OAAO,MAAMU,WAAW,GAAG,MAAON,QAAP,IAAoB;AAC3CA,EAAAA,QAAQ,CAACT,eAAe,EAAhB,CAAR;;AACA,MAAG;AACC,UAAMW,GAAG,GAAG,MAAMd,aAAa,CAACmB,GAAd,CAAkB,WAAlB,CAAlB;AACAP,IAAAA,QAAQ,CAACR,iBAAiB,CAACU,GAAG,CAACE,IAAL,CAAlB,CAAR;AACH,GAHD,CAGC,OAAMC,GAAN,EAAU;AACPL,IAAAA,QAAQ,CAACV,iBAAiB,EAAlB,CAAR;AACH;AACJ,CARM;AAUP,OAAO,MAAMkB,aAAa,GAAG,OAAOC,EAAP,EAAWT,QAAX,KAAwB;AACjDA,EAAAA,QAAQ,CAACP,kBAAkB,EAAnB,CAAR;;AACA,MAAG;AACC;AACAO,IAAAA,QAAQ,CAACN,oBAAoB,CAACe,EAAD,CAArB,CAAR;AACH,GAHD,CAGC,OAAMJ,GAAN,EAAU;AACPL,IAAAA,QAAQ,CAACL,oBAAoB,EAArB,CAAR;AACH;AACJ,CARM;AAUP,OAAO,MAAMe,aAAa,GAAG,OAAOD,EAAP,EAAWE,OAAX,EAAoBX,QAApB,KAAiC;AAC1DA,EAAAA,QAAQ,CAACY,kBAAkB,EAAnB,CAAR;;AACA,MAAI;AACF;AACAZ,IAAAA,QAAQ,CAACa,oBAAoB,CAAC;AAAEJ,MAAAA,EAAF;AAAME,MAAAA;AAAN,KAAD,CAArB,CAAR;AACD,GAHD,CAGE,OAAON,GAAP,EAAY;AACZL,IAAAA,QAAQ,CAACc,oBAAoB,EAArB,CAAR;AACD;AACJ,CARM;AAUP,OAAO,MAAMC,UAAU,GAAG,OAAOJ,OAAP,EAAgBX,QAAhB,KAA6B;AACnDA,EAAAA,QAAQ,CAACgB,eAAe,EAAhB,CAAR;;AACA,MAAI;AACA,UAAMd,GAAG,GAAG,MAAMb,WAAW,CAACc,IAAZ,CAAkB,WAAlB,EAA8BQ,OAA9B,CAAlB;AACAX,IAAAA,QAAQ,CAACiB,iBAAiB,CAACf,GAAG,CAACE,IAAL,CAAlB,CAAR;AACH,GAHD,CAGE,OAAOC,GAAP,EAAY;AACVL,IAAAA,QAAQ,CAACkB,iBAAiB,EAAlB,CAAR;AACH;AACJ,CARM","sourcesContent":["import { publicRequest, userRequest } from \"../requestMethods\";\nimport { getProductFailure, getProductStart, getProductSuccess, deleteProductStart, deleteProductSuccess, deleteProductFailure } from \"./productRedux\";\nimport { \n    loginFailure, \n    loginStart, \n    loginSuccess\n} from \"./userRedux\"\n\nexport const login = async (dispatch, user) => {\n    dispatch(loginStart());\n    try{\n        const res = await publicRequest.post(\"/auth/login\", user);\n        dispatch(loginSuccess(res.data));\n    }catch(err){\n        dispatch(loginFailure());\n    }\n};\n\nexport const getProducts = async (dispatch) => {\n    dispatch(getProductStart());\n    try{\n        const res = await publicRequest.get(\"/products\");\n        dispatch(getProductSuccess(res.data));\n    }catch(err){\n        dispatch(getProductFailure());\n    }\n};\n\nexport const deleteProduct = async (id, dispatch) => {\n    dispatch(deleteProductStart());\n    try{\n        //const res = await userRequest.delete(`/products/${id}`);\n        dispatch(deleteProductSuccess(id));\n    }catch(err){\n        dispatch(deleteProductFailure());\n    }\n};\n\nexport const updateProduct = async (id, product, dispatch) => {\n    dispatch(updateProductStart());\n    try {\n      // update\n      dispatch(updateProductSuccess({ id, product }));\n    } catch (err) {\n      dispatch(updateProductFailure());\n    }\n};\n\nexport const addProduct = async (product, dispatch) => {\n    dispatch(addProductStart());\n    try {\n        const res = await userRequest.post(`/products`, product);\n        dispatch(addProductSuccess(res.data));\n    } catch (err) {\n        dispatch(addProductFailure());\n    }\n};"]},"metadata":{},"sourceType":"module"}